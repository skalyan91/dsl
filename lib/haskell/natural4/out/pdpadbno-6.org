* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-6/)

* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Unlikely",UnDeeper,Given,GoDeeper,Other "an individual",Other "who",GoDeeper,Other "is affected by an NDB",UnDeeper,UnDeeper,Decide,GoDeeper,Other "it is",GoDeeper,Other "unlikely that the notifiable data breach will result in significant harm to the affected individual",GoDeeper,Aka,GoDeeper,Other "Unlikely",UnDeeper,UnDeeper,UnDeeper,UnDeeper,If,GoDeeper,GoDeeper,Other "the organisation has taken any action",GoDeeper,Other "to",GoDeeper,Other "render it unlikely that the notifiable data breach will result in significant harm to the individual",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "the organisation already implemented any technological measure",GoDeeper,Other "to",GoDeeper,Other "render it unlikely that the notifiable data breach will result in significant harm to the individual",UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: UnDeeper Given GoDeeper Other "an indivi <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / pRegRuleSugary                                                                                                :2_1:Given:
***** / someDeep                                                                                                    :2_1:Given:
****** / someDeep first part calls base directly                                                                   :2_1:Given:
someDeep first part calls base directly> IN: Given GoDeeper Other "an individual" Oth <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected Given
someDeep first part calls base directly> expecting Other text

someDeep> IN: Given GoDeeper Other "an individual" Oth <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected Given
someDeep> expecting Other text

pRegRuleSugary> IN: Given GoDeeper Other "an individual" Oth <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected Given
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Given:
***** / permutationsReg                                                                                             :2_1:Given:
****** / regulative permutation with deontic-temporal                                                              :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: Given GoDeeper Other "an individual" Oth <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Given
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Given
$>|> expecting Having

preambleParamText:[Having]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Given
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (COK): Given
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "an i:
|>>/recurse> IN: Other "an individual" Other "who" GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Other "an individual"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :2_2:Other "an i:
*********** / pParamText                                                                                        :2_2:Other "an i:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "an i:
************* / pKeyValuesAka                                                                                 :2_2:Other "an i:
************** / slAKA                                                                                       :2_2:Other "an i:
*************** / $*|                                                                                       :2_2:Other "an i:
**************** / slAKA base                                                                              :2_2:Other "an i:
***************** / slKeyValues                                                                           :2_2:Other "an i:
****************** / $*|                                                                                 :2_2:Other "an i:
******************* / someSL                                                                            :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

******************* \ someSL has returned (["an individual"],0)                                         :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

****************** \ $*| has returned (["an individual"],0)                                              :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / |?| optional something                                                            :3_2:Other "who":
******************** / |>>/recurse                                                                     :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :3_2:Other "who":
********************* / slTypeSig                                                                     :3_2:Other "who":
********************** / $>|                                                                         :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Is or TypeSeparator

slTypeSig> IN: Other "who" GoDeeper Other "is affected  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected Other "who"
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:Other "who":
******************* > |>>/base got Nothing                                                              :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                   :3_2:Other "who":
slKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
slKeyValues> MATCH (COK): Other "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                          :3_2:Other "who":
slAKA base> IN: Other "an individual" Other "who" GoDeep <…>
slAKA base> MATCH (COK): Other "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                             :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ $*| has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional akapart                                                                  :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / PAKA/akapart                                                                      :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
********************* / Aka Token                                                                     :3_2:Other "who":
Aka Token> IN: Other "who" GoDeeper Other "is affected  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected Other "who"
Aka Token> expecting Aka

$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Aka

PAKA/akapart> IN: Other "who" GoDeeper Other "is affected  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected Other "who"
PAKA/akapart> expecting Aka

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Aka

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional akapart> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                         :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional typically                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / typically                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Typically

typically> IN: Other "who" GoDeeper Other "is affected  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected Other "who"
typically> expecting Typically

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Typically

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional typically> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                       :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** > slAKA: proceeding after base and entityalias are retrieved ...                            :3_2:Other "who":
*************** > pAKA: entityalias = Nothing                                                               :3_2:Other "who":
slAKA> IN: Other "an individual" Other "who" GoDeep <…>
slAKA> MATCH (COK): Other "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
************** / undeepers                                                                                   :3_2:Other "who":
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                    :3_2:Other "who":
*************** > sameLine: success!                                                                        :3_2:Other "who":
undeepers> IN: Other "who" GoDeeper Other "is affected  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :3_2:Other "who":
pKeyValuesAka> IN: Other "an individual" Other "who" GoDeep <…>
pKeyValuesAka> MATCH (COK): Other "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                    :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)            :3_2:Other "who":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :3_2:Other "who":
************* / manyIndentation/leaf?                                                                         :3_2:Other "who":
************** / sameMany                                                                                    :3_2:Other "who":
*************** / pKeyValuesAka                                                                             :3_2:Other "who":
**************** / slAKA                                                                                   :3_2:Other "who":
***************** / $*|                                                                                   :3_2:Other "who":
****************** / slAKA base                                                                          :3_2:Other "who":
******************* / slKeyValues                                                                       :3_2:Other "who":
******************** / $*|                                                                             :3_2:Other "who":
********************* / someSL                                                                        :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

********************* \ someSL has returned (["who","is affected by an NDB"],1)                        :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

******************** \ $*| has returned (["who","is affected by an NDB"],1)                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / |?| optional something                                                         :4_2:UnDeeper:
********************** / |>>/recurse                                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                     :4_2:UnDeeper:
*********************** / slTypeSig                                                                  :4_2:UnDeeper:
************************ / $>|                                                                      :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :4_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :4_2:UnDeeper:
slKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
slKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

******************* \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)          :4_2:UnDeeper:
slAKA base> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA base> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

****************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)             :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional akapart                                                               :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / PAKA/akapart                                                                   :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
*********************** / Aka Token                                                                  :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional typically                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / typically                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :4_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :4_2:UnDeeper:
slAKA> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
**************** / undeepers                                                                                :4_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                 :4_2:UnDeeper:
***************** > sameLine: success!                                                                       :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                  :4_3:UnDeeper:
pKeyValuesAka> IN: Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

*************** \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                      :4_3:UnDeeper:
*************** / pKeyValuesAka                                                                                :4_3:UnDeeper:
**************** / slAKA                                                                                      :4_3:UnDeeper:
***************** / $*|                                                                                      :4_3:UnDeeper:
****************** / slAKA base                                                                             :4_3:UnDeeper:
******************* / slKeyValues                                                                          :4_3:UnDeeper:
******************** / $*|                                                                                :4_3:UnDeeper:
********************* / someSL                                                                           :4_3:UnDeeper:
********************** / pNumAsText                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slKeyValues> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting Other text or TNumber 1234

slAKA base> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected UnDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected UnDeeper
slAKA> expecting Other text or TNumber 1234

pKeyValuesAka> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting Other text or TNumber 1234

sameMany> IN: Other "who" GoDeeper Other "is affected  <…>
sameMany> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************** \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: Other "an individual" Other "who" GoDeep <…>
pParamText> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
*********** > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]       :4_3:UnDeeper:
|>>/base> IN: Other "an individual" Other "who" GoDeep <…>
|>>/base> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

********** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

********* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
******** / undeepers                                                                                                  :4_3:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                   :4_3:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Decide:
undeepers> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Decide:
preambleParamText:[Given]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

******* \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
******* / preambleParamText:[Given]                                                                               :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

******* / WHERE                                                                                                   :4_1:Decide:
WHERE> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected Decide
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Having

preambleParamText:[Having]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected Decide
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Upon]                                                                                :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :4_1:Decide:
preambleBoolStructR [Unless]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected Decide
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :4_1:Decide:
preambleBoolStructR [When,If]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected Decide
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting May, Must, or Shant

pDT> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=12:
pDT> unexpected Decide
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Decide:
pActor [Every,Party,TokAll]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=12:
pActor [Every,Party,TokAll]> unexpected Decide
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDoAction/Do                                                                                            :4_1:Decide:
pDoAction/Do> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=12:
pDoAction/Do> unexpected Decide
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Given GoDeeper Other "an individual" Oth <…>
regulative permutation with deontic-temporal> MATCH (CERR): Given GoDeeper Other "an individual" Oth <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=12:
regulative permutation with deontic-temporal> unexpected Decide
regulative permutation with deontic-temporal> expecting Do, Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: Given GoDeeper Other "an individual" Oth <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Given
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Given
$>|> expecting Having

preambleParamText:[Having]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Given
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (COK): Given
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "an i:
|>>/recurse> IN: Other "an individual" Other "who" GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Other "an individual"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :2_2:Other "an i:
*********** / pParamText                                                                                        :2_2:Other "an i:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "an i:
************* / pKeyValuesAka                                                                                 :2_2:Other "an i:
************** / slAKA                                                                                       :2_2:Other "an i:
*************** / $*|                                                                                       :2_2:Other "an i:
**************** / slAKA base                                                                              :2_2:Other "an i:
***************** / slKeyValues                                                                           :2_2:Other "an i:
****************** / $*|                                                                                 :2_2:Other "an i:
******************* / someSL                                                                            :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

******************* \ someSL has returned (["an individual"],0)                                         :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

****************** \ $*| has returned (["an individual"],0)                                              :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / |?| optional something                                                            :3_2:Other "who":
******************** / |>>/recurse                                                                     :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :3_2:Other "who":
********************* / slTypeSig                                                                     :3_2:Other "who":
********************** / $>|                                                                         :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Is or TypeSeparator

slTypeSig> IN: Other "who" GoDeeper Other "is affected  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected Other "who"
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:Other "who":
******************* > |>>/base got Nothing                                                              :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                   :3_2:Other "who":
slKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
slKeyValues> MATCH (COK): Other "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                          :3_2:Other "who":
slAKA base> IN: Other "an individual" Other "who" GoDeep <…>
slAKA base> MATCH (COK): Other "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                             :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ $*| has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional akapart                                                                  :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / PAKA/akapart                                                                      :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
********************* / Aka Token                                                                     :3_2:Other "who":
Aka Token> IN: Other "who" GoDeeper Other "is affected  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected Other "who"
Aka Token> expecting Aka

$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Aka

PAKA/akapart> IN: Other "who" GoDeeper Other "is affected  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected Other "who"
PAKA/akapart> expecting Aka

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Aka

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional akapart> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                         :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional typically                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / typically                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Typically

typically> IN: Other "who" GoDeeper Other "is affected  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected Other "who"
typically> expecting Typically

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Typically

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional typically> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                       :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** > slAKA: proceeding after base and entityalias are retrieved ...                            :3_2:Other "who":
*************** > pAKA: entityalias = Nothing                                                               :3_2:Other "who":
slAKA> IN: Other "an individual" Other "who" GoDeep <…>
slAKA> MATCH (COK): Other "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
************** / undeepers                                                                                   :3_2:Other "who":
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                    :3_2:Other "who":
*************** > sameLine: success!                                                                        :3_2:Other "who":
undeepers> IN: Other "who" GoDeeper Other "is affected  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :3_2:Other "who":
pKeyValuesAka> IN: Other "an individual" Other "who" GoDeep <…>
pKeyValuesAka> MATCH (COK): Other "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                    :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)            :3_2:Other "who":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :3_2:Other "who":
************* / manyIndentation/leaf?                                                                         :3_2:Other "who":
************** / sameMany                                                                                    :3_2:Other "who":
*************** / pKeyValuesAka                                                                             :3_2:Other "who":
**************** / slAKA                                                                                   :3_2:Other "who":
***************** / $*|                                                                                   :3_2:Other "who":
****************** / slAKA base                                                                          :3_2:Other "who":
******************* / slKeyValues                                                                       :3_2:Other "who":
******************** / $*|                                                                             :3_2:Other "who":
********************* / someSL                                                                        :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

********************* \ someSL has returned (["who","is affected by an NDB"],1)                        :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

******************** \ $*| has returned (["who","is affected by an NDB"],1)                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / |?| optional something                                                         :4_2:UnDeeper:
********************** / |>>/recurse                                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                     :4_2:UnDeeper:
*********************** / slTypeSig                                                                  :4_2:UnDeeper:
************************ / $>|                                                                      :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :4_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :4_2:UnDeeper:
slKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
slKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

******************* \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)          :4_2:UnDeeper:
slAKA base> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA base> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

****************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)             :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional akapart                                                               :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / PAKA/akapart                                                                   :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
*********************** / Aka Token                                                                  :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional typically                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / typically                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :4_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :4_2:UnDeeper:
slAKA> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
**************** / undeepers                                                                                :4_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                 :4_2:UnDeeper:
***************** > sameLine: success!                                                                       :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                  :4_3:UnDeeper:
pKeyValuesAka> IN: Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

*************** \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                      :4_3:UnDeeper:
*************** / pKeyValuesAka                                                                                :4_3:UnDeeper:
**************** / slAKA                                                                                      :4_3:UnDeeper:
***************** / $*|                                                                                      :4_3:UnDeeper:
****************** / slAKA base                                                                             :4_3:UnDeeper:
******************* / slKeyValues                                                                          :4_3:UnDeeper:
******************** / $*|                                                                                :4_3:UnDeeper:
********************* / someSL                                                                           :4_3:UnDeeper:
********************** / pNumAsText                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slKeyValues> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting Other text or TNumber 1234

slAKA base> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected UnDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected UnDeeper
slAKA> expecting Other text or TNumber 1234

pKeyValuesAka> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting Other text or TNumber 1234

sameMany> IN: Other "who" GoDeeper Other "is affected  <…>
sameMany> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************** \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: Other "an individual" Other "who" GoDeep <…>
pParamText> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
*********** > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]       :4_3:UnDeeper:
|>>/base> IN: Other "an individual" Other "who" GoDeep <…>
|>>/base> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

********** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

********* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
******** / undeepers                                                                                                  :4_3:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                   :4_3:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Decide:
undeepers> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Decide:
preambleParamText:[Given]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

******* \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
******* / preambleParamText:[Given]                                                                               :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

******* / WHERE                                                                                                   :4_1:Decide:
WHERE> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected Decide
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Having

preambleParamText:[Having]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected Decide
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Upon]                                                                                :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :4_1:Decide:
preambleBoolStructR [Unless]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected Decide
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :4_1:Decide:
preambleBoolStructR [When,If]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected Decide
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :4_1:Decide:
pTemporal/eventually> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=12:
pTemporal/eventually> unexpected Decide
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=12:
pTemporal/specifically> unexpected Decide
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :4_1:Decide:
pTemporal/vaguely> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=12:
pTemporal/vaguely> unexpected Decide
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Decide:
pActor [Every,Party,TokAll]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=12:
pActor [Every,Party,TokAll]> unexpected Decide
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDA                                                                                                     :4_1:Decide:
pDA> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=12:
pDA> unexpected Decide
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Given GoDeeper Other "an individual" Oth <…>
regulative permutation with deontic-action> MATCH (CERR): Given GoDeeper Other "an individual" Oth <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=12:
regulative permutation with deontic-action> unexpected Decide
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

permutationsReg> IN: Given GoDeeper Other "an individual" Oth <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=12:
permutationsReg> unexpected Decide
permutationsReg> expecting After, Before, By, Do, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRuleNormal> IN: Given GoDeeper Other "an individual" Oth <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=12:
pRegRuleNormal> unexpected Decide
pRegRuleNormal> expecting After, Before, By, Do, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRule> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRegRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRegRule> ERROR:
pRegRule> offset=12:
pRegRule> unexpected Decide
pRegRule> expecting After, Before, By, Do, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: UnDeeper Given GoDeeper Other "an indivi <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / pHornlike/uponLimb                                                                                            :2_1:Given:
***** / preambleParamText:[Upon]                                                                                    :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Given
$>|> expecting Upon

preambleParamText:[Upon]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Given
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Given GoDeeper Other "an individual" Oth <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Given
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:Given:
***** / preambleParamText:[Given]                                                                                   :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (COK): Given
$>|> VALUE: (Given,[])

****** \ $>| has returned Given                                                                                     :2_2:GoDeeper:
****** / |>| calling $>>                                                                                            :2_2:GoDeeper:
******* / |>>/recurse                                                                                              :2_2:GoDeeper:
******** / |>>/recurse                                                                                             :2_2:Other "an i:
|>>/recurse> IN: Other "an individual" Other "who" GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Other "an individual"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :2_2:Other "an i:
********* / pParamText                                                                                            :2_2:Other "an i:
********** / pParamText(flat) first line: pKeyValues                                                             :2_2:Other "an i:
*********** / pKeyValuesAka                                                                                     :2_2:Other "an i:
************ / slAKA                                                                                           :2_2:Other "an i:
************* / $*|                                                                                           :2_2:Other "an i:
************** / slAKA base                                                                                  :2_2:Other "an i:
*************** / slKeyValues                                                                               :2_2:Other "an i:
**************** / $*|                                                                                     :2_2:Other "an i:
***************** / someSL                                                                                :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

***************** \ someSL has returned (["an individual"],0)                                             :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

**************** \ $*| has returned (["an individual"],0)                                                  :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                            :3_2:Other "who":
******************* / slTypeSig                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Is or TypeSeparator

slTypeSig> IN: Other "who" GoDeeper Other "is affected  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected Other "who"
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
***************** > |>>/base got Nothing                                                                  :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :3_2:Other "who":
slKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
slKeyValues> MATCH (COK): Other "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                              :3_2:Other "who":
slAKA base> IN: Other "an individual" Other "who" GoDeep <…>
slAKA base> MATCH (COK): Other "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                                 :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

************* \ $*| has returned (("an individual" :| [],Nothing),0)                                          :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional akapart                                                                      :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :3_2:Other "who":
***************** / PAKA/akapart                                                                          :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
******************* / Aka Token                                                                         :3_2:Other "who":
Aka Token> IN: Other "who" GoDeeper Other "is affected  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected Other "who"
Aka Token> expecting Aka

$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Aka

PAKA/akapart> IN: Other "who" GoDeeper Other "is affected  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected Other "who"
PAKA/akapart> expecting Aka

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Aka

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional akapart> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                             :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional typically                                                                    :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :3_2:Other "who":
***************** / typically                                                                             :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Typically

typically> IN: Other "who" GoDeeper Other "is affected  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected Other "who"
typically> expecting Typically

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Typically

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional typically> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :3_2:Other "who":
************* > pAKA: entityalias = Nothing                                                                   :3_2:Other "who":
slAKA> IN: Other "an individual" Other "who" GoDeep <…>
slAKA> MATCH (COK): Other "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************ \ slAKA has returned (("an individual" :| [],Nothing),0)                                          :3_2:Other "who":
************ / undeepers                                                                                       :3_2:Other "who":
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                        :3_2:Other "who":
************* > sameLine: success!                                                                            :3_2:Other "who":
undeepers> IN: Other "who" GoDeeper Other "is affected  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                       :3_2:Other "who":
pKeyValuesAka> IN: Other "an individual" Other "who" GoDeep <…>
pKeyValuesAka> MATCH (COK): Other "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

*********** \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                        :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

********** \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)                :3_2:Other "who":
********** / pParamText(flat) subsequent lines: sameMany pKeyValues                                              :3_2:Other "who":
*********** / manyIndentation/leaf?                                                                             :3_2:Other "who":
************ / sameMany                                                                                        :3_2:Other "who":
************* / pKeyValuesAka                                                                                 :3_2:Other "who":
************** / slAKA                                                                                       :3_2:Other "who":
*************** / $*|                                                                                       :3_2:Other "who":
**************** / slAKA base                                                                              :3_2:Other "who":
***************** / slKeyValues                                                                           :3_2:Other "who":
****************** / $*|                                                                                 :3_2:Other "who":
******************* / someSL                                                                            :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

******************* \ someSL has returned (["who","is affected by an NDB"],1)                            :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

****************** \ $*| has returned (["who","is affected by an NDB"],1)                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / slTypeSig                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :4_2:UnDeeper:
slKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
slKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)              :4_2:UnDeeper:
slAKA base> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA base> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)                 :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

*************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                          :4_2:UnDeeper:
*************** / |>>/recurse                                                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :4_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :4_2:UnDeeper:
***************** / |?| optional something                                                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / PAKA/akapart                                                                       :4_2:UnDeeper:
******************** / $>|                                                                              :4_2:UnDeeper:
********************* / Aka Token                                                                      :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :4_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :4_2:UnDeeper:
*************** / |>>/recurse                                                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :4_2:UnDeeper:
**************** / slAKA optional typically                                                                 :4_2:UnDeeper:
***************** / |?| optional something                                                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / typically                                                                          :4_2:UnDeeper:
******************** / $>|                                                                              :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :4_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :4_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :4_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :4_2:UnDeeper:
slAKA> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                          :4_2:UnDeeper:
************** / undeepers                                                                                    :4_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                     :4_2:UnDeeper:
*************** > sameLine: success!                                                                           :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                      :4_3:UnDeeper:
pKeyValuesAka> IN: Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

************* \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                          :4_3:UnDeeper:
************* / pKeyValuesAka                                                                                    :4_3:UnDeeper:
************** / slAKA                                                                                          :4_3:UnDeeper:
*************** / $*|                                                                                          :4_3:UnDeeper:
**************** / slAKA base                                                                                 :4_3:UnDeeper:
***************** / slKeyValues                                                                              :4_3:UnDeeper:
****************** / $*|                                                                                    :4_3:UnDeeper:
******************* / someSL                                                                               :4_3:UnDeeper:
******************** / pNumAsText                                                                         :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slKeyValues> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting Other text or TNumber 1234

slAKA base> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected UnDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected UnDeeper
slAKA> expecting Other text or TNumber 1234

pKeyValuesAka> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting Other text or TNumber 1234

sameMany> IN: Other "who" GoDeeper Other "is affected  <…>
sameMany> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                               :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                    :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

********** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: Other "an individual" Other "who" GoDeep <…>
pParamText> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

********* \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
********* > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]           :4_3:UnDeeper:
|>>/base> IN: Other "an individual" Other "who" GoDeep <…>
|>>/base> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

******** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

****** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
****** / undeepers                                                                                                      :4_3:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :4_3:UnDeeper:
******* > sameLine: success!                                                                                      :4_1:Decide:
undeepers> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :4_1:Decide:
preambleParamText:[Given]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

***** \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
pHornlike/givenLimb> IN: Given GoDeeper Other "an individual" Oth <…>
pHornlike/givenLimb> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
pHornlike/givenLimb> VALUE: (Just (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

**** \ pHornlike/givenLimb has returned Just (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
**** / pHornlike/uponLimb                                                                                            :4_1:Decide:
***** / preambleParamText:[Upon]                                                                                    :4_1:Decide:
****** / $>|                                                                                                       :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=12:
pHornlike/uponLimb> unexpected Decide
pHornlike/uponLimb> expecting Upon

pTypeDefinition> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pTypeDefinition> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=12:
pTypeDefinition> unexpected Decide
pTypeDefinition> expecting Define or Upon

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: UnDeeper Given GoDeeper Other "an indivi <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / calling myindented pNameParens                                                                                :2_1:Given:
***** / manyIndentation/leaf?                                                                                       :2_1:Given:
****** / pMultiTermAka                                                                                             :2_1:Given:
******* / pAKA                                                                                                    :2_1:Given:
******** / slAKA                                                                                                 :2_1:Given:
********* / $*|                                                                                                 :2_1:Given:
********** / slAKA base                                                                                        :2_1:Given:
*********** / slMultiTerm                                                                                     :2_1:Given:
************ / someSL                                                                                        :2_1:Given:
************* / pNumAsText                                                                                  :2_1:Given:
pNumAsText> IN: Given GoDeeper Other "an individual" Oth <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Given
pNumAsText> expecting TNumber 1234

someSL> IN: Given GoDeeper Other "an individual" Oth <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Given
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Given GoDeeper Other "an individual" Oth <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Given
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Given GoDeeper Other "an individual" Oth <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Given
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Given GoDeeper Other "an individual" Oth <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Given
$*|> expecting Other text or TNumber 1234

slAKA> IN: Given GoDeeper Other "an individual" Oth <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Given
slAKA> expecting Other text or TNumber 1234

pAKA> IN: Given GoDeeper Other "an individual" Oth <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected Given
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: Given GoDeeper Other "an individual" Oth <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected Given
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Given GoDeeper Other "an individual" Oth <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Given
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Given:
****** / someIndentation                                                                                           :2_1:Given:
******* / myindented: consuming GoDeeper                                                                          :2_1:Given:
myindented: consuming GoDeeper> IN: Given GoDeeper Other "an individual" Oth <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Given
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Given GoDeeper Other "an individual" Oth <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Given
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Given GoDeeper Other "an individual" Oth <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Given
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Given GoDeeper Other "an individual" Oth <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected Given
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pConstitutiveRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected Given
pConstitutiveRule> expecting GoDeeper, Other text, or TNumber 1234

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: UnDeeper Given GoDeeper Other "an indivi <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / someIndentation                                                                                                :2_2:GoDeeper:
***** / myindented: consuming GoDeeper                                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an individual" Other "wh <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***** \ myindented: consuming GoDeeper has returned GoDeeper                                                          :2_2:Other "an i:
***** / manyIndentation/leaf?                                                                                         :2_2:Other "an i:
****** / pGivens                                                                                                     :2_2:Other "an i:
******* / sameDepth                                                                                                 :2_2:Other "an i:
******** / pRelPred                                                                                                :2_2:Other "an i:
********* / slRelPred                                                                                             :2_2:Other "an i:
********** / nested simpleHorn                                                                                   :2_2:Other "an i:
*********** > |^|                                                                                               :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: Other "an individual" Other "who" GoDeep <…>
slMultiTerm> MATCH (COK): Other "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |^| deeps                                                                                         :3_2:Other "who":
|^| deeps> IN: Other "who" GoDeeper Other "is affected  <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

*********** \ |^| deeps has returned ([],0)                                                                     :3_2:Other "who":
nested simpleHorn> IN: Other "an individual" Other "who" GoDeep <…>
nested simpleHorn> MATCH (CERR): Other "an individual"
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected Other "who"
nested simpleHorn> expecting GoDeeper, Means, or UnDeeper

********** / RPConstraint                                                                                        :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: Other "an individual" Other "who" GoDeep <…>
slMultiTerm> MATCH (COK): Other "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |>| calling $>>                                                                                   :3_2:Other "who":
************ / |>>/recurse                                                                                     :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: Other "who" GoDeeper Other "is affected  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected Other "who"
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an individual" Other "who" GoDeep <…>
RPConstraint> MATCH (CERR): Other "an individual"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected Other "who"
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                       :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: Other "an individual" Other "who" GoDeep <…>
slMultiTerm> MATCH (COK): Other "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |>| calling $>>                                                                                   :3_2:Other "who":
************ / |>>/recurse                                                                                     :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: Other "who" GoDeeper Other "is affected  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected Other "who"
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an individual" Other "who" GoDeep <…>
RPBoolStructR> MATCH (CERR): Other "an individual"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected Other "who"
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                                :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slAKA                                                                                           :2_2:Other "an i:
************* / $*|                                                                                           :2_2:Other "an i:
************** / slAKA base                                                                                  :2_2:Other "an i:
*************** / slMultiTerm                                                                               :2_2:Other "an i:
**************** / someSL                                                                                  :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

**************** \ someSL has returned (["an individual"],0)                                               :3_2:Other "who":
slMultiTerm> IN: Other "an individual" Other "who" GoDeep <…>
slMultiTerm> MATCH (COK): Other "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

*************** \ slMultiTerm has returned (["an individual"],0)                                            :3_2:Other "who":
slAKA base> IN: Other "an individual" Other "who" GoDeep <…>
slAKA base> MATCH (COK): Other "an individual"
slAKA base> VALUE: ((["an individual"],0),[])

************** \ slAKA base has returned (["an individual"],0)                                               :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

************* \ $*| has returned (["an individual"],0)                                                        :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional akapart                                                                      :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :3_2:Other "who":
***************** / PAKA/akapart                                                                          :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
******************* / Aka Token                                                                         :3_2:Other "who":
Aka Token> IN: Other "who" GoDeeper Other "is affected  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected Other "who"
Aka Token> expecting Aka

$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Aka

PAKA/akapart> IN: Other "who" GoDeeper Other "is affected  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected Other "who"
PAKA/akapart> expecting Aka

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Aka

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional akapart> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                             :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional typically                                                                    :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :3_2:Other "who":
***************** / typically                                                                             :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Typically

typically> IN: Other "who" GoDeeper Other "is affected  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected Other "who"
typically> expecting Typically

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Typically

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional typically> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :3_2:Other "who":
************* > pAKA: entityalias = Nothing                                                                   :3_2:Other "who":
slAKA> IN: Other "an individual" Other "who" GoDeep <…>
slAKA> MATCH (COK): Other "an individual"
slAKA> VALUE: ((["an individual"],0),[])

************ \ slAKA has returned (["an individual"],0)                                                        :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
RPMT> IN: Other "an individual" Other "who" GoDeep <…>
RPMT> MATCH (COK): Other "an individual"
RPMT> VALUE: ((RPMT ["an individual"],0),[])

********** \ RPMT has returned (RPMT ["an individual"],0)                                                        :3_2:Other "who":
slRelPred> IN: Other "an individual" Other "who" GoDeep <…>
slRelPred> MATCH (COK): Other "an individual"
slRelPred> VALUE: ((RPMT ["an individual"],0),[])

********* \ slRelPred has returned (RPMT ["an individual"],0)                                                     :3_2:Other "who":
********* / undeepers                                                                                             :3_2:Other "who":
********** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                              :3_2:Other "who":
********** > sameLine: success!                                                                                  :3_2:Other "who":
undeepers> IN: Other "who" GoDeeper Other "is affected  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :3_2:Other "who":
pRelPred> IN: Other "an individual" Other "who" GoDeep <…>
pRelPred> MATCH (COK): Other "an individual"
pRelPred> VALUE: (RPMT ["an individual"],[])

******** \ pRelPred has returned RPMT ["an individual"]                                                            :3_2:Other "who":
******** / pRelPred                                                                                                :3_2:Other "who":
********* / slRelPred                                                                                             :3_2:Other "who":
********** / nested simpleHorn                                                                                   :3_2:Other "who":
*********** > |^|                                                                                               :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |^| deeps                                                                                          :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

*********** \ |^| deeps has returned ([(),()],-2)                                                             :4_1:Decide:
nested simpleHorn> IN: Other "who" GoDeeper Other "is affected  <…>
nested simpleHorn> MATCH (CERR): Other "who" GoDeeper Other "is affected  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=12:
nested simpleHorn> unexpected Decide
nested simpleHorn> expecting Means or UnDeeper

********** / RPConstraint                                                                                        :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |>| calling $>>                                                                                    :4_2:UnDeeper:
************ / |>>/recurse                                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                         :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "who" GoDeeper Other "is affected  <…>
RPConstraint> MATCH (CERR): Other "who" GoDeeper Other "is affected  <…>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                       :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |>| calling $>>                                                                                    :4_2:UnDeeper:
************ / |>>/recurse                                                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                         :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "who" GoDeeper Other "is affected  <…>
RPBoolStructR> MATCH (CERR): Other "who" GoDeeper Other "is affected  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                                :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slAKA                                                                                           :3_2:Other "who":
************* / $*|                                                                                           :3_2:Other "who":
************** / slAKA base                                                                                  :3_2:Other "who":
*************** / slMultiTerm                                                                               :3_2:Other "who":
**************** / someSL                                                                                  :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

**************** \ someSL has returned (["who","is affected by an NDB"],1)                                  :4_2:UnDeeper:
slMultiTerm> IN: Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

*************** \ slMultiTerm has returned (["who","is affected by an NDB"],1)                               :4_2:UnDeeper:
slAKA base> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA base> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA base> VALUE: ((["who","is affected by an NDB"],1),[])

************** \ slAKA base has returned (["who","is affected by an NDB"],1)                                  :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ $*| has returned (["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
************* / |>>/recurse                                                                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :4_2:UnDeeper:
************** / slAKA optional akapart                                                                       :4_2:UnDeeper:
*************** / |?| optional something                                                                     :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / PAKA/akapart                                                                           :4_2:UnDeeper:
****************** / $>|                                                                                  :4_2:UnDeeper:
******************* / Aka Token                                                                          :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :4_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :4_2:UnDeeper:
************* / |>>/recurse                                                                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :4_2:UnDeeper:
************** / slAKA optional typically                                                                     :4_2:UnDeeper:
*************** / |?| optional something                                                                     :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / typically                                                                              :4_2:UnDeeper:
****************** / $>|                                                                                  :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :4_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :4_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :4_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :4_2:UnDeeper:
slAKA> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slAKA has returned (["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
RPMT> IN: Other "who" GoDeeper Other "is affected  <…>
RPMT> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
RPMT> VALUE: ((RPMT ["who","is affected by an NDB"],1),[])

********** \ RPMT has returned (RPMT ["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
slRelPred> IN: Other "who" GoDeeper Other "is affected  <…>
slRelPred> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slRelPred> VALUE: ((RPMT ["who","is affected by an NDB"],1),[])

********* \ slRelPred has returned (RPMT ["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
********* / undeepers                                                                                              :4_2:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                               :4_2:UnDeeper:
********** > sameLine: success!                                                                                     :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                                :4_3:UnDeeper:
pRelPred> IN: Other "who" GoDeeper Other "is affected  <…>
pRelPred> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pRelPred> VALUE: (RPMT ["who","is affected by an NDB"],[])

******** \ pRelPred has returned RPMT ["who","is affected by an NDB"]                                                 :4_3:UnDeeper:
******** / pRelPred                                                                                                   :4_3:UnDeeper:
********* / slRelPred                                                                                                :4_3:UnDeeper:
********** / nested simpleHorn                                                                                      :4_3:UnDeeper:
*********** > |^|                                                                                                  :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected UnDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected UnDeeper
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                           :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected UnDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                          :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected UnDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                                   :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slAKA                                                                                              :4_3:UnDeeper:
************* / $*|                                                                                              :4_3:UnDeeper:
************** / slAKA base                                                                                     :4_3:UnDeeper:
*************** / slMultiTerm                                                                                  :4_3:UnDeeper:
**************** / someSL                                                                                     :4_3:UnDeeper:
***************** / pNumAsText                                                                               :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected UnDeeper
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected UnDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected UnDeeper
slAKA> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

RPMT> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected UnDeeper
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected UnDeeper
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected UnDeeper
pRelPred> expecting Other text or TNumber 1234

sameDepth> IN: Other "an individual" Other "who" GoDeep <…>
sameDepth> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
sameDepth> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

******* \ sameDepth has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                         :4_3:UnDeeper:
pGivens> IN: Other "an individual" Other "who" GoDeep <…>
pGivens> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
pGivens> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

****** \ pGivens has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                             :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "an individual" Other "who" GoDeep <…>
manyIndentation/leaf?> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
manyIndentation/leaf?> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

***** \ manyIndentation/leaf? has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                 :4_3:UnDeeper:
***** / myindented: consuming UnDeeper                                                                                   :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***** \ myindented: consuming UnDeeper has returned UnDeeper                                                        :4_1:Decide:
someIndentation> IN: GoDeeper Other "an individual" Other "wh <…>
someIndentation> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
someIndentation> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

**** \ someIndentation has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                    :4_1:Decide:
**** / pExpect                                                                                                       :4_1:Decide:
pExpect> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=12:
pExpect> unexpected Decide
pExpect> expecting Expect

pScenarioRule> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pScenarioRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pScenarioRule> ERROR:
pScenarioRule> offset=12:
pScenarioRule> unexpected Decide
pScenarioRule> expecting Expect

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :1_2:Other "Unli:
********* > |>>/base got "Unlikely"                                                                                :2_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper Given GoDeeper <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******** \ |>>/base has returned ("Unlikely",0)                                                                     :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

******* \ |>>/recurse has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Unlikely" UnDeeper Given <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

****** \ |>| calling $>> has returned ("Unlikely",1)                                                                  :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Given GoDeeper Other "an indivi <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:Given:
undeepers> IN: UnDeeper Given GoDeeper Other "an indivi <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:Given:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

***** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                               :2_1:Given:
pSrcRef> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pSrcRef> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pSrcRef> VALUE: ((Just ("\167",2,"Unlikely"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Unlikely"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Given:
**** / pHornlike / permute                                                                                           :2_1:Given:
***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: Given GoDeeper Other "an individual" Oth <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Given
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: Given GoDeeper Other "an individual" Oth <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Given
Otherwise> expecting Otherwise

whenCase> IN: Given GoDeeper Other "an individual" Oth <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Given
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Given:
****** / preambleParamText:[Upon]                                                                                  :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Given
$>|> expecting Upon

preambleParamText:[Upon]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Given
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Given GoDeeper Other "an individual" Oth <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Given
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: Given GoDeeper Other "an individual" Oth <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Given
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: Given GoDeeper Other "an individual" Oth <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Given
Otherwise> expecting Otherwise

whenCase> IN: Given GoDeeper Other "an individual" Oth <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Given
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Given:
****** / preambleParamText:[Given]                                                                                 :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: Given GoDeeper Other "an individual" Oth <…>
$>|> MATCH (COK): Given
$>|> VALUE: (Given,[])

******* \ $>| has returned Given                                                                                   :2_2:GoDeeper:
******* / |>| calling $>>                                                                                          :2_2:GoDeeper:
******** / |>>/recurse                                                                                            :2_2:GoDeeper:
********* / |>>/recurse                                                                                           :2_2:Other "an i:
|>>/recurse> IN: Other "an individual" Other "who" GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Other "an individual"
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Other "an i:
********** / pParamText                                                                                          :2_2:Other "an i:
*********** / pParamText(flat) first line: pKeyValues                                                           :2_2:Other "an i:
************ / pKeyValuesAka                                                                                   :2_2:Other "an i:
************* / slAKA                                                                                         :2_2:Other "an i:
************** / $*|                                                                                         :2_2:Other "an i:
*************** / slAKA base                                                                                :2_2:Other "an i:
**************** / slKeyValues                                                                             :2_2:Other "an i:
***************** / $*|                                                                                   :2_2:Other "an i:
****************** / someSL                                                                              :2_2:Other "an i:
someSL> IN: Other "an individual" Other "who" GoDeep <…>
someSL> MATCH (COK): Other "an individual"
someSL> VALUE: ((["an individual"],0),[])

****************** \ someSL has returned (["an individual"],0)                                           :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((["an individual"],0),[])

***************** \ $*| has returned (["an individual"],0)                                                :3_2:Other "who":
***************** / |>>/recurse                                                                           :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :3_2:Other "who":
****************** / |?| optional something                                                              :3_2:Other "who":
******************* / |>>/recurse                                                                       :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :3_2:Other "who":
******************** / slTypeSig                                                                       :3_2:Other "who":
********************* / $>|                                                                           :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Is or TypeSeparator

slTypeSig> IN: Other "who" GoDeeper Other "is affected  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected Other "who"
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :3_2:Other "who":
****************** > |>>/base got Nothing                                                                :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :3_2:Other "who":
slKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
slKeyValues> MATCH (COK): Other "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

**************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                            :3_2:Other "who":
slAKA base> IN: Other "an individual" Other "who" GoDeep <…>
slAKA base> MATCH (COK): Other "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                               :3_2:Other "who":
$*|> IN: Other "an individual" Other "who" GoDeep <…>
$*|> MATCH (COK): Other "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ $*| has returned (("an individual" :| [],Nothing),0)                                        :3_2:Other "who":
************** / |>>/recurse                                                                                 :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :3_2:Other "who":
*************** / slAKA optional akapart                                                                    :3_2:Other "who":
**************** / |?| optional something                                                                  :3_2:Other "who":
***************** / |>>/recurse                                                                           :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :3_2:Other "who":
****************** / PAKA/akapart                                                                        :3_2:Other "who":
******************* / $>|                                                                               :3_2:Other "who":
******************** / Aka Token                                                                       :3_2:Other "who":
Aka Token> IN: Other "who" GoDeeper Other "is affected  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected Other "who"
Aka Token> expecting Aka

$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Aka

PAKA/akapart> IN: Other "who" GoDeeper Other "is affected  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected Other "who"
PAKA/akapart> expecting Aka

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Aka

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :3_2:Other "who":
slAKA optional akapart> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :3_2:Other "who":
*************** > |>>/base got Nothing                                                                      :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :3_2:Other "who":
************** / |>>/recurse                                                                                 :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :3_2:Other "who":
*************** / slAKA optional typically                                                                  :3_2:Other "who":
**************** / |?| optional something                                                                  :3_2:Other "who":
***************** / |>>/recurse                                                                           :3_2:Other "who":
|>>/recurse> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "who"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :3_2:Other "who":
****************** / typically                                                                           :3_2:Other "who":
******************* / $>|                                                                               :3_2:Other "who":
$>|> IN: Other "who" GoDeeper Other "is affected  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected Other "who"
$>|> expecting Typically

typically> IN: Other "who" GoDeeper Other "is affected  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected Other "who"
typically> expecting Typically

|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected Other "who"
|>>/base> expecting Typically

|?| optional something> IN: Other "who" GoDeeper Other "is affected  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :3_2:Other "who":
slAKA optional typically> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************** \ slAKA optional typically has returned (Nothing,0)                                         :3_2:Other "who":
*************** > |>>/base got Nothing                                                                      :3_2:Other "who":
|>>/base> IN: Other "who" GoDeeper Other "is affected  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :3_2:Other "who":
************** > slAKA: proceeding after base and entityalias are retrieved ...                              :3_2:Other "who":
************** > pAKA: entityalias = Nothing                                                                 :3_2:Other "who":
slAKA> IN: Other "an individual" Other "who" GoDeep <…>
slAKA> MATCH (COK): Other "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************* \ slAKA has returned (("an individual" :| [],Nothing),0)                                        :3_2:Other "who":
************* / undeepers                                                                                     :3_2:Other "who":
************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                      :3_2:Other "who":
************** > sameLine: success!                                                                          :3_2:Other "who":
undeepers> IN: Other "who" GoDeeper Other "is affected  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                     :3_2:Other "who":
pKeyValuesAka> IN: Other "an individual" Other "who" GoDeep <…>
pKeyValuesAka> MATCH (COK): Other "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

************ \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                      :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: Other "an individual" Other "who" GoDeep <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

*********** \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)              :3_2:Other "who":
*********** / pParamText(flat) subsequent lines: sameMany pKeyValues                                            :3_2:Other "who":
************ / manyIndentation/leaf?                                                                           :3_2:Other "who":
************* / sameMany                                                                                      :3_2:Other "who":
************** / pKeyValuesAka                                                                               :3_2:Other "who":
*************** / slAKA                                                                                     :3_2:Other "who":
**************** / $*|                                                                                     :3_2:Other "who":
***************** / slAKA base                                                                            :3_2:Other "who":
****************** / slKeyValues                                                                         :3_2:Other "who":
******************* / $*|                                                                               :3_2:Other "who":
******************** / someSL                                                                          :3_2:Other "who":
someSL> IN: Other "who" GoDeeper Other "is affected  <…>
someSL> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

******************** \ someSL has returned (["who","is affected by an NDB"],1)                          :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

******************* \ $*| has returned (["who","is affected by an NDB"],1)                               :4_2:UnDeeper:
******************* / |>>/recurse                                                                        :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                           :4_2:UnDeeper:
******************** / |?| optional something                                                           :4_2:UnDeeper:
********************* / |>>/recurse                                                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                       :4_2:UnDeeper:
********************** / slTypeSig                                                                    :4_2:UnDeeper:
*********************** / $>|                                                                        :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                  :4_2:UnDeeper:
******************** > |>>/base got Nothing                                                             :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                  :4_2:UnDeeper:
slKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
slKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

****************** \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)            :4_2:UnDeeper:
slAKA base> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA base> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)               :4_2:UnDeeper:
$*|> IN: Other "who" GoDeeper Other "is affected  <…>
$*|> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                        :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / slAKA optional akapart                                                                 :4_2:UnDeeper:
****************** / |?| optional something                                                               :4_2:UnDeeper:
******************* / |>>/recurse                                                                        :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                           :4_2:UnDeeper:
******************** / PAKA/akapart                                                                     :4_2:UnDeeper:
********************* / $>|                                                                            :4_2:UnDeeper:
********************** / Aka Token                                                                    :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                      :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************** \ slAKA optional akapart has returned (Nothing,0)                                        :4_2:UnDeeper:
***************** > |>>/base got Nothing                                                                   :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                        :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / slAKA optional typically                                                               :4_2:UnDeeper:
****************** / |?| optional something                                                               :4_2:UnDeeper:
******************* / |>>/recurse                                                                        :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                           :4_2:UnDeeper:
******************** / typically                                                                        :4_2:UnDeeper:
********************* / $>|                                                                            :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                      :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                      :4_2:UnDeeper:
***************** > |>>/base got Nothing                                                                   :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                        :4_2:UnDeeper:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                           :4_2:UnDeeper:
**************** > pAKA: entityalias = Nothing                                                              :4_2:UnDeeper:
slAKA> IN: Other "who" GoDeeper Other "is affected  <…>
slAKA> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

*************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                        :4_2:UnDeeper:
*************** / undeepers                                                                                  :4_2:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                   :4_2:UnDeeper:
**************** > sameLine: success!                                                                         :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Decide GoDeeper Other  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                    :4_3:UnDeeper:
pKeyValuesAka> IN: Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

************** \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                        :4_3:UnDeeper:
************** / pKeyValuesAka                                                                                  :4_3:UnDeeper:
*************** / slAKA                                                                                        :4_3:UnDeeper:
**************** / $*|                                                                                        :4_3:UnDeeper:
***************** / slAKA base                                                                               :4_3:UnDeeper:
****************** / slKeyValues                                                                            :4_3:UnDeeper:
******************* / $*|                                                                                  :4_3:UnDeeper:
******************** / someSL                                                                             :4_3:UnDeeper:
********************* / pNumAsText                                                                       :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected UnDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slKeyValues> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting Other text or TNumber 1234

slAKA base> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected UnDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected UnDeeper
slAKA> expecting Other text or TNumber 1234

pKeyValuesAka> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting Other text or TNumber 1234

sameMany> IN: Other "who" GoDeeper Other "is affected  <…>
sameMany> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************* \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                             :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                  :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): Other "who" GoDeeper Other "is affected  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: Other "an individual" Other "who" GoDeep <…>
pParamText> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

********** \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
********** > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]         :4_3:UnDeeper:
|>>/base> IN: Other "an individual" Other "who" GoDeep <…>
|>>/base> MATCH (COK): Other "an individual" Other "who" GoDeep <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

********* \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******** \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "an individual" Other "wh <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******* \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
******* / undeepers                                                                                                    :4_3:UnDeeper:
******** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :4_3:UnDeeper:
******** > sameLine: success!                                                                                    :4_1:Decide:
undeepers> IN: UnDeeper Decide GoDeeper Other "it is" G <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******* \ undeepers has returned ()                                                                               :4_1:Decide:
preambleParamText:[Given]> IN: Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

****** \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
pHornlike/givenLimb> IN: Given GoDeeper Other "an individual" Oth <…>
pHornlike/givenLimb> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
pHornlike/givenLimb> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

***** \ pHornlike/givenLimb has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
***** / whenCase                                                                                                    :4_1:Decide:
****** / whenMeansIf                                                                                               :4_1:Decide:
whenMeansIf> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=12:
whenMeansIf> unexpected Decide
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :4_1:Decide:
Otherwise> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=12:
Otherwise> unexpected Decide
Otherwise> expecting Otherwise

whenCase> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=12:
whenCase> unexpected Decide
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :4_1:Decide:
****** / $>|                                                                                                       :4_1:Decide:
$>|> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
$>|> MATCH (COK): Decide
$>|> VALUE: (Decide,[])

****** \ $>| has returned Decide                                                                                    :4_2:GoDeeper:
****** / |>>/recurse                                                                                                :4_2:GoDeeper:
******* / |>>/recurse                                                                                               :4_2:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "unlikely t <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :4_2:Other "it i:
******** / slMultiTerm                                                                                             :4_2:Other "it i:
********* / someSL                                                                                                :4_2:Other "it i:
********** / pNumAsText                                                                                              :4_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "it is" GoDeeper Other "unlikely t <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
someSL> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

********* \ someSL has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

******** \ slMultiTerm has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
******** > |>>/base got ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"] :4_4:GoDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "unlikely t <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
|>>/base> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

******* \ |>>/base has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
|>>/recurse> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
|>>/recurse> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "u <…>
|>>/recurse> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],2),[])

****** \ |>>/recurse has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],2) :4_4:GoDeeper:
****** / undeepers                                                                                                      :4_4:GoDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                       :4_4:GoDeeper:
undeepers> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=17:
undeepers> unexpected GoDeeper
undeepers> expecting UnDeeper

pHornlike/ambitious> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pHornlike/ambitious> MATCH (CERR): Decide GoDeeper Other "it is" GoDeeper O <…>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=17:
pHornlike/ambitious> unexpected GoDeeper
pHornlike/ambitious> expecting UnDeeper

***** / pHornlike/someStructure                                                                                     :4_1:Decide:
****** / manyIndentation/leaf?                                                                                      :4_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :4_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :4_2:GoDeeper:
********* / optIndentedTuple                                                                                     :4_2:GoDeeper:
********** / optIndented                                                                                        :4_2:GoDeeper:
*********** / pRelPred                                                                                         :4_2:GoDeeper:
************ / slRelPred                                                                                      :4_2:GoDeeper:
************* / nested simpleHorn                                                                            :4_2:GoDeeper:
************** > |^|                                                                                        :4_2:GoDeeper:
************** / $*|                                                                                        :4_2:GoDeeper:
*************** / slMultiTerm                                                                              :4_2:GoDeeper:
**************** / someSL                                                                                 :4_2:GoDeeper:
***************** / pNumAsText                                                                           :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                 :4_2:GoDeeper:
************** / $*|                                                                                        :4_2:GoDeeper:
*************** / slMultiTerm                                                                              :4_2:GoDeeper:
**************** / someSL                                                                                 :4_2:GoDeeper:
***************** / pNumAsText                                                                           :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                                :4_2:GoDeeper:
************** / $*|                                                                                        :4_2:GoDeeper:
*************** / slMultiTerm                                                                              :4_2:GoDeeper:
**************** / someSL                                                                                 :4_2:GoDeeper:
***************** / pNumAsText                                                                           :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                         :4_2:GoDeeper:
************** / $*|                                                                                        :4_2:GoDeeper:
*************** / slAKA                                                                                    :4_2:GoDeeper:
**************** / $*|                                                                                    :4_2:GoDeeper:
***************** / slAKA base                                                                           :4_2:GoDeeper:
****************** / slMultiTerm                                                                        :4_2:GoDeeper:
******************* / someSL                                                                           :4_2:GoDeeper:
******************** / pNumAsText                                                                     :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPMT> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected GoDeeper
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected GoDeeper
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected GoDeeper
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected GoDeeper
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                      :4_2:GoDeeper:
******** / $*|                                                                                                    :4_2:GoDeeper:
********* / slRelPred                                                                                            :4_2:GoDeeper:
********** / nested simpleHorn                                                                                  :4_2:GoDeeper:
*********** > |^|                                                                                              :4_2:GoDeeper:
*********** / $*|                                                                                              :4_2:GoDeeper:
************ / slMultiTerm                                                                                    :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                       :4_2:GoDeeper:
*********** / $*|                                                                                              :4_2:GoDeeper:
************ / slMultiTerm                                                                                    :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                      :4_2:GoDeeper:
*********** / $*|                                                                                              :4_2:GoDeeper:
************ / slMultiTerm                                                                                    :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                               :4_2:GoDeeper:
*********** / $*|                                                                                              :4_2:GoDeeper:
************ / slAKA                                                                                          :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / slAKA base                                                                                 :4_2:GoDeeper:
*************** / slMultiTerm                                                                              :4_2:GoDeeper:
**************** / someSL                                                                                 :4_2:GoDeeper:
***************** / pNumAsText                                                                           :4_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPMT> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected GoDeeper
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected GoDeeper
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                            :4_2:GoDeeper:
******* / someIndentation                                                                                          :4_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :4_2:Other "it i:
******** / manyIndentation/leaf?                                                                                   :4_2:Other "it i:
********* / relPredNextlineWhen                                                                                   :4_2:Other "it i:
********** / pRelPred optIndentedTuple whenCase                                                                  :4_2:Other "it i:
*********** / optIndentedTuple                                                                                  :4_2:Other "it i:
************ / optIndented                                                                                     :4_2:Other "it i:
************* / pRelPred                                                                                      :4_2:Other "it i:
************** / slRelPred                                                                                   :4_2:Other "it i:
*************** / nested simpleHorn                                                                         :4_2:Other "it i:
**************** > |^|                                                                                     :4_2:Other "it i:
**************** / $*|                                                                                     :4_2:Other "it i:
***************** / slMultiTerm                                                                           :4_2:Other "it i:
****************** / someSL                                                                              :4_2:Other "it i:
******************* / pNumAsText                                                                            :4_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "it is" GoDeeper Other "unlikely t <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
someSL> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

****************** \ someSL has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

***************** \ slMultiTerm has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
$*|> IN: Other "it is" GoDeeper Other "unlikely t <…>
$*|> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
$*|> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

**************** \ $*| has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
**************** / |^| deeps                                                                                  :4_4:GoDeeper:
|^| deeps> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

**************** \ |^| deeps has returned ([()],1)                                                             :4_4:Aka:
nested simpleHorn> IN: Other "it is" GoDeeper Other "unlikely t <…>
nested simpleHorn> MATCH (CERR): Other "it is" GoDeeper Other "unlikely t <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=18:
nested simpleHorn> unexpected Aka
nested simpleHorn> expecting GoDeeper or Means

*************** / RPConstraint                                                                              :4_2:Other "it i:
**************** / $*|                                                                                     :4_2:Other "it i:
***************** / slMultiTerm                                                                           :4_2:Other "it i:
****************** / someSL                                                                              :4_2:Other "it i:
******************* / pNumAsText                                                                            :4_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "it is" GoDeeper Other "unlikely t <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
someSL> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

****************** \ someSL has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

***************** \ slMultiTerm has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
$*|> IN: Other "it is" GoDeeper Other "unlikely t <…>
$*|> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
$*|> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

**************** \ $*| has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
**************** / |>| calling $>>                                                                            :4_4:GoDeeper:
***************** / |>>/recurse                                                                              :4_4:GoDeeper:
****************** / |>>/recurse                                                                             :4_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :4_4:Aka:
|>>/base> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected Aka
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************** / |>>/base                                                                                 :4_4:GoDeeper:
|>>/base> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected Aka
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "it is" GoDeeper Other "unlikely t <…>
RPConstraint> MATCH (CERR): Other "it is" GoDeeper Other "unlikely t <…>
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected Aka
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / RPBoolStructR                                                                             :4_2:Other "it i:
**************** / $*|                                                                                     :4_2:Other "it i:
***************** / slMultiTerm                                                                           :4_2:Other "it i:
****************** / someSL                                                                              :4_2:Other "it i:
******************* / pNumAsText                                                                            :4_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "it is" GoDeeper Other "unlikely t <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
someSL> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

****************** \ someSL has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

***************** \ slMultiTerm has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
$*|> IN: Other "it is" GoDeeper Other "unlikely t <…>
$*|> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
$*|> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

**************** \ $*| has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
**************** / |>| calling $>>                                                                            :4_4:GoDeeper:
***************** / |>>/recurse                                                                              :4_4:GoDeeper:
****************** / |>>/recurse                                                                             :4_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :4_4:Aka:
|>>/base> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected Aka
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************** / |>>/base                                                                                 :4_4:GoDeeper:
|>>/base> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected Aka
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "it is" GoDeeper Other "unlikely t <…>
RPBoolStructR> MATCH (CERR): Other "it is" GoDeeper Other "unlikely t <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected Aka
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / RPMT                                                                                      :4_2:Other "it i:
**************** / $*|                                                                                     :4_2:Other "it i:
***************** / slAKA                                                                                 :4_2:Other "it i:
****************** / $*|                                                                                 :4_2:Other "it i:
******************* / slAKA base                                                                        :4_2:Other "it i:
******************** / slMultiTerm                                                                     :4_2:Other "it i:
********************* / someSL                                                                        :4_2:Other "it i:
********************** / pNumAsText                                                                      :4_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "it is" GoDeeper Other "unlikely t <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
someSL> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

********************* \ someSL has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slMultiTerm> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

******************** \ slMultiTerm has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
slAKA base> IN: Other "it is" GoDeeper Other "unlikely t <…>
slAKA base> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slAKA base> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

******************* \ slAKA base has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
$*|> IN: Other "it is" GoDeeper Other "unlikely t <…>
$*|> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
$*|> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1),[])

****************** \ $*| has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],1) :4_4:GoDeeper:
****************** / |>>/recurse                                                                            :4_4:GoDeeper:
******************* / |>>/recurse                                                                           :4_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                              :4_4:Aka:
******************** / slAKA optional akapart                                                              :4_4:Aka:
********************* / |?| optional something                                                            :4_4:Aka:
********************** / |>>/recurse                                                                     :4_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                        :4_4:Aka:
*********************** / PAKA/akapart                                                                  :4_4:Aka:
************************ / $>|                                                                         :4_4:Aka:
************************* / Aka Token                                                                 :4_4:Aka:
Aka Token> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

************************* \ Aka Token has returned Aka                                                 :4_5:GoDeeper:
$>|> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

************************ \ $>| has returned Aka                                                         :4_5:GoDeeper:
************************ / |>>/recurse                                                                  :4_5:GoDeeper:
************************* / |>>/recurse                                                                 :4_5:Other "Unli:
|>>/recurse> IN: Other "Unlikely" UnDeeper UnDeeper UnDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=20:
|>>/recurse> unexpected Other "Unlikely"
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                                    :4_5:Other "Unli:
************************** / someSL                                                                    :4_5:Other "Unli:
someSL> IN: Other "Unlikely" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "Unlikely"
someSL> VALUE: ((["Unlikely"],0),[])

************************** \ someSL has returned (["Unlikely"],0)                                 :5_2:UnDeeper:
************************** > |>>/base got ["Unlikely"]                                            :5_2:UnDeeper:
|>>/base> IN: Other "Unlikely" UnDeeper UnDeeper UnDee <…>
|>>/base> MATCH (COK): Other "Unlikely"
|>>/base> VALUE: ((["Unlikely"],0),[])

************************* \ |>>/base has returned (["Unlikely"],0)                                 :5_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Unlikely" UnDeeper UnDee <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Unlikely"
|>>/recurse> VALUE: ((["Unlikely"],1),[])

************************ \ |>>/recurse has returned (["Unlikely"],1)                                :5_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "Unlikely"
PAKA/akapart> VALUE: ((["Unlikely"],1),[])

*********************** \ PAKA/akapart has returned (["Unlikely"],1)                                 :5_2:UnDeeper:
*********************** > |>>/base got ["Unlikely"]                                                  :5_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "Unlikely"
|>>/base> VALUE: ((["Unlikely"],1),[])

********************** \ |>>/base has returned (["Unlikely"],1)                                       :5_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "Unlikely"
|?| optional something> VALUE: ((Just ["Unlikely"],1),[])

********************* \ |?| optional something has returned (Just ["Unlikely"],1)                      :5_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "Unlikely"
slAKA optional akapart> VALUE: ((Just ["Unlikely"],1),[])

******************** \ slAKA optional akapart has returned (Just ["Unlikely"],1)                        :5_2:UnDeeper:
******************** > |>>/base got Just ["Unlikely"]                                                   :5_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "Unlikely" UnDeeper U <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "Unlikely"
|>>/base> VALUE: ((Just ["Unlikely"],1),[])

******************* \ |>>/base has returned (Just ["Unlikely"],1)                                        :5_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "Unlikely" U <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "Unlikely"
|>>/recurse> VALUE: ((Just ["Unlikely"],2),[])

****************** \ |>>/recurse has returned (Just ["Unlikely"],2)                                       :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / slAKA optional typically                                                           :5_2:UnDeeper:
******************** / |?| optional something                                                           :5_2:UnDeeper:
********************* / |>>/recurse                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                       :5_2:UnDeeper:
********************** / typically                                                                    :5_2:UnDeeper:
*********************** / $>|                                                                        :5_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                  :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************* \ slAKA optional typically has returned (Nothing,0)                                  :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
****************** > slAKA: proceeding after base and entityalias are retrieved ...                       :5_2:UnDeeper:
****************** > pAKA: entityalias = Just ["Unlikely"]                                                :5_2:UnDeeper:
slAKA> IN: Other "it is" GoDeeper Other "unlikely t <…>
slAKA> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slAKA> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

***************** \ slAKA has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3) :5_2:UnDeeper:
$*|> IN: Other "it is" GoDeeper Other "unlikely t <…>
$*|> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
$*|> VALUE: ((["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

**************** \ $*| has returned (["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3) :5_2:UnDeeper:
RPMT> IN: Other "it is" GoDeeper Other "unlikely t <…>
RPMT> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
RPMT> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

*************** \ RPMT has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3) :5_2:UnDeeper:
slRelPred> IN: Other "it is" GoDeeper Other "unlikely t <…>
slRelPred> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
slRelPred> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

************** \ slRelPred has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],3) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                               :5_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                          :5_5:UnDeeper:
pRelPred> IN: Other "it is" GoDeeper Other "unlikely t <…>
pRelPred> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
pRelPred> VALUE: (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

************* \ pRelPred has returned RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"] :5_5:UnDeeper:
************* / someIndentation                                                                                      :5_5:UnDeeper:
************** / myindented: consuming GoDeeper                                                                     :5_5:UnDeeper:
myindented: consuming GoDeeper> IN: UnDeeper If GoDeeper GoDeeper Other "the <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected UnDeeper
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: UnDeeper If GoDeeper GoDeeper Other "the <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected UnDeeper
someIndentation> expecting GoDeeper

optIndented> IN: Other "it is" GoDeeper Other "unlikely t <…>
optIndented> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
optIndented> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

************ \ optIndented has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_5:UnDeeper:
optIndentedTuple> IN: Other "it is" GoDeeper Other "unlikely t <…>
optIndentedTuple> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
optIndentedTuple> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

*********** \ optIndentedTuple has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_5:UnDeeper:
pRelPred optIndentedTuple whenCase> IN: Other "it is" GoDeeper Other "unlikely t <…>
pRelPred optIndentedTuple whenCase> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
pRelPred optIndentedTuple whenCase> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

********** \ pRelPred optIndentedTuple whenCase has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_5:UnDeeper:
relPredNextlineWhen> IN: Other "it is" GoDeeper Other "unlikely t <…>
relPredNextlineWhen> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
relPredNextlineWhen> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

********* \ relPredNextlineWhen has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_5:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "unlikely t <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "unlikely t <…>
manyIndentation/leaf?> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

******** \ manyIndentation/leaf? has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_5:UnDeeper:
******** / myindented: consuming UnDeeper                                                                                 :5_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper If GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :5_1:If:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "u <…>
someIndentation> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

******* \ someIndentation has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_1:If:
manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "u <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "u <…>
manyIndentation/deeper; calling someIndentation> VALUE: ((RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

****** \ manyIndentation/deeper; calling someIndentation has returned (RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],Nothing) :5_1:If:
pHornlike/someStructure> IN: Decide GoDeeper Other "it is" GoDeeper O <…>
pHornlike/someStructure> MATCH (COK): Decide GoDeeper Other "it is" GoDeeper O <…>
pHornlike/someStructure> VALUE: ((Just Decide,["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],[HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}]),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

***** \ pHornlike/someStructure has returned (Just Decide,["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],[HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}]) :5_1:If:
***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

pHornlike / permute> IN: Given GoDeeper Other "an individual" Oth <…>
pHornlike / permute> MATCH (COK): Given GoDeeper Other "an individual" Oth <…>
pHornlike / permute> VALUE: (((Just Decide,["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],[HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}]),Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),Nothing,Nothing),[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

**** \ pHornlike / permute has returned ((Just Decide,["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"],[HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}]),Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),Nothing,Nothing) :5_1:If:
pHornlike> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pHornlike> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pHornlike> VALUE: (Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing}), defaults = [], symtab = []},[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

*** \ pHornlike has returned Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing}), defaults = [], symtab = []} :5_1:If:
pRule> IN: RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRule> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Unli <…>
pRule> VALUE: (Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []},[DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}])

** \ pRule has returned Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Nothing}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []} :5_1:If:
** / pRule                                                                                                             :5_1:If:
*** / pRegRule                                                                                                        :5_1:If:
**** / pRuleLabel                                                                                                    :5_1:If:
***** / $>|                                                                                                         :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :5_1:If:
***** / someDeep                                                                                                    :5_1:If:
****** / someDeep first part calls base directly                                                                   :5_1:If:
someDeep first part calls base directly> IN: If GoDeeper GoDeeper Other "the organisa <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=25:
someDeep first part calls base directly> unexpected If
someDeep first part calls base directly> expecting Other text

someDeep> IN: If GoDeeper GoDeeper Other "the organisa <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=25:
someDeep> unexpected If
someDeep> expecting Other text

pRegRuleSugary> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=25:
pRegRuleSugary> unexpected If
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :5_1:If:
***** / permutationsReg                                                                                             :5_1:If:
****** / regulative permutation with deontic-temporal                                                              :5_1:If:
******* / WHERE                                                                                                   :5_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "the organisa <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=25:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=25:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=25:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=25:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :5_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=25:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :5_1:If:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / someSL                                                                                     :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :5_2:GoDeeper:
************* / someSL                                                                                       :5_2:GoDeeper:
************** / pNumAsText                                                                                 :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :5_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :5_3:GoDeeper:
**************** / expression                                                                               :5_3:GoDeeper:
***************** / labelPrefix                                                                            :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :5_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :5_3:GoDeeper:
******************* / $*|                                                                                :5_3:GoDeeper:
******************** / someSL                                                                           :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :5_3:GoDeeper:
******************* / someSL                                                                             :5_3:GoDeeper:
******************** / pNumAsText                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :5_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :5_3:GoDeeper:
******************** / someIndentation                                                                  :5_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :5_3:Other "the:
********************* / manyIndentation/leaf?                                                           :5_3:Other "the:
********************** / expression                                                                    :5_3:Other "the:
*********************** / labelPrefix                                                                 :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

*********************** \ labelPrefix has returned "the organisation has taken any action"             :5_4:GoDeeper:
*********************** / term p                                                                       :5_4:GoDeeper:
************************ / term p/1a:label directly above                                             :5_4:GoDeeper:
************************* / $*|                                                                      :5_4:GoDeeper:
************************** / someSL                                                                 :5_4:GoDeeper:
*************************** / pNumAsText                                                           :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :5_4:GoDeeper:
************************* / someSL                                                                   :5_4:GoDeeper:
************************** / pNumAsText                                                             :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :5_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :5_4:GoDeeper:
************************** / someIndentation                                                        :5_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :5_4:Other "to":
*************************** / manyIndentation/leaf?                                                 :5_4:Other "to":
**************************** / expression                                                          :5_4:Other "to":
***************************** / labelPrefix                                                       :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

***************************** \ labelPrefix has returned "to"                                      :5_5:GoDeeper:
***************************** / term p                                                             :5_5:GoDeeper:
****************************** / term p/1a:label directly above                                   :5_5:GoDeeper:
******************************* / $*|                                                            :5_5:GoDeeper:
******************************** / someSL                                                       :5_5:GoDeeper:
********************************* / pNumAsText                                                 :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL               :5_5:GoDeeper:
******************************* / someSL                                                         :5_5:GoDeeper:
******************************** / pNumAsText                                                   :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************************** / term p/notLabelTerm                                              :5_5:GoDeeper:
******************************* / term p/2:someIndentation expr p                                :5_5:GoDeeper:
******************************** / someIndentation                                              :5_5:GoDeeper:
********************************* / myindented: consuming GoDeeper                             :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************* \ myindented: consuming GoDeeper has returned GoDeeper        :5_5:Other "rend:
********************************* / manyIndentation/leaf?                                       :5_5:Other "rend:
********************************** / expression                                                :5_5:Other "rend:
*********************************** / labelPrefix                                             :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

*********************************** / term p                                                  :5_5:Other "rend:
************************************ / term p/1a:label directly above                        :5_5:Other "rend:
************************************* / $*|                                                 :5_5:Other "rend:
************************************** / someSL                                            :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************** / pNumAsText                                   :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************************ / term p/b:label to the left of line below, with EOL    :5_5:Other "rend:
************************************* / someSL                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
************************************* / matching EOL                                   :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************************ / term p/notLabelTerm                                   :5_5:Other "rend:
************************************* / term p/2:someIndentation expr p                     :5_5:Other "rend:
************************************** / someIndentation                                   :5_5:Other "rend:
*************************************** / myindented: consuming GoDeeper                  :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

************************************* / term p/3:plain p                                    :5_5:Other "rend:
************************************** / pRelPred                                          :5_5:Other "rend:
*************************************** / slRelPred                                       :5_5:Other "rend:
**************************************** / nested simpleHorn                             :5_5:Other "rend:
***************************************** > |^|                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |^| deeps                              :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

***************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

**************************************** / RPConstraint                                  :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPBoolStructR                                 :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPMT                                          :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA                                     :5_5:Other "rend:
******************************************* / $*|                                     :5_5:Other "rend:
******************************************** / slAKA base                            :5_5:Other "rend:
********************************************* / slMultiTerm                         :5_5:Other "rend:
********************************************** / someSL                            :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional akapart           :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / PAKA/akapart               :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
************************************************* / Aka Token              :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional typically         :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / typically                  :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / undeepers                                  :6_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
**************************************** > sameLine: success!                       :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************** \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
*********************************** / binary(Or)                                         :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************************** / binary(And)                                        :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************************** / binary(SetLess)                                    :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************************** / binary(SetPlus)                                    :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / myindented: consuming UnDeeper                         :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************* \ myindented: consuming UnDeeper has returned UnDeeper     :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
***************************** / binary(Or)                                                       :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                      :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                  :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                  :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

**************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*************************** \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
*************************** / myindented: consuming UnDeeper                                       :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
*********************** / binary(Or)                                                                     :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                    :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                                :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                                :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
********************* / myindented: consuming UnDeeper                                                     :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
***************** / binary(Or)                                                                                   :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                  :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                              :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                              :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
*********** / binary(Or)                                                                                      :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

*********** \ binary(Or) has returned Or                                                                       :6_2:GoDeeper:
*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :6_2:GoDeeper:
************* / someSL                                                                                       :6_2:GoDeeper:
************** / pNumAsText                                                                                 :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :6_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :6_3:GoDeeper:
**************** / expression                                                                               :6_3:GoDeeper:
***************** / labelPrefix                                                                            :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :6_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :6_3:GoDeeper:
******************* / $*|                                                                                :6_3:GoDeeper:
******************** / someSL                                                                           :6_3:GoDeeper:
********************* / pNumAsText                                                                     :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :6_3:GoDeeper:
******************* / someSL                                                                             :6_3:GoDeeper:
******************** / pNumAsText                                                                       :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :6_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :6_3:GoDeeper:
******************** / someIndentation                                                                  :6_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :6_3:Other "the:
********************* / manyIndentation/leaf?                                                           :6_3:Other "the:
********************** / expression                                                                    :6_3:Other "the:
*********************** / labelPrefix                                                                 :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

*********************** \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
*********************** / term p                                                                       :6_4:GoDeeper:
************************ / term p/1a:label directly above                                             :6_4:GoDeeper:
************************* / $*|                                                                      :6_4:GoDeeper:
************************** / someSL                                                                 :6_4:GoDeeper:
*************************** / pNumAsText                                                           :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :6_4:GoDeeper:
************************* / someSL                                                                   :6_4:GoDeeper:
************************** / pNumAsText                                                             :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :6_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :6_4:GoDeeper:
************************** / someIndentation                                                        :6_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :6_4:Other "to":
*************************** / manyIndentation/leaf?                                                 :6_4:Other "to":
**************************** / expression                                                          :6_4:Other "to":
***************************** / labelPrefix                                                       :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

***************************** \ labelPrefix has returned "to"                                      :6_5:GoDeeper:
***************************** / term p                                                             :6_5:GoDeeper:
****************************** / term p/1a:label directly above                                   :6_5:GoDeeper:
******************************* / $*|                                                            :6_5:GoDeeper:
******************************** / someSL                                                       :6_5:GoDeeper:
********************************* / pNumAsText                                                 :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL               :6_5:GoDeeper:
******************************* / someSL                                                         :6_5:GoDeeper:
******************************** / pNumAsText                                                   :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************************** / term p/notLabelTerm                                              :6_5:GoDeeper:
******************************* / term p/2:someIndentation expr p                                :6_5:GoDeeper:
******************************** / someIndentation                                              :6_5:GoDeeper:
********************************* / myindented: consuming GoDeeper                             :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************* \ myindented: consuming GoDeeper has returned GoDeeper        :6_5:Other "rend:
********************************* / manyIndentation/leaf?                                       :6_5:Other "rend:
********************************** / expression                                                :6_5:Other "rend:
*********************************** / labelPrefix                                             :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

*********************************** / term p                                                  :6_5:Other "rend:
************************************ / term p/1a:label directly above                        :6_5:Other "rend:
************************************* / $*|                                                 :6_5:Other "rend:
************************************** / someSL                                            :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************** / pNumAsText                                   :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************************ / term p/b:label to the left of line below, with EOL    :6_5:Other "rend:
************************************* / someSL                                              :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
************************************* / matching EOL                                   :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************************ / term p/notLabelTerm                                   :6_5:Other "rend:
************************************* / term p/2:someIndentation expr p                     :6_5:Other "rend:
************************************** / someIndentation                                   :6_5:Other "rend:
*************************************** / myindented: consuming GoDeeper                  :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

************************************* / term p/3:plain p                                    :6_5:Other "rend:
************************************** / pRelPred                                          :6_5:Other "rend:
*************************************** / slRelPred                                       :6_5:Other "rend:
**************************************** / nested simpleHorn                             :6_5:Other "rend:
***************************************** > |^|                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |^| deeps                              :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

***************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

**************************************** / RPConstraint                                  :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>| calling $>>                        :1_2:UnDeeper:
****************************************** / |>>/recurse                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPBoolStructR                                 :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>| calling $>>                        :1_2:UnDeeper:
****************************************** / |>>/recurse                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPMT                                          :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA                                     :6_5:Other "rend:
******************************************* / $*|                                     :6_5:Other "rend:
******************************************** / slAKA base                            :6_5:Other "rend:
********************************************* / slMultiTerm                         :6_5:Other "rend:
********************************************** / someSL                            :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional akapart           :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>/recurse                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :1_2:UnDeeper:
*********************************************** / PAKA/akapart               :1_2:UnDeeper:
************************************************ / $>|                      :1_2:UnDeeper:
************************************************* / Aka Token              :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
******************************************** > |>>/base got Nothing             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional typically         :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>/recurse                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :1_2:UnDeeper:
*********************************************** / typically                  :1_2:UnDeeper:
************************************************ / $>|                      :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
******************************************** > |>>/base got Nothing             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / undeepers                                  :1_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
**************************************** > sameLine: success!                       :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************** \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
*********************************** / binary(Or)                                         :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************************** / binary(And)                                        :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************************** / binary(SetLess)                                    :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************************** / binary(SetPlus)                                    :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / myindented: consuming UnDeeper                         :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************* \ myindented: consuming UnDeeper has returned UnDeeper     :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
***************************** / binary(Or)                                                       :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                      :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                  :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                  :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

**************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*************************** \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
*************************** / myindented: consuming UnDeeper                                       :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
*********************** / binary(Or)                                                                     :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                    :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                                :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                                :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
********************* / myindented: consuming UnDeeper                                                     :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
***************** / binary(Or)                                                                                   :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                  :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                              :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                              :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
*********** / binary(Or)                                                                                    :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

*********** / binary(And)                                                                                   :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

*********** / binary(SetLess)                                                                               :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                               :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

********** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

********* / withPrePost                                                                                          :5_2:GoDeeper:
********** > |<* starting                                                                                       :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / pre part                                                                                         :5_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :5_3:GoDeeper:
************* / expectUnDeepers                                                                                :5_3:GoDeeper:
************** / pNumAsText                                                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :5_3:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                :5_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :5_3:GoDeeper:
************* / $*|                                                                                            :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :5_3:GoDeeper:
************* > ->| success                                                                                     :5_3:Other "the:
************* / |>>/recurse                                                                                     :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :5_3:Other "the:
************** / slMultiTerm                                                                                   :5_3:Other "the:
*************** / someSL                                                                                      :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*************** \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************** \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************** > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************* > aNLK: current depth is 3                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :5_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :5_3:Other "the:
************* / expectUnDeepers                                                                                 :5_3:Other "the:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                  :5_3:Other "the:
************* > aNLK: determined undp_count = 4                                                                 :5_3:Other "the:
************* > ->| trying to consume 1 GoDeepers                                                               :5_3:Other "the:
************* / $*|                                                                                             :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :5_3:Other "the:
************ / aboveNextLineKeyword                                                                               :5_4:GoDeeper:
************* / expectUnDeepers                                                                                  :5_4:GoDeeper:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                   :5_4:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                  :5_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :5_4:GoDeeper:
************* / $*|                                                                                              :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :5_4:GoDeeper:
************* > ->| success                                                                                       :5_4:Other "to":
************* / |>>/recurse                                                                                       :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :5_4:Other "to":
************** / slMultiTerm                                                                                     :5_4:Other "to":
*************** / someSL                                                                                        :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*************** \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************** \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************** > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :5_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :5_4:Other "to":
************* / expectUnDeepers                                                                                   :5_4:Other "to":
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                    :5_4:Other "to":
************* > aNLK: determined undp_count = 4                                                                   :5_4:Other "to":
************* > ->| trying to consume 1 GoDeepers                                                                 :5_4:Other "to":
************* / $*|                                                                                               :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :5_4:Other "to":
************ / aboveNextLineKeyword                                                                                 :5_5:GoDeeper:
************* / expectUnDeepers                                                                                    :5_5:GoDeeper:
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                     :5_5:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                    :5_5:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                  :5_5:GoDeeper:
************* / $*|                                                                                                :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                            :5_5:GoDeeper:
************* > ->| success                                                                                         :5_5:Other "rend:
************* / |>>/recurse                                                                                         :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                            :5_5:Other "rend:
************** / slMultiTerm                                                                                       :5_5:Other "rend:
*************** / someSL                                                                                          :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************** > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                        :5_5:GoDeeper:
************ / aboveNextLineKeyword                                                                                  :5_5:Other "rend:
************* / expectUnDeepers                                                                                     :5_5:Other "rend:
************** > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                      :5_5:Other "rend:
************* > aNLK: determined undp_count = 4                                                                     :5_5:Other "rend:
************* > ->| trying to consume 1 GoDeepers                                                                   :5_5:Other "rend:
************* / $*|                                                                                                 :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                             :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                         :5_5:Other "rend:
************ / aboveNextLineKeyword                                                                             :6_2:UnDeeper:
************* / expectUnDeepers                                                                                :6_2:UnDeeper:
************** > ignoring []                                                                                  :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :6_2:UnDeeper:
************* > aNLK: determined undp_count = 4                                                                :6_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :6_2:UnDeeper:
************* / $*|                                                                                            :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / pre part                                                                                         :5_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :5_3:GoDeeper:
************* / expectUnDeepers                                                                                :5_3:GoDeeper:
************** / pNumAsText                                                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :5_3:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                :5_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :5_3:GoDeeper:
************* / $*|                                                                                            :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :5_3:GoDeeper:
************* > ->| success                                                                                     :5_3:Other "the:
************* / |>>/recurse                                                                                     :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :5_3:Other "the:
************** / slMultiTerm                                                                                   :5_3:Other "the:
*************** / someSL                                                                                      :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*************** \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************** \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************** > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************* > aNLK: current depth is 3                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :5_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :5_3:Other "the:
************* / expectUnDeepers                                                                                 :5_3:Other "the:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                  :5_3:Other "the:
************* > aNLK: determined undp_count = 4                                                                 :5_3:Other "the:
************* > ->| trying to consume 1 GoDeepers                                                               :5_3:Other "the:
************* / $*|                                                                                             :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :5_3:Other "the:
************ / aboveNextLineKeyword                                                                               :5_4:GoDeeper:
************* / expectUnDeepers                                                                                  :5_4:GoDeeper:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                   :5_4:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                  :5_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :5_4:GoDeeper:
************* / $*|                                                                                              :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :5_4:GoDeeper:
************* > ->| success                                                                                       :5_4:Other "to":
************* / |>>/recurse                                                                                       :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :5_4:Other "to":
************** / slMultiTerm                                                                                     :5_4:Other "to":
*************** / someSL                                                                                        :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*************** \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************** \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************** > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :5_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :5_4:Other "to":
************* / expectUnDeepers                                                                                   :5_4:Other "to":
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                    :5_4:Other "to":
************* > aNLK: determined undp_count = 4                                                                   :5_4:Other "to":
************* > ->| trying to consume 1 GoDeepers                                                                 :5_4:Other "to":
************* / $*|                                                                                               :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :5_4:Other "to":
************ / aboveNextLineKeyword                                                                                 :5_5:GoDeeper:
************* / expectUnDeepers                                                                                    :5_5:GoDeeper:
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                     :5_5:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                    :5_5:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                  :5_5:GoDeeper:
************* / $*|                                                                                                :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                            :5_5:GoDeeper:
************* > ->| success                                                                                         :5_5:Other "rend:
************* / |>>/recurse                                                                                         :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                            :5_5:Other "rend:
************** / slMultiTerm                                                                                       :5_5:Other "rend:
*************** / someSL                                                                                          :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************** > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                        :5_5:GoDeeper:
************ / aboveNextLineKeyword                                                                                  :5_5:Other "rend:
************* / expectUnDeepers                                                                                     :5_5:Other "rend:
************** > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                      :5_5:Other "rend:
************* > aNLK: determined undp_count = 4                                                                     :5_5:Other "rend:
************* > ->| trying to consume 1 GoDeepers                                                                   :5_5:Other "rend:
************* / $*|                                                                                                 :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                             :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                         :5_5:Other "rend:
************ / aboveNextLineKeyword                                                                             :6_2:UnDeeper:
************* / expectUnDeepers                                                                                :6_2:UnDeeper:
************** > ignoring []                                                                                  :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :6_2:UnDeeper:
************* > aNLK: determined undp_count = 4                                                                :6_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :6_2:UnDeeper:
************* / $*|                                                                                            :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=49:
preambleBoolStructR [When,If]> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

regulative permutation with deontic-temporal> IN: If GoDeeper GoDeeper Other "the organisa <…>
regulative permutation with deontic-temporal> MATCH (CERR): If GoDeeper
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=49:
regulative permutation with deontic-temporal> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / regulative permutation with deontic-action                                                                :5_1:If:
******* / WHERE                                                                                                   :5_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "the organisa <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=25:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=25:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=25:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:If:
******** / $>|                                                                                                   :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=25:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :5_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=25:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :5_1:If:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / someSL                                                                                     :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :5_2:GoDeeper:
************* / someSL                                                                                       :5_2:GoDeeper:
************** / pNumAsText                                                                                 :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :5_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :5_3:GoDeeper:
**************** / expression                                                                               :5_3:GoDeeper:
***************** / labelPrefix                                                                            :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :5_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :5_3:GoDeeper:
******************* / $*|                                                                                :5_3:GoDeeper:
******************** / someSL                                                                           :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :5_3:GoDeeper:
******************* / someSL                                                                             :5_3:GoDeeper:
******************** / pNumAsText                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :5_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :5_3:GoDeeper:
******************** / someIndentation                                                                  :5_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :5_3:Other "the:
********************* / manyIndentation/leaf?                                                           :5_3:Other "the:
********************** / expression                                                                    :5_3:Other "the:
*********************** / labelPrefix                                                                 :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

*********************** \ labelPrefix has returned "the organisation has taken any action"             :5_4:GoDeeper:
*********************** / term p                                                                       :5_4:GoDeeper:
************************ / term p/1a:label directly above                                             :5_4:GoDeeper:
************************* / $*|                                                                      :5_4:GoDeeper:
************************** / someSL                                                                 :5_4:GoDeeper:
*************************** / pNumAsText                                                           :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :5_4:GoDeeper:
************************* / someSL                                                                   :5_4:GoDeeper:
************************** / pNumAsText                                                             :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :5_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :5_4:GoDeeper:
************************** / someIndentation                                                        :5_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :5_4:Other "to":
*************************** / manyIndentation/leaf?                                                 :5_4:Other "to":
**************************** / expression                                                          :5_4:Other "to":
***************************** / labelPrefix                                                       :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

***************************** \ labelPrefix has returned "to"                                      :5_5:GoDeeper:
***************************** / term p                                                             :5_5:GoDeeper:
****************************** / term p/1a:label directly above                                   :5_5:GoDeeper:
******************************* / $*|                                                            :5_5:GoDeeper:
******************************** / someSL                                                       :5_5:GoDeeper:
********************************* / pNumAsText                                                 :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL               :5_5:GoDeeper:
******************************* / someSL                                                         :5_5:GoDeeper:
******************************** / pNumAsText                                                   :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************************** / term p/notLabelTerm                                              :5_5:GoDeeper:
******************************* / term p/2:someIndentation expr p                                :5_5:GoDeeper:
******************************** / someIndentation                                              :5_5:GoDeeper:
********************************* / myindented: consuming GoDeeper                             :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************* \ myindented: consuming GoDeeper has returned GoDeeper        :5_5:Other "rend:
********************************* / manyIndentation/leaf?                                       :5_5:Other "rend:
********************************** / expression                                                :5_5:Other "rend:
*********************************** / labelPrefix                                             :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

*********************************** / term p                                                  :5_5:Other "rend:
************************************ / term p/1a:label directly above                        :5_5:Other "rend:
************************************* / $*|                                                 :5_5:Other "rend:
************************************** / someSL                                            :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************** / pNumAsText                                   :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************************ / term p/b:label to the left of line below, with EOL    :5_5:Other "rend:
************************************* / someSL                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
************************************* / matching EOL                                   :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************************ / term p/notLabelTerm                                   :5_5:Other "rend:
************************************* / term p/2:someIndentation expr p                     :5_5:Other "rend:
************************************** / someIndentation                                   :5_5:Other "rend:
*************************************** / myindented: consuming GoDeeper                  :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

************************************* / term p/3:plain p                                    :5_5:Other "rend:
************************************** / pRelPred                                          :5_5:Other "rend:
*************************************** / slRelPred                                       :5_5:Other "rend:
**************************************** / nested simpleHorn                             :5_5:Other "rend:
***************************************** > |^|                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |^| deeps                              :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

***************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

**************************************** / RPConstraint                                  :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPBoolStructR                                 :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slMultiTerm                               :5_5:Other "rend:
******************************************* / someSL                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPMT                                          :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA                                     :5_5:Other "rend:
******************************************* / $*|                                     :5_5:Other "rend:
******************************************** / slAKA base                            :5_5:Other "rend:
********************************************* / slMultiTerm                         :5_5:Other "rend:
********************************************** / someSL                            :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional akapart           :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / PAKA/akapart               :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
************************************************* / Aka Token              :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional typically         :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / typically                  :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / undeepers                                  :6_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
**************************************** > sameLine: success!                       :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************** \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
*********************************** / binary(Or)                                         :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************************** / binary(And)                                        :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************************** / binary(SetLess)                                    :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************************** / binary(SetPlus)                                    :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / myindented: consuming UnDeeper                         :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************* \ myindented: consuming UnDeeper has returned UnDeeper     :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
***************************** / binary(Or)                                                       :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                      :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                  :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                  :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

**************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*************************** \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
*************************** / myindented: consuming UnDeeper                                       :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
*********************** / binary(Or)                                                                     :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                    :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                                :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                                :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
********************* / myindented: consuming UnDeeper                                                     :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
***************** / binary(Or)                                                                                   :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                  :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                              :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                              :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
*********** / binary(Or)                                                                                      :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

*********** \ binary(Or) has returned Or                                                                       :6_2:GoDeeper:
*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :6_2:GoDeeper:
************* / someSL                                                                                       :6_2:GoDeeper:
************** / pNumAsText                                                                                 :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :6_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :6_3:GoDeeper:
**************** / expression                                                                               :6_3:GoDeeper:
***************** / labelPrefix                                                                            :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :6_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :6_3:GoDeeper:
******************* / $*|                                                                                :6_3:GoDeeper:
******************** / someSL                                                                           :6_3:GoDeeper:
********************* / pNumAsText                                                                     :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :6_3:GoDeeper:
******************* / someSL                                                                             :6_3:GoDeeper:
******************** / pNumAsText                                                                       :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :6_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :6_3:GoDeeper:
******************** / someIndentation                                                                  :6_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :6_3:Other "the:
********************* / manyIndentation/leaf?                                                           :6_3:Other "the:
********************** / expression                                                                    :6_3:Other "the:
*********************** / labelPrefix                                                                 :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

*********************** \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
*********************** / term p                                                                       :6_4:GoDeeper:
************************ / term p/1a:label directly above                                             :6_4:GoDeeper:
************************* / $*|                                                                      :6_4:GoDeeper:
************************** / someSL                                                                 :6_4:GoDeeper:
*************************** / pNumAsText                                                           :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :6_4:GoDeeper:
************************* / someSL                                                                   :6_4:GoDeeper:
************************** / pNumAsText                                                             :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :6_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :6_4:GoDeeper:
************************** / someIndentation                                                        :6_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :6_4:Other "to":
*************************** / manyIndentation/leaf?                                                 :6_4:Other "to":
**************************** / expression                                                          :6_4:Other "to":
***************************** / labelPrefix                                                       :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

***************************** \ labelPrefix has returned "to"                                      :6_5:GoDeeper:
***************************** / term p                                                             :6_5:GoDeeper:
****************************** / term p/1a:label directly above                                   :6_5:GoDeeper:
******************************* / $*|                                                            :6_5:GoDeeper:
******************************** / someSL                                                       :6_5:GoDeeper:
********************************* / pNumAsText                                                 :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL               :6_5:GoDeeper:
******************************* / someSL                                                         :6_5:GoDeeper:
******************************** / pNumAsText                                                   :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************************** / term p/notLabelTerm                                              :6_5:GoDeeper:
******************************* / term p/2:someIndentation expr p                                :6_5:GoDeeper:
******************************** / someIndentation                                              :6_5:GoDeeper:
********************************* / myindented: consuming GoDeeper                             :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************* \ myindented: consuming GoDeeper has returned GoDeeper        :6_5:Other "rend:
********************************* / manyIndentation/leaf?                                       :6_5:Other "rend:
********************************** / expression                                                :6_5:Other "rend:
*********************************** / labelPrefix                                             :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

*********************************** / term p                                                  :6_5:Other "rend:
************************************ / term p/1a:label directly above                        :6_5:Other "rend:
************************************* / $*|                                                 :6_5:Other "rend:
************************************** / someSL                                            :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************** / pNumAsText                                   :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************************ / term p/b:label to the left of line below, with EOL    :6_5:Other "rend:
************************************* / someSL                                              :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
************************************* / matching EOL                                   :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************************ / term p/notLabelTerm                                   :6_5:Other "rend:
************************************* / term p/2:someIndentation expr p                     :6_5:Other "rend:
************************************** / someIndentation                                   :6_5:Other "rend:
*************************************** / myindented: consuming GoDeeper                  :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

************************************* / term p/3:plain p                                    :6_5:Other "rend:
************************************** / pRelPred                                          :6_5:Other "rend:
*************************************** / slRelPred                                       :6_5:Other "rend:
**************************************** / nested simpleHorn                             :6_5:Other "rend:
***************************************** > |^|                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |^| deeps                              :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

***************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

**************************************** / RPConstraint                                  :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>| calling $>>                        :1_2:UnDeeper:
****************************************** / |>>/recurse                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPBoolStructR                                 :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slMultiTerm                               :6_5:Other "rend:
******************************************* / someSL                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>| calling $>>                        :1_2:UnDeeper:
****************************************** / |>>/recurse                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************************** / RPMT                                          :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA                                     :6_5:Other "rend:
******************************************* / $*|                                     :6_5:Other "rend:
******************************************** / slAKA base                            :6_5:Other "rend:
********************************************* / slMultiTerm                         :6_5:Other "rend:
********************************************** / someSL                            :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

********************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional akapart           :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>/recurse                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :1_2:UnDeeper:
*********************************************** / PAKA/akapart               :1_2:UnDeeper:
************************************************ / $>|                      :1_2:UnDeeper:
************************************************* / Aka Token              :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
******************************************** > |>>/base got Nothing             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional typically         :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>/recurse                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************************** / |>>/base                     :1_2:UnDeeper:
*********************************************** / typically                  :1_2:UnDeeper:
************************************************ / $>|                      :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
******************************************** > |>>/base got Nothing             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / undeepers                                  :1_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
**************************************** > sameLine: success!                       :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************** \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
*********************************** / binary(Or)                                         :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************************** / binary(And)                                        :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************************** / binary(SetLess)                                    :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************************** / binary(SetPlus)                                    :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / myindented: consuming UnDeeper                         :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************* \ myindented: consuming UnDeeper has returned UnDeeper     :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
***************************** / binary(Or)                                                       :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                      :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                  :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                  :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

**************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*************************** \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
*************************** / myindented: consuming UnDeeper                                       :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
*********************** / binary(Or)                                                                     :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                    :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                                :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                                :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
********************* / myindented: consuming UnDeeper                                                     :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
***************** / binary(Or)                                                                                   :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                  :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                              :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                              :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
*********** / binary(Or)                                                                                    :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

*********** / binary(And)                                                                                   :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

*********** / binary(SetLess)                                                                               :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                               :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

********** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

********* / withPrePost                                                                                          :5_2:GoDeeper:
********** > |<* starting                                                                                       :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / pre part                                                                                         :5_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :5_3:GoDeeper:
************* / expectUnDeepers                                                                                :5_3:GoDeeper:
************** / pNumAsText                                                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :5_3:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                :5_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :5_3:GoDeeper:
************* / $*|                                                                                            :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :5_3:GoDeeper:
************* > ->| success                                                                                     :5_3:Other "the:
************* / |>>/recurse                                                                                     :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :5_3:Other "the:
************** / slMultiTerm                                                                                   :5_3:Other "the:
*************** / someSL                                                                                      :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*************** \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************** \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************** > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************* > aNLK: current depth is 3                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :5_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :5_3:Other "the:
************* / expectUnDeepers                                                                                 :5_3:Other "the:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                  :5_3:Other "the:
************* > aNLK: determined undp_count = 4                                                                 :5_3:Other "the:
************* > ->| trying to consume 1 GoDeepers                                                               :5_3:Other "the:
************* / $*|                                                                                             :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :5_3:Other "the:
************ / aboveNextLineKeyword                                                                               :5_4:GoDeeper:
************* / expectUnDeepers                                                                                  :5_4:GoDeeper:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                   :5_4:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                  :5_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :5_4:GoDeeper:
************* / $*|                                                                                              :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :5_4:GoDeeper:
************* > ->| success                                                                                       :5_4:Other "to":
************* / |>>/recurse                                                                                       :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :5_4:Other "to":
************** / slMultiTerm                                                                                     :5_4:Other "to":
*************** / someSL                                                                                        :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*************** \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************** \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************** > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :5_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :5_4:Other "to":
************* / expectUnDeepers                                                                                   :5_4:Other "to":
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                    :5_4:Other "to":
************* > aNLK: determined undp_count = 4                                                                   :5_4:Other "to":
************* > ->| trying to consume 1 GoDeepers                                                                 :5_4:Other "to":
************* / $*|                                                                                               :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :5_4:Other "to":
************ / aboveNextLineKeyword                                                                                 :5_5:GoDeeper:
************* / expectUnDeepers                                                                                    :5_5:GoDeeper:
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                     :5_5:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                    :5_5:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                  :5_5:GoDeeper:
************* / $*|                                                                                                :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                            :5_5:GoDeeper:
************* > ->| success                                                                                         :5_5:Other "rend:
************* / |>>/recurse                                                                                         :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                            :5_5:Other "rend:
************** / slMultiTerm                                                                                       :5_5:Other "rend:
*************** / someSL                                                                                          :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************** > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                        :5_5:GoDeeper:
************ / aboveNextLineKeyword                                                                                  :5_5:Other "rend:
************* / expectUnDeepers                                                                                     :5_5:Other "rend:
************** > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                      :5_5:Other "rend:
************* > aNLK: determined undp_count = 4                                                                     :5_5:Other "rend:
************* > ->| trying to consume 1 GoDeepers                                                                   :5_5:Other "rend:
************* / $*|                                                                                                 :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                             :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                         :5_5:Other "rend:
************ / aboveNextLineKeyword                                                                             :6_2:UnDeeper:
************* / expectUnDeepers                                                                                :6_2:UnDeeper:
************** > ignoring []                                                                                  :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :6_2:UnDeeper:
************* > aNLK: determined undp_count = 4                                                                :6_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :6_2:UnDeeper:
************* / $*|                                                                                            :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / pre part                                                                                         :5_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :5_3:GoDeeper:
************* / expectUnDeepers                                                                                :5_3:GoDeeper:
************** / pNumAsText                                                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :5_3:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                :5_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :5_3:GoDeeper:
************* / $*|                                                                                            :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :5_3:GoDeeper:
************* > ->| success                                                                                     :5_3:Other "the:
************* / |>>/recurse                                                                                     :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :5_3:Other "the:
************** / slMultiTerm                                                                                   :5_3:Other "the:
*************** / someSL                                                                                      :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*************** \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************** \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************** > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************* > aNLK: current depth is 3                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :5_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :5_3:Other "the:
************* / expectUnDeepers                                                                                 :5_3:Other "the:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                  :5_3:Other "the:
************* > aNLK: determined undp_count = 4                                                                 :5_3:Other "the:
************* > ->| trying to consume 1 GoDeepers                                                               :5_3:Other "the:
************* / $*|                                                                                             :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :5_3:Other "the:
************ / aboveNextLineKeyword                                                                               :5_4:GoDeeper:
************* / expectUnDeepers                                                                                  :5_4:GoDeeper:
************** / pNumAsText                                                                                     :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                   :5_4:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                  :5_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :5_4:GoDeeper:
************* / $*|                                                                                              :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :5_4:GoDeeper:
************* > ->| success                                                                                       :5_4:Other "to":
************* / |>>/recurse                                                                                       :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :5_4:Other "to":
************** / slMultiTerm                                                                                     :5_4:Other "to":
*************** / someSL                                                                                        :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*************** \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************** \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************** > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :5_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :5_4:Other "to":
************* / expectUnDeepers                                                                                   :5_4:Other "to":
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                    :5_4:Other "to":
************* > aNLK: determined undp_count = 4                                                                   :5_4:Other "to":
************* > ->| trying to consume 1 GoDeepers                                                                 :5_4:Other "to":
************* / $*|                                                                                               :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :5_4:Other "to":
************ / aboveNextLineKeyword                                                                                 :5_5:GoDeeper:
************* / expectUnDeepers                                                                                    :5_5:GoDeeper:
************** / pNumAsText                                                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                     :5_5:GoDeeper:
************* > aNLK: determined undp_count = 4                                                                    :5_5:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                  :5_5:GoDeeper:
************* / $*|                                                                                                :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                            :5_5:GoDeeper:
************* > ->| success                                                                                         :5_5:Other "rend:
************* / |>>/recurse                                                                                         :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                            :5_5:Other "rend:
************** / slMultiTerm                                                                                       :5_5:Other "rend:
*************** / someSL                                                                                          :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************** > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :6_2:UnDeeper:
************* > |<|                                                                                            :6_2:UnDeeper:
************* > |<* starting                                                                                   :6_2:UnDeeper:
************* / |<*/parent                                                                                     :6_2:UnDeeper:
************** > |<*/recurse                                                                                  :6_2:UnDeeper:
************** > |<*/recurse matched 4 UnDeepers                                                            :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

************* \ |<*/parent has returned (Or,-4)                                                              :6_2:GoDeeper:
************* > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                        :5_5:GoDeeper:
************ / aboveNextLineKeyword                                                                                  :5_5:Other "rend:
************* / expectUnDeepers                                                                                     :5_5:Other "rend:
************** > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                      :5_5:Other "rend:
************* > aNLK: determined undp_count = 4                                                                     :5_5:Other "rend:
************* > ->| trying to consume 1 GoDeepers                                                                   :5_5:Other "rend:
************* / $*|                                                                                                 :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                             :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                         :5_5:Other "rend:
************ / aboveNextLineKeyword                                                                             :6_2:UnDeeper:
************* / expectUnDeepers                                                                                :6_2:UnDeeper:
************** > ignoring []                                                                                  :6_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                   :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

************* \ expectUnDeepers has returned 4                                                                 :6_2:UnDeeper:
************* > aNLK: determined undp_count = 4                                                                :6_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :6_2:UnDeeper:
************* / $*|                                                                                            :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=49:
preambleBoolStructR [When,If]> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

regulative permutation with deontic-action> IN: If GoDeeper GoDeeper Other "the organisa <…>
regulative permutation with deontic-action> MATCH (CERR): If GoDeeper
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=49:
regulative permutation with deontic-action> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

permutationsReg> IN: If GoDeeper GoDeeper Other "the organisa <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=49:
permutationsReg> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

pRegRuleNormal> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=49:
pRegRuleNormal> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

pRegRule> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=49:
pRegRule> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

*** / pTypeDefinition                                                                                                 :5_1:If:
**** / pRuleLabel                                                                                                    :5_1:If:
***** / $>|                                                                                                         :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :5_1:If:
***** / preambleParamText:[Upon]                                                                                    :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=25:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=25:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :5_1:If:
***** / preambleParamText:[Given]                                                                                   :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=25:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=25:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: If GoDeeper GoDeeper Other "the organisa <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=25:
pTypeDefinition> unexpected If
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :5_1:If:
**** / pRuleLabel                                                                                                    :5_1:If:
***** / $>|                                                                                                         :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :5_1:If:
***** / manyIndentation/leaf?                                                                                       :5_1:If:
****** / pMultiTermAka                                                                                             :5_1:If:
******* / pAKA                                                                                                    :5_1:If:
******** / slAKA                                                                                                 :5_1:If:
********* / $*|                                                                                                 :5_1:If:
********** / slAKA base                                                                                        :5_1:If:
*********** / slMultiTerm                                                                                     :5_1:If:
************ / someSL                                                                                        :5_1:If:
************* / pNumAsText                                                                                  :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

pAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=25:
pAKA> unexpected If
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: If GoDeeper GoDeeper Other "the organisa <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=25:
pMultiTermAka> unexpected If
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :5_1:If:
****** / someIndentation                                                                                           :5_1:If:
******* / myindented: consuming GoDeeper                                                                          :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: If GoDeeper GoDeeper Other "the organisa <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=25:
calling myindented pNameParens> unexpected If
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: If GoDeeper GoDeeper Other "the organisa <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=25:
pConstitutiveRule> unexpected If
pConstitutiveRule> expecting GoDeeper, Other text, RuleMarker 1 "\167", or TNumber 1234

*** / pScenarioRule                                                                                                   :5_1:If:
**** / pRuleLabel                                                                                                    :5_1:If:
***** / $>|                                                                                                         :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :5_1:If:
pExpect> IN: If GoDeeper GoDeeper Other "the organisa <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=25:
pExpect> unexpected If
pExpect> expecting Expect

pScenarioRule> IN: If GoDeeper GoDeeper Other "the organisa <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=25:
pScenarioRule> unexpected If
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :5_1:If:
**** / pSrcRef                                                                                                       :5_1:If:
***** / pRuleLabel                                                                                                  :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: If GoDeeper GoDeeper Other "the organisa <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 5, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 5, version = Nothing})) :5_1:If:
**** / pHornlike / permute                                                                                           :5_1:If:
***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

***** / pHornlike/uponLimb                                                                                          :5_1:If:
****** / preambleParamText:[Upon]                                                                                  :5_1:If:
******* / $>|                                                                                                     :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=25:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=25:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

***** / pHornlike/givenLimb                                                                                         :5_1:If:
****** / preambleParamText:[Given]                                                                                 :5_1:If:
******* / $>|                                                                                                     :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=25:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=25:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

***** / pHornlike/ambitious                                                                                         :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=25:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :5_1:If:
****** / manyIndentation/leaf?                                                                                     :5_1:If:
******* / relPredNextlineWhen                                                                                     :5_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:If:
********* / optIndentedTuple                                                                                    :5_1:If:
********** / optIndented                                                                                       :5_1:If:
*********** / pRelPred                                                                                        :5_1:If:
************ / slRelPred                                                                                     :5_1:If:
************* / nested simpleHorn                                                                           :5_1:If:
************** > |^|                                                                                       :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slAKA                                                                                   :5_1:If:
**************** / $*|                                                                                   :5_1:If:
***************** / slAKA base                                                                          :5_1:If:
****************** / slMultiTerm                                                                       :5_1:If:
******************* / someSL                                                                          :5_1:If:
******************** / pNumAsText                                                                    :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=25:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=25:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=25:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=25:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :5_1:If:
******** / $*|                                                                                                   :5_1:If:
********* / slRelPred                                                                                           :5_1:If:
********** / nested simpleHorn                                                                                 :5_1:If:
*********** > |^|                                                                                             :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slAKA                                                                                         :5_1:If:
************* / $*|                                                                                         :5_1:If:
************** / slAKA base                                                                                :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=25:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:If:
******* / someIndentation                                                                                         :5_1:If:
******** / myindented: consuming GoDeeper                                                                        :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=25:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=25:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :5_1:If:
****** / manyIndentation/leaf?                                                                                     :5_1:If:
******* / relPredNextlineWhen                                                                                     :5_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:If:
********* / optIndentedTuple                                                                                    :5_1:If:
********** / optIndented                                                                                       :5_1:If:
*********** / pRelPred                                                                                        :5_1:If:
************ / slRelPred                                                                                     :5_1:If:
************* / nested simpleHorn                                                                           :5_1:If:
************** > |^|                                                                                       :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slAKA                                                                                   :5_1:If:
**************** / $*|                                                                                   :5_1:If:
***************** / slAKA base                                                                          :5_1:If:
****************** / slMultiTerm                                                                       :5_1:If:
******************* / someSL                                                                          :5_1:If:
******************** / pNumAsText                                                                    :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=25:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=25:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=25:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=25:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :5_1:If:
******** / $*|                                                                                                   :5_1:If:
********* / slRelPred                                                                                           :5_1:If:
********** / nested simpleHorn                                                                                 :5_1:If:
*********** > |^|                                                                                             :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slAKA                                                                                         :5_1:If:
************* / $*|                                                                                         :5_1:If:
************** / slAKA base                                                                                :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=25:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:If:
******* / someIndentation                                                                                         :5_1:If:
******** / myindented: consuming GoDeeper                                                                        :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=25:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :5_1:If:
****** / preambleParamText:[Given]                                                                                 :5_1:If:
******* / $>|                                                                                                     :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=25:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=25:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

***** / pHornlike/uponLimb                                                                                          :5_1:If:
****** / preambleParamText:[Upon]                                                                                  :5_1:If:
******* / $>|                                                                                                     :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "the organisa <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=25:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=25:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :5_1:If:
****** / whenMeansIf                                                                                               :5_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :5_2:GoDeeper:
****** / pBSR                                                                                                       :5_2:GoDeeper:
******* / ppp inner                                                                                                :5_2:GoDeeper:
******** / expression                                                                                             :5_2:GoDeeper:
********* / labelPrefix                                                                                          :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "the organisatio <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :5_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :5_2:GoDeeper:
*********** / $*|                                                                                              :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :5_2:GoDeeper:
*********** / someSL                                                                                           :5_2:GoDeeper:
************ / pNumAsText                                                                                     :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :5_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :5_2:GoDeeper:
************ / someIndentation                                                                                :5_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :5_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :5_3:GoDeeper:
************** / expression                                                                                   :5_3:GoDeeper:
*************** / labelPrefix                                                                                :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation has tak <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :5_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / someSL                                                                               :5_3:GoDeeper:
******************* / pNumAsText                                                                         :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation has tak <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation has tak <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation has tak <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :5_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :5_3:GoDeeper:
****************** / someIndentation                                                                      :5_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation has tak <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :5_3:Other "the:
******************* / manyIndentation/leaf?                                                               :5_3:Other "the:
******************** / expression                                                                        :5_3:Other "the:
********************* / labelPrefix                                                                     :5_3:Other "the:
labelPrefix> IN: Other "the organisation has taken any ac <…>
labelPrefix> MATCH (COK): Other "the organisation has taken any ac <…>
labelPrefix> VALUE: ("the organisation has taken any action",[])

********************* \ labelPrefix has returned "the organisation has taken any action"                 :5_4:GoDeeper:
********************* / term p                                                                           :5_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :5_4:GoDeeper:
*********************** / someSL                                                                       :5_4:GoDeeper:
************************ / pNumAsText                                                                 :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :5_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :5_4:Other "to":
************************* / manyIndentation/leaf?                                                     :5_4:Other "to":
************************** / expression                                                              :5_4:Other "to":
*************************** / labelPrefix                                                           :5_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :5_5:GoDeeper:
*************************** / term p                                                                 :5_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :5_5:GoDeeper:
***************************** / $*|                                                                :5_5:GoDeeper:
****************************** / someSL                                                           :5_5:GoDeeper:
******************************* / pNumAsText                                                     :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=31:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :5_5:GoDeeper:
***************************** / someSL                                                             :5_5:GoDeeper:
****************************** / pNumAsText                                                       :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=31:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :5_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :5_5:GoDeeper:
****************************** / someIndentation                                                  :5_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :5_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :5_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :5_5:Other "rend:
******************************** / expression                                                    :5_5:Other "rend:
********************************* / labelPrefix                                                 :5_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :5_5:Other "rend:
********************************** / term p/1a:label directly above                            :5_5:Other "rend:
*********************************** / $*|                                                     :5_5:Other "rend:
************************************ / someSL                                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :5_5:Other "rend:
*********************************** / someSL                                                  :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********************************** / undeepers                                          :6_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************ > sameLine: success!                               :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :6_2:UnDeeper:
*********************************** / matching EOL                                       :6_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=33:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :5_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :5_5:Other "rend:
************************************ / someIndentation                                       :5_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :5_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=32:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :5_5:Other "rend:
************************************ / pRelPred                                              :5_5:Other "rend:
************************************* / slRelPred                                           :5_5:Other "rend:
************************************** / nested simpleHorn                                 :5_5:Other "rend:
*************************************** > |^|                                             :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |^| deeps                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :6_1:Or:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************************** / RPConstraint                                      :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slMultiTerm                                   :5_5:Other "rend:
***************************************** / someSL                                      :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*************************************** / |>| calling $>>                            :6_2:UnDeeper:
**************************************** / |>>/recurse                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=33:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :5_5:Other "rend:
*************************************** / $*|                                             :5_5:Other "rend:
**************************************** / slAKA                                         :5_5:Other "rend:
***************************************** / $*|                                         :5_5:Other "rend:
****************************************** / slAKA base                                :5_5:Other "rend:
******************************************* / slMultiTerm                             :5_5:Other "rend:
******************************************** / someSL                                :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional akapart               :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / PAKA/akapart                   :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
*********************************************** / Aka Token                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=33:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=33:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** / |>>/recurse                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :6_2:UnDeeper:
****************************************** / slAKA optional typically             :6_2:UnDeeper:
******************************************* / |?| optional something             :6_2:UnDeeper:
******************************************** / |>>/recurse                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=33:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :6_2:UnDeeper:
********************************************* / typically                      :6_2:UnDeeper:
********************************************** / $>|                          :6_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=33:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=33:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :6_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :6_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************************************* / undeepers                                      :6_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
************************************** > sameLine: success!                           :6_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :6_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
********************************* / binary(Or)                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :6_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=34:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=34:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=34:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=34:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Or GoDeeper G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :6_4:UnDeeper:
********************* / binary(Or)                                                                         :6_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :6_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation has taken any ac <…>
expression> MATCH (COK): Other "the organisation has taken any ac <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation has taken any ac <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation has taken any ac <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :6_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation has tak <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation has tak <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation has tak <…>
term p> MATCH (COK): GoDeeper Other "the organisation has tak <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
*************** / binary(Or)                                                                                       :6_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :6_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :6_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :6_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation has tak <…>
expression> MATCH (COK): GoDeeper Other "the organisation has tak <…>
expression> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation has tak <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :6_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "the <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :6_1:Or:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :6_1:Or:
********* / binary(Or)                                                                                          :6_1:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "the organisa <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

********* \ binary(Or) has returned Or                                                                           :6_2:GoDeeper:
********* / term p                                                                                               :6_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :6_2:GoDeeper:
*********** / $*|                                                                                              :6_2:GoDeeper:
************ / someSL                                                                                         :6_2:GoDeeper:
************* / pNumAsText                                                                                   :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :6_2:GoDeeper:
*********** / someSL                                                                                           :6_2:GoDeeper:
************ / pNumAsText                                                                                     :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "the organisatio <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "the organisatio <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :6_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :6_2:GoDeeper:
************ / someIndentation                                                                                :6_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "the organisatio <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :6_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :6_3:GoDeeper:
************** / expression                                                                                   :6_3:GoDeeper:
*************** / labelPrefix                                                                                :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "the organisation already <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :6_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :6_3:GoDeeper:
***************** / $*|                                                                                    :6_3:GoDeeper:
****************** / someSL                                                                               :6_3:GoDeeper:
******************* / pNumAsText                                                                         :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the organisation already <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the organisation already <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :6_3:GoDeeper:
***************** / someSL                                                                                 :6_3:GoDeeper:
****************** / pNumAsText                                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation already <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the organisation already <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the organisation already <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :6_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :6_3:GoDeeper:
****************** / someIndentation                                                                      :6_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the organisation already <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :6_3:Other "the:
******************* / manyIndentation/leaf?                                                               :6_3:Other "the:
******************** / expression                                                                        :6_3:Other "the:
********************* / labelPrefix                                                                     :6_3:Other "the:
labelPrefix> IN: Other "the organisation already implemen <…>
labelPrefix> MATCH (COK): Other "the organisation already implemen <…>
labelPrefix> VALUE: ("the organisation already implemented any technological measure",[])

********************* \ labelPrefix has returned "the organisation already implemented any technological measure" :6_4:GoDeeper:
********************* / term p                                                                           :6_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :6_4:GoDeeper:
*********************** / someSL                                                                       :6_4:GoDeeper:
************************ / pNumAsText                                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :6_4:Other "to":
************************* / manyIndentation/leaf?                                                     :6_4:Other "to":
************************** / expression                                                              :6_4:Other "to":
*************************** / labelPrefix                                                           :6_4:Other "to":
labelPrefix> IN: Other "to" GoDeeper Other "render it unl <…>
labelPrefix> MATCH (COK): Other "to"
labelPrefix> VALUE: ("to",[])

*************************** \ labelPrefix has returned "to"                                          :6_5:GoDeeper:
*************************** / term p                                                                 :6_5:GoDeeper:
**************************** / term p/1a:label directly above                                       :6_5:GoDeeper:
***************************** / $*|                                                                :6_5:GoDeeper:
****************************** / someSL                                                           :6_5:GoDeeper:
******************************* / pNumAsText                                                     :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "render it unlikely that  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=43:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                   :6_5:GoDeeper:
***************************** / someSL                                                             :6_5:GoDeeper:
****************************** / pNumAsText                                                       :6_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "render it unlikely that  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "render it unlikely that  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=43:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************************** / term p/notLabelTerm                                                  :6_5:GoDeeper:
***************************** / term p/2:someIndentation expr p                                    :6_5:GoDeeper:
****************************** / someIndentation                                                  :6_5:GoDeeper:
******************************* / myindented: consuming GoDeeper                                 :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "render it unlikely that  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************************* \ myindented: consuming GoDeeper has returned GoDeeper            :6_5:Other "rend:
******************************* / manyIndentation/leaf?                                           :6_5:Other "rend:
******************************** / expression                                                    :6_5:Other "rend:
********************************* / labelPrefix                                                 :6_5:Other "rend:
labelPrefix> IN: Other "render it unlikely that the notif <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected UnDeeper

********************************* / term p                                                      :6_5:Other "rend:
********************************** / term p/1a:label directly above                            :6_5:Other "rend:
*********************************** / $*|                                                     :6_5:Other "rend:
************************************ / someSL                                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************ \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************ / pNumAsText                                       :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (CERR): Other "render it unlikely that the notif <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "render it unlikely that the notif <…>
term p/1a:label directly above> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=45:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************************** / term p/b:label to the left of line below, with EOL        :6_5:Other "rend:
*********************************** / someSL                                                  :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*********************************** / undeepers                                          :1_2:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************ > sameLine: success!                               :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                          :1_2:UnDeeper:
*********************************** / matching EOL                                       :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "render it unlikely that the notif <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=45:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************************** / term p/notLabelTerm                                       :6_5:Other "rend:
*********************************** / term p/2:someIndentation expr p                         :6_5:Other "rend:
************************************ / someIndentation                                       :6_5:Other "rend:
************************************* / myindented: consuming GoDeeper                      :6_5:Other "rend:
myindented: consuming GoDeeper> IN: Other "render it unlikely that the notif <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "render it unlikely that the notif <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "render it unlikely that the notif <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
term p/2:someIndentation expr p> expecting GoDeeper

*********************************** / term p/3:plain p                                        :6_5:Other "rend:
************************************ / pRelPred                                              :6_5:Other "rend:
************************************* / slRelPred                                           :6_5:Other "rend:
************************************** / nested simpleHorn                                 :6_5:Other "rend:
*************************************** > |^|                                             :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |^| deeps                                  :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

*************************************** \ |^| deeps has returned ([(),(),(),()],-4) :EOF:
nested simpleHorn> IN: Other "render it unlikely that the notif <…>
nested simpleHorn> MATCH (CERR): Other "render it unlikely that the notif <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************************** / RPConstraint                                      :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "render it unlikely that the notif <…>
RPConstraint> MATCH (CERR): Other "render it unlikely that the notif <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPBoolStructR                                     :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slMultiTerm                                   :6_5:Other "rend:
***************************************** / someSL                                      :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
*************************************** / |>| calling $>>                            :1_2:UnDeeper:
**************************************** / |>>/recurse                              :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "render it unlikely that the notif <…>
RPBoolStructR> MATCH (CERR): Other "render it unlikely that the notif <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************** / RPMT                                              :6_5:Other "rend:
*************************************** / $*|                                             :6_5:Other "rend:
**************************************** / slAKA                                         :6_5:Other "rend:
***************************************** / $*|                                         :6_5:Other "rend:
****************************************** / slAKA base                                :6_5:Other "rend:
******************************************* / slMultiTerm                             :6_5:Other "rend:
******************************************** / someSL                                :6_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************** \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

******************************************* \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slAKA base> IN: Other "render it unlikely that the notif <…>
slAKA base> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

****************************************** \ slAKA base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

***************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional akapart               :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / PAKA/akapart                   :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
*********************************************** / Aka Token                  :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / slAKA optional typically             :1_2:UnDeeper:
******************************************* / |?| optional something             :1_2:UnDeeper:
******************************************** / |>>/recurse                      :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                         :1_2:UnDeeper:
********************************************* / typically                      :1_2:UnDeeper:
********************************************** / $>|                          :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
****************************************** > |>>/base got Nothing                 :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************************** \ |>>/base has returned (Nothing,0)      :1_2:UnDeeper:
***************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
***************************************** > pAKA: entityalias = Nothing            :1_2:UnDeeper:
slAKA> IN: Other "render it unlikely that the notif <…>
slAKA> MATCH (COK): Other "render it unlikely that the notif <…>
slAKA> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

**************************************** \ slAKA has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (COK): Other "render it unlikely that the notif <…>
$*|> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*************************************** \ $*| has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
RPMT> IN: Other "render it unlikely that the notif <…>
RPMT> MATCH (COK): Other "render it unlikely that the notif <…>
RPMT> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************** \ RPMT has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
slRelPred> IN: Other "render it unlikely that the notif <…>
slRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
slRelPred> VALUE: ((RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************************************* \ slRelPred has returned (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :1_2:UnDeeper:
************************************* / undeepers                                      :1_2:UnDeeper:
************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************************** > sameLine: success!                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************* \ undeepers has returned ()                      :1_2:UnDeeper:
pRelPred> IN: Other "render it unlikely that the notif <…>
pRelPred> MATCH (COK): Other "render it unlikely that the notif <…>
pRelPred> VALUE: (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"],[])

************************************ \ pRelPred has returned RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :1_2:UnDeeper:
term p/3:plain p> IN: Other "render it unlikely that the notif <…>
term p/3:plain p> MATCH (COK): Other "render it unlikely that the notif <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*********************************** \ term p/3:plain p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "render it unlikely that the notif <…>
term p/notLabelTerm> MATCH (COK): Other "render it unlikely that the notif <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
term p> IN: Other "render it unlikely that the notif <…>
term p> MATCH (COK): Other "render it unlikely that the notif <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

********************************* \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
********************************* / binary(Or)                                             :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************************* / binary(And)                                            :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************************* / binary(SetLess)                                        :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************************* / binary(SetPlus)                                        :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "render it unlikely that the notif <…>
expression> MATCH (COK): Other "render it unlikely that the notif <…>
expression> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************** \ expression has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "render it unlikely that the notif <…>
manyIndentation/leaf?> MATCH (COK): Other "render it unlikely that the notif <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

******************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_2:UnDeeper:
******************************* / myindented: consuming UnDeeper                             :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************************* \ myindented: consuming UnDeeper has returned UnDeeper         :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "render it unlikely that  <…>
someIndentation> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

****************************** \ someIndentation has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

***************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
term p> IN: GoDeeper Other "render it unlikely that  <…>
term p> MATCH (COK): GoDeeper Other "render it unlikely that  <…>
term p> VALUE: (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]) :1_3:UnDeeper:
*************************** / binary(Or)                                                           :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                          :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                      :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                      :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "to" GoDeeper Other "render it unl <…>
expression> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
expression> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************** \ expression has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
manyIndentation/leaf?> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************* \ manyIndentation/leaf? has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_3:UnDeeper:
************************* / myindented: consuming UnDeeper                                           :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                       :1_4:UnDeeper:
someIndentation> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
someIndentation> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

************************ \ someIndentation has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

*********************** \ term p/2:someIndentation expr p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p/notLabelTerm> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************** \ term p/notLabelTerm has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
term p> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
term p> MATCH (COK): GoDeeper Other "to" GoDeeper Other "rend <…>
term p> VALUE: (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])),[])

********************* \ term p has returned MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])) :1_4:UnDeeper:
********************* / binary(Or)                                                                         :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=47:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                        :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=47:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                    :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=47:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                    :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=47:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the organisation already implemen <…>
expression> MATCH (COK): Other "the organisation already implemen <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
manyIndentation/leaf?> IN: Other "the organisation already implemen <…>
manyIndentation/leaf?> MATCH (COK): Other "the organisation already implemen <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_4:UnDeeper:
******************* / myindented: consuming UnDeeper                                                         :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_5:UnDeeper:
someIndentation> IN: GoDeeper Other "the organisation already <…>
someIndentation> MATCH (COK): GoDeeper Other "the organisation already <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

****************** \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "the organisation already <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the organisation already <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

**************** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
term p> IN: GoDeeper Other "the organisation already <…>
term p> MATCH (COK): GoDeeper Other "the organisation already <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*************** \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
*************** / binary(Or)                                                                                       :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=48:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                      :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=48:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                  :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=48:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                  :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=48:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the organisation already <…>
expression> MATCH (COK): GoDeeper Other "the organisation already <…>
expression> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************** \ expression has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "the organisation already <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************* \ manyIndentation/leaf? has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :1_5:UnDeeper:
************* / myindented: consuming UnDeeper                                                                       :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                      :EOF:
someIndentation> IN: GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
someIndentation> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

************ \ someIndentation has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p/notLabelTerm> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********** \ term p/notLabelTerm has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
term p> IN: GoDeeper GoDeeper Other "the organisatio <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
term p> VALUE: (MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),[])

********* \ term p has returned MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))) :EOF:
********* / binary(Or)                                                                                        :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=49:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

********* / binary(And)                                                                                       :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=49:
binary(And)> unexpected end of input
binary(And)> expecting And

********* / binary(SetLess)                                                                                   :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=49:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                   :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=49:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "the organisatio <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "the organisatio <…>
expression> VALUE: (MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))],[])

******** \ expression has returned MyAny [MyLabel ["the organisation has taken any action"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"]))),MyLabel ["the organisation already implemented any technological measure"] (MyLabel ["to"] (MyLeaf (RPMT ["render it unlikely that the notifiable data breach will result in significant harm to the individual"])))] :EOF:
ppp inner> IN: GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "the organisatio <…>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

******* / withPrePost                                                                                              :5_2:GoDeeper:
******** > |<* starting                                                                                           :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=38:
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :5_2:GoDeeper:
******** / $*|                                                                                                    :5_2:GoDeeper:
********* / pre part                                                                                             :5_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :5_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :5_3:GoDeeper:
************ / pNumAsText                                                                                       :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "the organisation has tak <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "the organisation has tak <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :5_3:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :5_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :5_3:GoDeeper:
*********** / $*|                                                                                                :5_3:GoDeeper:
$*|> IN: GoDeeper Other "the organisation has tak <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :5_3:GoDeeper:
*********** > ->| success                                                                                         :5_3:Other "the:
*********** / |>>/recurse                                                                                         :5_3:Other "the:
|>>/recurse> IN: Other "the organisation has taken any ac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected Other "the organisation has taken any action"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Other "the:
************ / slMultiTerm                                                                                       :5_3:Other "the:
************* / someSL                                                                                          :5_3:Other "the:
someSL> IN: Other "the organisation has taken any ac <…>
someSL> MATCH (COK): Other "the organisation has taken any ac <…>
someSL> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************* \ someSL has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
slMultiTerm> IN: Other "the organisation has taken any ac <…>
slMultiTerm> MATCH (COK): Other "the organisation has taken any ac <…>
slMultiTerm> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

************ \ slMultiTerm has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
************ > |>>/base got ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "the organisation has taken any ac <…>
|>>/base> MATCH (COK): Other "the organisation has taken any ac <…>
|>>/base> VALUE: ((["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2),[])

*********** \ |>>/base has returned (["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],2) :6_2:UnDeeper:
*********** > aNLK: current depth is 3                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "the organisation has tak <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :5_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :5_3:Other "the:
*********** / expectUnDeepers                                                                                     :5_3:Other "the:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["the organisation has taken any action","GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "the organisation has taken any ac <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                      :5_3:Other "the:
*********** > aNLK: determined undp_count = 4                                                                     :5_3:Other "the:
*********** > ->| trying to consume 1 GoDeepers                                                                   :5_3:Other "the:
*********** / $*|                                                                                                 :5_3:Other "the:
$*|> IN: Other "the organisation has taken any ac <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :5_3:Other "the:
aboveNextLineKeyword> IN: Other "the organisation has taken any ac <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Other "the organisation has taken any action"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :5_3:Other "the:
********** / aboveNextLineKeyword                                                                                   :5_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :5_4:GoDeeper:
************ / pNumAsText                                                                                         :5_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                       :5_4:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                      :5_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :5_4:GoDeeper:
*********** / $*|                                                                                                  :5_4:GoDeeper:
$*|> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :5_4:GoDeeper:
*********** > ->| success                                                                                           :5_4:Other "to":
*********** / |>>/recurse                                                                                           :5_4:Other "to":
|>>/recurse> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "to"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :5_4:Other "to":
************ / slMultiTerm                                                                                         :5_4:Other "to":
************* / someSL                                                                                            :5_4:Other "to":
someSL> IN: Other "to" GoDeeper Other "render it unl <…>
someSL> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
someSL> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************* \ someSL has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
slMultiTerm> IN: Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
slMultiTerm> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

************ \ slMultiTerm has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
************ > |>>/base got ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "to" GoDeeper Other "render it unl <…>
|>>/base> MATCH (COK): Other "to" GoDeeper Other "render it unl <…>
|>>/base> VALUE: ((["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1),[])

*********** \ |>>/base has returned (["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"],1) :6_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["to","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "to" GoDeeper Other "rend <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :5_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :5_4:Other "to":
*********** / expectUnDeepers                                                                                       :5_4:Other "to":
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["to","GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "to" GoDeeper Other "render it unl <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                        :5_4:Other "to":
*********** > aNLK: determined undp_count = 4                                                                       :5_4:Other "to":
*********** > ->| trying to consume 1 GoDeepers                                                                     :5_4:Other "to":
*********** / $*|                                                                                                   :5_4:Other "to":
$*|> IN: Other "to" GoDeeper Other "render it unl <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :5_4:Other "to":
aboveNextLineKeyword> IN: Other "to" GoDeeper Other "render it unl <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=30:
aboveNextLineKeyword> unexpected Other "to"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :5_4:Other "to":
********** / aboveNextLineKeyword                                                                                     :5_5:GoDeeper:
*********** / expectUnDeepers                                                                                        :5_5:GoDeeper:
************ / pNumAsText                                                                                           :5_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "render it unlikely that  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: GoDeeper Other "render it unlikely that  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                         :5_5:GoDeeper:
*********** > aNLK: determined undp_count = 4                                                                        :5_5:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                      :5_5:GoDeeper:
*********** / $*|                                                                                                    :5_5:GoDeeper:
$*|> IN: GoDeeper Other "render it unlikely that  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                :5_5:GoDeeper:
*********** > ->| success                                                                                             :5_5:Other "rend:
*********** / |>>/recurse                                                                                             :5_5:Other "rend:
|>>/recurse> IN: Other "render it unlikely that the notif <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                :5_5:Other "rend:
************ / slMultiTerm                                                                                           :5_5:Other "rend:
************* / someSL                                                                                              :5_5:Other "rend:
someSL> IN: Other "render it unlikely that the notif <…>
someSL> MATCH (COK): Other "render it unlikely that the notif <…>
someSL> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************* \ someSL has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "render it unlikely that the notif <…>
slMultiTerm> MATCH (COK): Other "render it unlikely that the notif <…>
slMultiTerm> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

************ \ slMultiTerm has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
************ > |>>/base got ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
|>>/base> IN: Other "render it unlikely that the notif <…>
|>>/base> MATCH (COK): Other "render it unlikely that the notif <…>
|>>/base> VALUE: ((["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0),[])

*********** \ |>>/base has returned (["render it unlikely that the notifiable data breach will result in significant harm to the individual"],0) :6_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :6_2:UnDeeper:
*********** > |<|                                                                                                :6_2:UnDeeper:
*********** > |<* starting                                                                                       :6_2:UnDeeper:
*********** / |<*/parent                                                                                         :6_2:UnDeeper:
************ > |<*/recurse                                                                                      :6_2:UnDeeper:
************ > |<*/recurse matched 4 UnDeepers                                                                :6_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-4),[])

*********** \ |<*/parent has returned (Or,-4)                                                                  :6_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "render it unlikely that  <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=38:
aboveNextLineKeyword> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                            :5_5:GoDeeper:
********** / aboveNextLineKeyword                                                                                      :5_5:Other "rend:
*********** / expectUnDeepers                                                                                         :5_5:Other "rend:
************ > ignoring ["render it unlikely that the notifiable data breach will result in significant harm to the individual"] :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: Other "render it unlikely that the notif <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                          :5_5:Other "rend:
*********** > aNLK: determined undp_count = 4                                                                         :5_5:Other "rend:
*********** > ->| trying to consume 1 GoDeepers                                                                       :5_5:Other "rend:
*********** / $*|                                                                                                     :5_5:Other "rend:
$*|> IN: Other "render it unlikely that the notif <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                                 :5_5:Other "rend:
aboveNextLineKeyword> IN: Other "render it unlikely that the notif <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=32:
aboveNextLineKeyword> unexpected Other "render it unlikely that the notifiable data breach will result in significant harm to the individual"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                             :5_5:Other "rend:
********** / aboveNextLineKeyword                                                                                 :6_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :6_2:UnDeeper:
************ > ignoring []                                                                                      :6_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper,UnDeeper]                                       :6_1:Or:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (4,[])

*********** \ expectUnDeepers has returned 4                                                                     :6_2:UnDeeper:
*********** > aNLK: determined undp_count = 4                                                                    :6_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :6_2:UnDeeper:
*********** / $*|                                                                                                :6_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :6_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper UnDeeper Or G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=33:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :6_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "the organisatio <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=38:
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
pre part> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "the organisatio <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=38:
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
$*|> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "the organisatio <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=38:
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 4 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "the organisatio <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=49:
pBSR> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

****** / Otherwise                                                                                                 :5_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "the organisa <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=25:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

***** / pHornlike/ambitious                                                                                         :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=25:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :5_1:If:
****** / manyIndentation/leaf?                                                                                     :5_1:If:
******* / relPredNextlineWhen                                                                                     :5_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:If:
********* / optIndentedTuple                                                                                    :5_1:If:
********** / optIndented                                                                                       :5_1:If:
*********** / pRelPred                                                                                        :5_1:If:
************ / slRelPred                                                                                     :5_1:If:
************* / nested simpleHorn                                                                           :5_1:If:
************** > |^|                                                                                       :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slAKA                                                                                   :5_1:If:
**************** / $*|                                                                                   :5_1:If:
***************** / slAKA base                                                                          :5_1:If:
****************** / slMultiTerm                                                                       :5_1:If:
******************* / someSL                                                                          :5_1:If:
******************** / pNumAsText                                                                    :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=25:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=25:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=25:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=25:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :5_1:If:
******** / $*|                                                                                                   :5_1:If:
********* / slRelPred                                                                                           :5_1:If:
********** / nested simpleHorn                                                                                 :5_1:If:
*********** > |^|                                                                                             :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slAKA                                                                                         :5_1:If:
************* / $*|                                                                                         :5_1:If:
************** / slAKA base                                                                                :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=25:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:If:
******* / someIndentation                                                                                         :5_1:If:
******** / myindented: consuming GoDeeper                                                                        :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=25:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=25:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :5_1:If:
****** / manyIndentation/leaf?                                                                                     :5_1:If:
******* / relPredNextlineWhen                                                                                     :5_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:If:
********* / optIndentedTuple                                                                                    :5_1:If:
********** / optIndented                                                                                       :5_1:If:
*********** / pRelPred                                                                                        :5_1:If:
************ / slRelPred                                                                                     :5_1:If:
************* / nested simpleHorn                                                                           :5_1:If:
************** > |^|                                                                                       :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slAKA                                                                                   :5_1:If:
**************** / $*|                                                                                   :5_1:If:
***************** / slAKA base                                                                          :5_1:If:
****************** / slMultiTerm                                                                       :5_1:If:
******************* / someSL                                                                          :5_1:If:
******************** / pNumAsText                                                                    :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=25:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=25:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=25:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=25:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :5_1:If:
******** / $*|                                                                                                   :5_1:If:
********* / slRelPred                                                                                           :5_1:If:
********** / nested simpleHorn                                                                                 :5_1:If:
*********** > |^|                                                                                             :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slAKA                                                                                         :5_1:If:
************* / $*|                                                                                         :5_1:If:
************** / slAKA base                                                                                :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=25:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:If:
******* / someIndentation                                                                                         :5_1:If:
******** / myindented: consuming GoDeeper                                                                        :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=25:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :5_1:If:
****** / $>|                                                                                                       :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=25:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :5_1:If:
****** / manyIndentation/leaf?                                                                                     :5_1:If:
******* / relPredNextlineWhen                                                                                     :5_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:If:
********* / optIndentedTuple                                                                                    :5_1:If:
********** / optIndented                                                                                       :5_1:If:
*********** / pRelPred                                                                                        :5_1:If:
************ / slRelPred                                                                                     :5_1:If:
************* / nested simpleHorn                                                                           :5_1:If:
************** > |^|                                                                                       :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :5_1:If:
************** / $*|                                                                                       :5_1:If:
*************** / slAKA                                                                                   :5_1:If:
**************** / $*|                                                                                   :5_1:If:
***************** / slAKA base                                                                          :5_1:If:
****************** / slMultiTerm                                                                       :5_1:If:
******************* / someSL                                                                          :5_1:If:
******************** / pNumAsText                                                                    :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=25:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "the organisa <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=25:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=25:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=25:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :5_1:If:
******** / $*|                                                                                                   :5_1:If:
********* / slRelPred                                                                                           :5_1:If:
********** / nested simpleHorn                                                                                 :5_1:If:
*********** > |^|                                                                                             :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "the organisa <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slMultiTerm                                                                                   :5_1:If:
************* / someSL                                                                                      :5_1:If:
************** / pNumAsText                                                                                :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :5_1:If:
*********** / $*|                                                                                             :5_1:If:
************ / slAKA                                                                                         :5_1:If:
************* / $*|                                                                                         :5_1:If:
************** / slAKA base                                                                                :5_1:If:
*************** / slMultiTerm                                                                             :5_1:If:
**************** / someSL                                                                                :5_1:If:
***************** / pNumAsText                                                                          :5_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "the organisa <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "the organisa <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "the organisa <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "the organisa <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "the organisa <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "the organisa <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "the organisa <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=25:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=25:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:If:
******* / someIndentation                                                                                         :5_1:If:
******** / myindented: consuming GoDeeper                                                                        :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "the organisa <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=25:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=25:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=49:
pHornlike / permute> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

pHornlike> IN: If GoDeeper GoDeeper Other "the organisa <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=49:
pHornlike> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed

*** / pRuleLabel                                                                                                      :5_1:If:
**** / $>|                                                                                                           :5_1:If:
$>|> IN: If GoDeeper GoDeeper Other "the organisa <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=25:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :5_1:If:
**** / myindented: consuming GoDeeper                                                                                :5_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "the organisa <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=25:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=25:
pRule: unwrapping indentation and recursing> unexpected If
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: If GoDeeper GoDeeper Other "the organisa <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=49:
pRule> Label (["the organisation has taken any action"]) followed by label (["to"]) is not allowed


PDPA
  pdpadbno-6 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-6
       expected: [[Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Just (Any Nothing [Leaf (RPMT ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"]),Leaf (RPMT ["the organisation already implemented any technological measure","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"])])}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []},DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}]]
       but parsing failed with error:
       5:1:
       unexpected If
       expecting end of input
       §§                                                                                                   Unlikely                                                                                                                                                                                                                                                                                                                                                                                                           
       GIVEN                                                                                                an individual                                                                                                                                                                                                                                                                                                                                                                                                      
                                                                                                            who                                                                                                  is affected by an NDB                                                                                                                                                                                                                                                                                         
       DECIDE                                                                                               it is                                                                                                unlikely that the notifiable data breach will result in significant harm to the affected individual  AKA                                                                                                  Unlikely                                                                                            
       ✳ IF                                                                                                 FALSE                                                                                                the organisation has taken any action                                                                to                                                                                                   render it unlikely that the notifiable data breach will result in significant harm to the individual
       OR                                                                                                   TRUE                                                                                                 the organisation already implemented any technological measure                                       to                                                                                                   render it unlikely that the notifiable data breach will result in significant harm to the individual
       

  To rerun use: --match "/PDPA/pdpadbno-6/"

Randomized with seed 2145811810

Finished in 0.2825 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

