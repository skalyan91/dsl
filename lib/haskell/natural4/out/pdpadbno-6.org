* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-6/)

* Tokens
§§ ( "Unlikely" ) GIVEN
    ( "an individual" "who" ( "is affected by an NDB" ) ) DECIDE
    ( "it is"
        ( "unlikely that the notifiable data breach will result in significant harm to the affected individual"
            ( AKA ( "Unlikely" ) )
        )
    ) IF
    (
        ( "the organisation has taken any action"
            ( "to" ( "render it unlikely that the notifiable data breach will result in significant harm to the individual" ) )
        )
    ) OR
    (
        ( "the organisation already implemented any technological measure"
            ( "to" ( "render it unlikely that the notifiable data breach will result in significant harm to the individual" ) )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Unlikely"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Unlikely" Expecting: (                                        :1_2:Other "Unli:
******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/base> MATCH (COK): "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>>/recurse> MATCH (COK): ( "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>| calling $>>> MATCH (COK): ( "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                                    :2_2:UnDeeper:
****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRuleLabel> MATCH (EOK): §§ ( "Unlikely" )
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / pRegRuleSugary                                                                                                :2_1:Given:
***** / someDeep                                                                                                    :2_1:Given:
****** / someDeep first part calls base directly                                                                   :2_1:Given:
someDeep first part calls base directly> IN: GIVEN ( "an individual" "who" ( "is affe <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected GIVEN
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected GIVEN Expecting: Other text        :2_1:Given:
someDeep> IN: GIVEN ( "an individual" "who" ( "is affe <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected GIVEN
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected GIVEN Expecting: Other text                                         :2_1:Given:
pRegRuleSugary> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected GIVEN
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected GIVEN Expecting: Other text                                     :2_1:Given:
**** / pRegRuleNormal                                                                                                :2_1:Given:
***** / permutationsReg                                                                                             :2_1:Given:
****** / regulative permutation with deontic-temporal                                                              :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "an individual" "who" ( "is affe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected GIVEN Expecting: WHERE                                             :2_1:Given:
******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected GIVEN Expecting: HAVING                                            :2_1:Given:
preambleParamText:[Having]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected GIVEN Expecting: HAVING                       :2_1:Given:
******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "an i:
|>>/recurse> IN: "an individual" "who" ( "is affected by  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "an individual"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "an individual" Expecting: (                             :2_2:Other "an i:
********** / |>>/base                                                                                            :2_2:Other "an i:
*********** / pParamText                                                                                        :2_2:Other "an i:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "an i:
************* / pKeyValuesAka                                                                                 :2_2:Other "an i:
************** / slAKA                                                                                       :2_2:Other "an i:
*************** / $*|                                                                                       :2_2:Other "an i:
**************** / slAKA base                                                                              :2_2:Other "an i:
***************** / slKeyValues                                                                           :2_2:Other "an i:
****************** / $*|                                                                                 :2_2:Other "an i:
******************* / someSL                                                                            :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

******************* \ someSL has returned (["an individual"],0)                                         :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

****************** \ $*| has returned (["an individual"],0)                                              :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / |?| optional something                                                            :3_2:Other "who":
******************** / |>>/recurse                                                                     :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                   :3_2:Other "who":
******************** / |>>/base                                                                        :3_2:Other "who":
********************* / slTypeSig                                                                     :3_2:Other "who":
********************** / $>|                                                                         :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: IS ::                   :3_2:Other "who":
slTypeSig> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected "who"
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected "who" Expecting: IS ::               :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: IS ::                  :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:Other "who":
******************* > |>>/base got Nothing                                                              :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                   :3_2:Other "who":
slKeyValues> IN: "an individual" "who" ( "is affected by  <…>
slKeyValues> MATCH (COK): "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                          :3_2:Other "who":
slAKA base> IN: "an individual" "who" ( "is affected by  <…>
slAKA base> MATCH (COK): "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                             :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ $*| has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                             :3_2:Other "who":
*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional akapart                                                                  :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / PAKA/akapart                                                                      :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
********************* / Aka Token                                                                     :3_2:Other "who":
Aka Token> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected "who"
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected "who" Expecting: AKA                 :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: AKA                         :3_2:Other "who":
PAKA/akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected "who"
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected "who" Expecting: AKA                  :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: AKA                        :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                         :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                             :3_2:Other "who":
*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional typically                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / typically                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: TYPICALLY                   :3_2:Other "who":
typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected "who"
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected "who" Expecting: TYPICALLY               :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: TYPICALLY                  :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                       :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** > slAKA: proceeding after base and entityalias are retrieved ...                            :3_2:Other "who":
*************** > pAKA: entityalias = Nothing                                                               :3_2:Other "who":
slAKA> IN: "an individual" "who" ( "is affected by  <…>
slAKA> MATCH (COK): "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
************** / undeepers                                                                                   :3_2:Other "who":
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                    :3_2:Other "who":
*************** > sameLine: success!                                                                        :3_2:Other "who":
undeepers> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :3_2:Other "who":
pKeyValuesAka> IN: "an individual" "who" ( "is affected by  <…>
pKeyValuesAka> MATCH (COK): "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                    :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: "an individual" "who" ( "is affected by  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)            :3_2:Other "who":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :3_2:Other "who":
************* / manyIndentation/leaf?                                                                         :3_2:Other "who":
************** / sameMany                                                                                    :3_2:Other "who":
*************** / pKeyValuesAka                                                                             :3_2:Other "who":
**************** / slAKA                                                                                   :3_2:Other "who":
***************** / $*|                                                                                   :3_2:Other "who":
****************** / slAKA base                                                                          :3_2:Other "who":
******************* / slKeyValues                                                                       :3_2:Other "who":
******************** / $*|                                                                             :3_2:Other "who":
********************* / someSL                                                                        :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

********************* \ someSL has returned (["who","is affected by an NDB"],1)                        :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

******************** \ $*| has returned (["who","is affected by an NDB"],1)                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / |?| optional something                                                         :4_2:UnDeeper:
********************** / |>>/recurse                                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :4_2:UnDeeper:
********************** / |>>/base                                                                     :4_2:UnDeeper:
*********************** / slTypeSig                                                                  :4_2:UnDeeper:
************************ / $>|                                                                      :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :4_2:UnDeeper:
slTypeSig> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :4_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :4_2:UnDeeper:
slKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slKeyValues> MATCH (COK): "who" ( "is affected by an NDB"
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

******************* \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)          :4_2:UnDeeper:
slAKA base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA base> MATCH (COK): "who" ( "is affected by an NDB"
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

****************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)             :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :4_2:UnDeeper:
***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional akapart                                                               :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / PAKA/akapart                                                                   :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
*********************** / Aka Token                                                                  :4_2:UnDeeper:
Aka Token> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :4_2:UnDeeper:
PAKA/akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :4_2:UnDeeper:
***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional typically                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / typically                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :4_2:UnDeeper:
typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :4_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :4_2:UnDeeper:
slAKA> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA> MATCH (COK): "who" ( "is affected by an NDB"
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
**************** / undeepers                                                                                :4_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                 :4_2:UnDeeper:
***************** > sameLine: success!                                                                       :4_3:UnDeeper:
undeepers> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                  :4_3:UnDeeper:
pKeyValuesAka> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pKeyValuesAka> MATCH (COK): "who" ( "is affected by an NDB" )
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

*************** \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                      :4_3:UnDeeper:
*************** / pKeyValuesAka                                                                                :4_3:UnDeeper:
**************** / slAKA                                                                                      :4_3:UnDeeper:
***************** / $*|                                                                                      :4_3:UnDeeper:
****************** / slAKA base                                                                             :4_3:UnDeeper:
******************* / slKeyValues                                                                          :4_3:UnDeeper:
******************** / $*|                                                                                :4_3:UnDeeper:
********************* / someSL                                                                           :4_3:UnDeeper:
********************** / pNumAsText                                                                     :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number          :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number               :4_3:UnDeeper:
slKeyValues> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number         :4_3:UnDeeper:
slAKA base> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number            :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                     :4_3:UnDeeper:
slAKA> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                     :4_3:UnDeeper:
pKeyValuesAka> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number               :4_3:UnDeeper:
sameMany> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
sameMany> MATCH (COK): "who" ( "is affected by an NDB" )
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************** \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
manyIndentation/leaf?> MATCH (COK): "who" ( "is affected by an NDB" )
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "who" ( "is affected by an NDB" )
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: "an individual" "who" ( "is affected by  <…>
pParamText> MATCH (COK): "an individual" "who" ( "is affected by  <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
*********** > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]       :4_3:UnDeeper:
|>>/base> IN: "an individual" "who" ( "is affected by  <…>
|>>/base> MATCH (COK): "an individual" "who" ( "is affected by  <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

********** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: ( "an individual" "who" ( "is affected b <…>
|>>/recurse> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

********* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
******** / undeepers                                                                                                  :4_3:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                   :4_3:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Decide:
undeepers> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Decide:
preambleParamText:[Given]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> MATCH (COK): GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

******* \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
******* / preambleParamText:[Given]                                                                               :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: GIVEN                                            :4_1:Decide:
preambleParamText:[Given]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected DECIDE
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DECIDE Expecting: GIVEN                        :4_1:Decide:
******* / WHERE                                                                                                   :4_1:Decide:
WHERE> IN: DECIDE ( "it is" ( "unlikely that the no <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected DECIDE
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DECIDE Expecting: WHERE                                            :4_1:Decide:
******* / preambleParamText:[Having]                                                                              :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: HAVING                                           :4_1:Decide:
preambleParamText:[Having]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected DECIDE
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DECIDE Expecting: HAVING                      :4_1:Decide:
******* / preambleParamText:[Upon]                                                                                :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: UPON                                             :4_1:Decide:
preambleParamText:[Upon]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected DECIDE
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DECIDE Expecting: UPON                          :4_1:Decide:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Decide:
preambleBoolStructR [Unless]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected DECIDE
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DECIDE Expecting: UNLESS                    :4_1:Decide:
******* / preambleBoolStructR [When,If]                                                                           :4_1:Decide:
preambleBoolStructR [When,If]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected DECIDE
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DECIDE Expecting: IF WHEN                  :4_1:Decide:
******* / pDT                                                                                                     :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: MUST MAY SHANT                                   :4_1:Decide:
pDT> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=12:
pDT> unexpected DECIDE
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected DECIDE Expecting: MUST MAY SHANT                                     :4_1:Decide:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Decide:
pActor [Every,Party,TokAll]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=12:
pActor [Every,Party,TokAll]> unexpected DECIDE
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [Every,Party,TokAll]: Unexpected DECIDE Expecting: EVERY PARTY ALL            :4_1:Decide:
******* / pDoAction/Do                                                                                            :4_1:Decide:
pDoAction/Do> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=12:
pDoAction/Do> unexpected DECIDE
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected DECIDE Expecting: DO                                        :4_1:Decide:
regulative permutation with deontic-temporal> IN: GIVEN ( "an individual" "who" ( "is affe <…>
regulative permutation with deontic-temporal> MATCH (CERR): GIVEN ( "an individual" "who" ( "is affe <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=12:
regulative permutation with deontic-temporal> unexpected DECIDE
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected DECIDE Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN GIVEN HAVING UPON UNLESS DO WHERE :4_1:Decide:
****** / regulative permutation with deontic-action                                                                :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "an individual" "who" ( "is affe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected GIVEN Expecting: WHERE                                             :2_1:Given:
******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected GIVEN Expecting: HAVING                                            :2_1:Given:
preambleParamText:[Having]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected GIVEN Expecting: HAVING                       :2_1:Given:
******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "an i:
|>>/recurse> IN: "an individual" "who" ( "is affected by  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "an individual"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "an individual" Expecting: (                             :2_2:Other "an i:
********** / |>>/base                                                                                            :2_2:Other "an i:
*********** / pParamText                                                                                        :2_2:Other "an i:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "an i:
************* / pKeyValuesAka                                                                                 :2_2:Other "an i:
************** / slAKA                                                                                       :2_2:Other "an i:
*************** / $*|                                                                                       :2_2:Other "an i:
**************** / slAKA base                                                                              :2_2:Other "an i:
***************** / slKeyValues                                                                           :2_2:Other "an i:
****************** / $*|                                                                                 :2_2:Other "an i:
******************* / someSL                                                                            :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

******************* \ someSL has returned (["an individual"],0)                                         :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

****************** \ $*| has returned (["an individual"],0)                                              :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / |?| optional something                                                            :3_2:Other "who":
******************** / |>>/recurse                                                                     :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                   :3_2:Other "who":
******************** / |>>/base                                                                        :3_2:Other "who":
********************* / slTypeSig                                                                     :3_2:Other "who":
********************** / $>|                                                                         :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: IS ::                   :3_2:Other "who":
slTypeSig> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected "who"
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected "who" Expecting: IS ::               :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: IS ::                  :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:Other "who":
******************* > |>>/base got Nothing                                                              :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                   :3_2:Other "who":
slKeyValues> IN: "an individual" "who" ( "is affected by  <…>
slKeyValues> MATCH (COK): "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                          :3_2:Other "who":
slAKA base> IN: "an individual" "who" ( "is affected by  <…>
slAKA base> MATCH (COK): "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                             :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ $*| has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                             :3_2:Other "who":
*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional akapart                                                                  :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / PAKA/akapart                                                                      :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
********************* / Aka Token                                                                     :3_2:Other "who":
Aka Token> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected "who"
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected "who" Expecting: AKA                 :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: AKA                         :3_2:Other "who":
PAKA/akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected "who"
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected "who" Expecting: AKA                  :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: AKA                        :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                         :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** / |>>/recurse                                                                               :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                             :3_2:Other "who":
*************** / |>>/base                                                                                  :3_2:Other "who":
**************** / slAKA optional typically                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / typically                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: TYPICALLY                   :3_2:Other "who":
typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected "who"
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected "who" Expecting: TYPICALLY               :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: TYPICALLY                  :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
slAKA optional typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                       :3_2:Other "who":
**************** > |>>/base got Nothing                                                                    :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                         :3_2:Other "who":
*************** > slAKA: proceeding after base and entityalias are retrieved ...                            :3_2:Other "who":
*************** > pAKA: entityalias = Nothing                                                               :3_2:Other "who":
slAKA> IN: "an individual" "who" ( "is affected by  <…>
slAKA> MATCH (COK): "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA has returned (("an individual" :| [],Nothing),0)                                      :3_2:Other "who":
************** / undeepers                                                                                   :3_2:Other "who":
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                    :3_2:Other "who":
*************** > sameLine: success!                                                                        :3_2:Other "who":
undeepers> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :3_2:Other "who":
pKeyValuesAka> IN: "an individual" "who" ( "is affected by  <…>
pKeyValuesAka> MATCH (COK): "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                    :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: "an individual" "who" ( "is affected by  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)            :3_2:Other "who":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :3_2:Other "who":
************* / manyIndentation/leaf?                                                                         :3_2:Other "who":
************** / sameMany                                                                                    :3_2:Other "who":
*************** / pKeyValuesAka                                                                             :3_2:Other "who":
**************** / slAKA                                                                                   :3_2:Other "who":
***************** / $*|                                                                                   :3_2:Other "who":
****************** / slAKA base                                                                          :3_2:Other "who":
******************* / slKeyValues                                                                       :3_2:Other "who":
******************** / $*|                                                                             :3_2:Other "who":
********************* / someSL                                                                        :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

********************* \ someSL has returned (["who","is affected by an NDB"],1)                        :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

******************** \ $*| has returned (["who","is affected by an NDB"],1)                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / |?| optional something                                                         :4_2:UnDeeper:
********************** / |>>/recurse                                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :4_2:UnDeeper:
********************** / |>>/base                                                                     :4_2:UnDeeper:
*********************** / slTypeSig                                                                  :4_2:UnDeeper:
************************ / $>|                                                                      :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :4_2:UnDeeper:
slTypeSig> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :4_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :4_2:UnDeeper:
slKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slKeyValues> MATCH (COK): "who" ( "is affected by an NDB"
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

******************* \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)          :4_2:UnDeeper:
slAKA base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA base> MATCH (COK): "who" ( "is affected by an NDB"
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

****************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)             :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :4_2:UnDeeper:
***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional akapart                                                               :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / PAKA/akapart                                                                   :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
*********************** / Aka Token                                                                  :4_2:UnDeeper:
Aka Token> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :4_2:UnDeeper:
PAKA/akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** / |>>/recurse                                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :4_2:UnDeeper:
***************** / |>>/base                                                                               :4_2:UnDeeper:
****************** / slAKA optional typically                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / typically                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :4_2:UnDeeper:
typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
slAKA optional typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :4_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :4_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :4_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :4_2:UnDeeper:
slAKA> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA> MATCH (COK): "who" ( "is affected by an NDB"
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                      :4_2:UnDeeper:
**************** / undeepers                                                                                :4_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                 :4_2:UnDeeper:
***************** > sameLine: success!                                                                       :4_3:UnDeeper:
undeepers> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                  :4_3:UnDeeper:
pKeyValuesAka> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pKeyValuesAka> MATCH (COK): "who" ( "is affected by an NDB" )
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

*************** \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                      :4_3:UnDeeper:
*************** / pKeyValuesAka                                                                                :4_3:UnDeeper:
**************** / slAKA                                                                                      :4_3:UnDeeper:
***************** / $*|                                                                                      :4_3:UnDeeper:
****************** / slAKA base                                                                             :4_3:UnDeeper:
******************* / slKeyValues                                                                          :4_3:UnDeeper:
******************** / $*|                                                                                :4_3:UnDeeper:
********************* / someSL                                                                           :4_3:UnDeeper:
********************** / pNumAsText                                                                     :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number          :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number               :4_3:UnDeeper:
slKeyValues> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number         :4_3:UnDeeper:
slAKA base> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number            :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                     :4_3:UnDeeper:
slAKA> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                     :4_3:UnDeeper:
pKeyValuesAka> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number               :4_3:UnDeeper:
sameMany> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
sameMany> MATCH (COK): "who" ( "is affected by an NDB" )
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************** \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
manyIndentation/leaf?> MATCH (COK): "who" ( "is affected by an NDB" )
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "who" ( "is affected by an NDB" )
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: "an individual" "who" ( "is affected by  <…>
pParamText> MATCH (COK): "an individual" "who" ( "is affected by  <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
*********** > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]       :4_3:UnDeeper:
|>>/base> IN: "an individual" "who" ( "is affected by  <…>
|>>/base> MATCH (COK): "an individual" "who" ( "is affected by  <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

********** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: ( "an individual" "who" ( "is affected b <…>
|>>/recurse> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

********* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
******** / undeepers                                                                                                  :4_3:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                   :4_3:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Decide:
undeepers> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Decide:
preambleParamText:[Given]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> MATCH (COK): GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

******* \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
******* / preambleParamText:[Given]                                                                               :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: GIVEN                                            :4_1:Decide:
preambleParamText:[Given]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected DECIDE
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DECIDE Expecting: GIVEN                        :4_1:Decide:
******* / WHERE                                                                                                   :4_1:Decide:
WHERE> IN: DECIDE ( "it is" ( "unlikely that the no <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected DECIDE
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DECIDE Expecting: WHERE                                            :4_1:Decide:
******* / preambleParamText:[Having]                                                                              :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: HAVING                                           :4_1:Decide:
preambleParamText:[Having]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected DECIDE
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DECIDE Expecting: HAVING                      :4_1:Decide:
******* / preambleParamText:[Upon]                                                                                :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: UPON                                             :4_1:Decide:
preambleParamText:[Upon]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected DECIDE
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DECIDE Expecting: UPON                          :4_1:Decide:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Decide:
preambleBoolStructR [Unless]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected DECIDE
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DECIDE Expecting: UNLESS                    :4_1:Decide:
******* / preambleBoolStructR [When,If]                                                                           :4_1:Decide:
preambleBoolStructR [When,If]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected DECIDE
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DECIDE Expecting: IF WHEN                  :4_1:Decide:
******* / pTemporal/eventually                                                                                    :4_1:Decide:
pTemporal/eventually> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=12:
pTemporal/eventually> unexpected DECIDE
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected DECIDE Expecting: EVENTUALLY                        :4_1:Decide:
******* / pTemporal/specifically                                                                                  :4_1:Decide:
******** / $>|                                                                                                   :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: BEFORE AFTER BY ON                               :4_1:Decide:
pTemporal/specifically> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=12:
pTemporal/specifically> unexpected DECIDE
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected DECIDE Expecting: BEFORE AFTER BY ON              :4_1:Decide:
******* / pTemporal/vaguely                                                                                       :4_1:Decide:
pTemporal/vaguely> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=12:
pTemporal/vaguely> unexpected DECIDE
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected DECIDE Expecting: Other text                           :4_1:Decide:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Decide:
pActor [Every,Party,TokAll]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=12:
pActor [Every,Party,TokAll]> unexpected DECIDE
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [Every,Party,TokAll]: Unexpected DECIDE Expecting: EVERY PARTY ALL            :4_1:Decide:
******* / pDA                                                                                                     :4_1:Decide:
pDA> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=12:
pDA> unexpected DECIDE
pDA> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDA: Unexpected DECIDE Expecting: MUST MAY SHANT                                     :4_1:Decide:
regulative permutation with deontic-action> IN: GIVEN ( "an individual" "who" ( "is affe <…>
regulative permutation with deontic-action> MATCH (CERR): GIVEN ( "an individual" "who" ( "is affe <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=12:
regulative permutation with deontic-action> unexpected DECIDE
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected DECIDE Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS WHERE Other text :4_1:Decide:
permutationsReg> IN: GIVEN ( "an individual" "who" ( "is affe <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=12:
permutationsReg> unexpected DECIDE
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

***** \ !Unconsumed Error: permutationsReg: Unexpected DECIDE Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text :2_1:Given:
pRegRuleNormal> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=12:
pRegRuleNormal> unexpected DECIDE
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected DECIDE Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text :2_1:Given:
pRegRule> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRegRule> MATCH (EERR): §§ ( "Unlikely" )
pRegRule> ERROR:
pRegRule> offset=12:
pRegRule> unexpected DECIDE
pRegRule> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*** \ !Unconsumed Error: pRegRule: Unexpected DECIDE Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text :2_1:Given:
*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Unlikely"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Unlikely" Expecting: (                                        :1_2:Other "Unli:
******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/base> MATCH (COK): "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>>/recurse> MATCH (COK): ( "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>| calling $>>> MATCH (COK): ( "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                                    :2_2:UnDeeper:
****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRuleLabel> MATCH (EOK): §§ ( "Unlikely" )
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / pHornlike/uponLimb                                                                                            :2_1:Given:
***** / preambleParamText:[Upon]                                                                                    :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected GIVEN Expecting: UPON                                                  :2_1:Given:
preambleParamText:[Upon]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected GIVEN
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected GIVEN Expecting: UPON                               :2_1:Given:
pHornlike/uponLimb> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected GIVEN
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected GIVEN Expecting: UPON                                       :2_1:Given:
**** / pHornlike/givenLimb                                                                                           :2_1:Given:
***** / preambleParamText:[Given]                                                                                   :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

****** \ $>| has returned Given                                                                                     :2_2:GoDeeper:
****** / |>| calling $>>                                                                                            :2_2:GoDeeper:
******* / |>>/recurse                                                                                              :2_2:GoDeeper:
******** / |>>/recurse                                                                                             :2_2:Other "an i:
|>>/recurse> IN: "an individual" "who" ( "is affected by  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "an individual"
|>>/recurse> expecting (

******** \ !Unconsumed Error: |>>/recurse: Unexpected "an individual" Expecting: (                                 :2_2:Other "an i:
******** / |>>/base                                                                                                :2_2:Other "an i:
********* / pParamText                                                                                            :2_2:Other "an i:
********** / pParamText(flat) first line: pKeyValues                                                             :2_2:Other "an i:
*********** / pKeyValuesAka                                                                                     :2_2:Other "an i:
************ / slAKA                                                                                           :2_2:Other "an i:
************* / $*|                                                                                           :2_2:Other "an i:
************** / slAKA base                                                                                  :2_2:Other "an i:
*************** / slKeyValues                                                                               :2_2:Other "an i:
**************** / $*|                                                                                     :2_2:Other "an i:
***************** / someSL                                                                                :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

***************** \ someSL has returned (["an individual"],0)                                             :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

**************** \ $*| has returned (["an individual"],0)                                                  :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                           :3_2:Other "who":
**************** / |>>/base                                                                                :3_2:Other "who":
***************** / |?| optional something                                                                :3_2:Other "who":
****************** / |>>/recurse                                                                         :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                       :3_2:Other "who":
****************** / |>>/base                                                                            :3_2:Other "who":
******************* / slTypeSig                                                                         :3_2:Other "who":
******************** / $>|                                                                             :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting :: or IS

******************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: IS ::                       :3_2:Other "who":
slTypeSig> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=7:
slTypeSig> unexpected "who"
slTypeSig> expecting :: or IS

******************* \ !Unconsumed Error: slTypeSig: Unexpected "who" Expecting: IS ::                   :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting :: or IS

****************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: IS ::                      :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                       :3_2:Other "who":
***************** > |>>/base got Nothing                                                                  :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :3_2:Other "who":
slKeyValues> IN: "an individual" "who" ( "is affected by  <…>
slKeyValues> MATCH (COK): "an individual"
slKeyValues> VALUE: ((("an individual" :| [],Nothing),0),[])

*************** \ slKeyValues has returned (("an individual" :| [],Nothing),0)                              :3_2:Other "who":
slAKA base> IN: "an individual" "who" ( "is affected by  <…>
slAKA base> MATCH (COK): "an individual"
slAKA base> VALUE: ((("an individual" :| [],Nothing),0),[])

************** \ slAKA base has returned (("an individual" :| [],Nothing),0)                                 :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((("an individual" :| [],Nothing),0),[])

************* \ $*| has returned (("an individual" :| [],Nothing),0)                                          :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                 :3_2:Other "who":
************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional akapart                                                                      :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                           :3_2:Other "who":
**************** / |>>/base                                                                                :3_2:Other "who":
***************** / PAKA/akapart                                                                          :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
******************* / Aka Token                                                                         :3_2:Other "who":
Aka Token> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected "who"
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected "who" Expecting: AKA                     :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: AKA                             :3_2:Other "who":
PAKA/akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected "who"
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected "who" Expecting: AKA                      :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: AKA                            :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                             :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                 :3_2:Other "who":
************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional typically                                                                    :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                           :3_2:Other "who":
**************** / |>>/base                                                                                :3_2:Other "who":
***************** / typically                                                                             :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: TYPICALLY                       :3_2:Other "who":
typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected "who"
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected "who" Expecting: TYPICALLY                   :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: TYPICALLY                      :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :3_2:Other "who":
************* > pAKA: entityalias = Nothing                                                                   :3_2:Other "who":
slAKA> IN: "an individual" "who" ( "is affected by  <…>
slAKA> MATCH (COK): "an individual"
slAKA> VALUE: ((("an individual" :| [],Nothing),0),[])

************ \ slAKA has returned (("an individual" :| [],Nothing),0)                                          :3_2:Other "who":
************ / undeepers                                                                                       :3_2:Other "who":
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                        :3_2:Other "who":
************* > sameLine: success!                                                                            :3_2:Other "who":
undeepers> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                       :3_2:Other "who":
pKeyValuesAka> IN: "an individual" "who" ( "is affected by  <…>
pKeyValuesAka> MATCH (COK): "an individual"
pKeyValuesAka> VALUE: (("an individual" :| [],Nothing),[])

*********** \ pKeyValuesAka has returned ("an individual" :| [],Nothing)                                        :3_2:Other "who":
pParamText(flat) first line: pKeyValues> IN: "an individual" "who" ( "is affected by  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "an individual"
pParamText(flat) first line: pKeyValues> VALUE: (("an individual" :| [],Nothing),[])

********** \ pParamText(flat) first line: pKeyValues has returned ("an individual" :| [],Nothing)                :3_2:Other "who":
********** / pParamText(flat) subsequent lines: sameMany pKeyValues                                              :3_2:Other "who":
*********** / manyIndentation/leaf?                                                                             :3_2:Other "who":
************ / sameMany                                                                                        :3_2:Other "who":
************* / pKeyValuesAka                                                                                 :3_2:Other "who":
************** / slAKA                                                                                       :3_2:Other "who":
*************** / $*|                                                                                       :3_2:Other "who":
**************** / slAKA base                                                                              :3_2:Other "who":
***************** / slKeyValues                                                                           :3_2:Other "who":
****************** / $*|                                                                                 :3_2:Other "who":
******************* / someSL                                                                            :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

******************* \ someSL has returned (["who","is affected by an NDB"],1)                            :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

****************** \ $*| has returned (["who","is affected by an NDB"],1)                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :4_2:UnDeeper:
****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / |?| optional something                                                             :4_2:UnDeeper:
******************** / |>>/recurse                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_2:UnDeeper:
******************** / |>>/base                                                                         :4_2:UnDeeper:
********************* / slTypeSig                                                                      :4_2:UnDeeper:
********************** / $>|                                                                          :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                        :4_2:UnDeeper:
slTypeSig> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                    :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                       :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :4_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :4_2:UnDeeper:
slKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slKeyValues> MATCH (COK): "who" ( "is affected by an NDB"
slKeyValues> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

***************** \ slKeyValues has returned (("who" :| ["is affected by an NDB"],Nothing),1)              :4_2:UnDeeper:
slAKA base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA base> MATCH (COK): "who" ( "is affected by an NDB"
slAKA base> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

**************** \ slAKA base has returned (("who" :| ["is affected by an NDB"],Nothing),1)                 :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

*************** \ $*| has returned (("who" :| ["is affected by an NDB"],Nothing),1)                          :4_2:UnDeeper:
*************** / |>>/recurse                                                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :4_2:UnDeeper:
*************** / |>>/base                                                                                   :4_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :4_2:UnDeeper:
***************** / |?| optional something                                                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :4_2:UnDeeper:
****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / PAKA/akapart                                                                       :4_2:UnDeeper:
******************** / $>|                                                                              :4_2:UnDeeper:
********************* / Aka Token                                                                      :4_2:UnDeeper:
Aka Token> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                      :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                              :4_2:UnDeeper:
PAKA/akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                       :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                             :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :4_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :4_2:UnDeeper:
*************** / |>>/recurse                                                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :4_2:UnDeeper:
*************** / |>>/base                                                                                   :4_2:UnDeeper:
**************** / slAKA optional typically                                                                 :4_2:UnDeeper:
***************** / |?| optional something                                                                 :4_2:UnDeeper:
****************** / |>>/recurse                                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :4_2:UnDeeper:
****************** / |>>/base                                                                             :4_2:UnDeeper:
******************* / typically                                                                          :4_2:UnDeeper:
******************** / $>|                                                                              :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                        :4_2:UnDeeper:
typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                    :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                       :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :4_2:UnDeeper:
slAKA optional typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :4_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :4_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :4_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :4_2:UnDeeper:
slAKA> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA> MATCH (COK): "who" ( "is affected by an NDB"
slAKA> VALUE: ((("who" :| ["is affected by an NDB"],Nothing),1),[])

************** \ slAKA has returned (("who" :| ["is affected by an NDB"],Nothing),1)                          :4_2:UnDeeper:
************** / undeepers                                                                                    :4_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                     :4_2:UnDeeper:
*************** > sameLine: success!                                                                           :4_3:UnDeeper:
undeepers> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                      :4_3:UnDeeper:
pKeyValuesAka> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pKeyValuesAka> MATCH (COK): "who" ( "is affected by an NDB" )
pKeyValuesAka> VALUE: (("who" :| ["is affected by an NDB"],Nothing),[])

************* \ pKeyValuesAka has returned ("who" :| ["is affected by an NDB"],Nothing)                          :4_3:UnDeeper:
************* / pKeyValuesAka                                                                                    :4_3:UnDeeper:
************** / slAKA                                                                                          :4_3:UnDeeper:
*************** / $*|                                                                                          :4_3:UnDeeper:
**************** / slAKA base                                                                                 :4_3:UnDeeper:
***************** / slKeyValues                                                                              :4_3:UnDeeper:
****************** / $*|                                                                                    :4_3:UnDeeper:
******************* / someSL                                                                               :4_3:UnDeeper:
******************** / pNumAsText                                                                         :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number              :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :4_3:UnDeeper:
slKeyValues> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=11:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

***************** \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number             :4_3:UnDeeper:
slAKA base> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected )
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number                :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                         :4_3:UnDeeper:
slAKA> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected )
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                         :4_3:UnDeeper:
pKeyValuesAka> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=11:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number                   :4_3:UnDeeper:
sameMany> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
sameMany> MATCH (COK): "who" ( "is affected by an NDB" )
sameMany> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

************ \ sameMany has returned [("who" :| ["is affected by an NDB"],Nothing)]                               :4_3:UnDeeper:
manyIndentation/leaf?> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
manyIndentation/leaf?> MATCH (COK): "who" ( "is affected by an NDB" )
manyIndentation/leaf?> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

*********** \ manyIndentation/leaf? has returned [("who" :| ["is affected by an NDB"],Nothing)]                    :4_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "who" ( "is affected by an NDB" )
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("who" :| ["is affected by an NDB"],Nothing)],[])

********** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
pParamText> IN: "an individual" "who" ( "is affected by  <…>
pParamText> MATCH (COK): "an individual" "who" ( "is affected by  <…>
pParamText> VALUE: (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],[])

********* \ pParamText has returned ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)] :4_3:UnDeeper:
********* > |>>/base got ("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]           :4_3:UnDeeper:
|>>/base> IN: "an individual" "who" ( "is affected by  <…>
|>>/base> MATCH (COK): "an individual" "who" ( "is affected by  <…>
|>>/base> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0),[])

******** \ |>>/base has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],0) :4_3:UnDeeper:
|>>/recurse> IN: ( "an individual" "who" ( "is affected b <…>
|>>/recurse> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>>/recurse> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

******* \ |>>/recurse has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
|>| calling $>>> IN: ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
|>| calling $>>> VALUE: ((("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1),[])

****** \ |>| calling $>> has returned (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)],1) :4_3:UnDeeper:
****** / undeepers                                                                                                      :4_3:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :4_3:UnDeeper:
******* > sameLine: success!                                                                                      :4_1:Decide:
undeepers> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :4_1:Decide:
preambleParamText:[Given]> IN: GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> MATCH (COK): GIVEN ( "an individual" "who" ( "is affe <…>
preambleParamText:[Given]> VALUE: ((Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

***** \ preambleParamText:[Given] has returned (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
pHornlike/givenLimb> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pHornlike/givenLimb> MATCH (COK): GIVEN ( "an individual" "who" ( "is affe <…>
pHornlike/givenLimb> VALUE: (Just (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]),[])

**** \ pHornlike/givenLimb has returned Just (Given,("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]) :4_1:Decide:
**** / pHornlike/uponLimb                                                                                            :4_1:Decide:
***** / preambleParamText:[Upon]                                                                                    :4_1:Decide:
****** / $>|                                                                                                       :4_1:Decide:
$>|> IN: DECIDE ( "it is" ( "unlikely that the no <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected DECIDE
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected DECIDE Expecting: UPON                                                 :4_1:Decide:
preambleParamText:[Upon]> IN: DECIDE ( "it is" ( "unlikely that the no <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected DECIDE
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DECIDE Expecting: UPON                              :4_1:Decide:
pHornlike/uponLimb> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=12:
pHornlike/uponLimb> unexpected DECIDE
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected DECIDE Expecting: UPON                                      :4_1:Decide:
pTypeDefinition> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pTypeDefinition> MATCH (CERR): §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=12:
pTypeDefinition> unexpected DECIDE
pTypeDefinition> expecting DEFINE or UPON

*** \ !Consumed Error: pTypeDefinition: Unexpected DECIDE Expecting: UPON DEFINE                                      :4_1:Decide:
*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Unlikely"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Unlikely" Expecting: (                                        :1_2:Other "Unli:
******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/base> MATCH (COK): "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>>/recurse> MATCH (COK): ( "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>| calling $>>> MATCH (COK): ( "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                                    :2_2:UnDeeper:
****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRuleLabel> MATCH (EOK): §§ ( "Unlikely" )
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / calling myindented pNameParens                                                                                :2_1:Given:
***** / manyIndentation/leaf?                                                                                       :2_1:Given:
****** / pMultiTermAka                                                                                             :2_1:Given:
******* / pAKA                                                                                                    :2_1:Given:
******** / slAKA                                                                                                 :2_1:Given:
********* / $*|                                                                                                 :2_1:Given:
********** / slAKA base                                                                                        :2_1:Given:
*********** / slMultiTerm                                                                                     :2_1:Given:
************ / someSL                                                                                        :2_1:Given:
************* / pNumAsText                                                                                  :2_1:Given:
pNumAsText> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GIVEN
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected GIVEN Expecting: number                           :2_1:Given:
someSL> IN: GIVEN ( "an individual" "who" ( "is affe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GIVEN
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected GIVEN Expecting: other text or number                   :2_1:Given:
slMultiTerm> IN: GIVEN ( "an individual" "who" ( "is affe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GIVEN
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected GIVEN Expecting: other text or number                :2_1:Given:
slAKA base> IN: GIVEN ( "an individual" "who" ( "is affe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected GIVEN
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected GIVEN Expecting: other text or number                   :2_1:Given:
$*|> IN: GIVEN ( "an individual" "who" ( "is affe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GIVEN
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected GIVEN Expecting: other text or number                            :2_1:Given:
slAKA> IN: GIVEN ( "an individual" "who" ( "is affe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected GIVEN
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected GIVEN Expecting: other text or number                            :2_1:Given:
pAKA> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected GIVEN
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected GIVEN Expecting: other text or number                               :2_1:Given:
pMultiTermAka> IN: GIVEN ( "an individual" "who" ( "is affe <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected GIVEN
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected GIVEN Expecting: other text or number                        :2_1:Given:
manyIndentation/leaf?> IN: GIVEN ( "an individual" "who" ( "is affe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected GIVEN
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected GIVEN Expecting: other text or number                  :2_1:Given:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Given:
****** / someIndentation                                                                                           :2_1:Given:
******* / myindented: consuming GoDeeper                                                                          :2_1:Given:
myindented: consuming GoDeeper> IN: GIVEN ( "an individual" "who" ( "is affe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected GIVEN
myindented: consuming GoDeeper> expecting (

******* \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected GIVEN Expecting: (                        :2_1:Given:
someIndentation> IN: GIVEN ( "an individual" "who" ( "is affe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected GIVEN
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected GIVEN Expecting: (                                         :2_1:Given:
manyIndentation/deeper; calling someIndentation> IN: GIVEN ( "an individual" "who" ( "is affe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected GIVEN
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected GIVEN Expecting: (           :2_1:Given:
calling myindented pNameParens> IN: GIVEN ( "an individual" "who" ( "is affe <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected GIVEN
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected GIVEN Expecting: ( other text or number         :2_1:Given:
pConstitutiveRule> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pConstitutiveRule> MATCH (EERR): §§ ( "Unlikely" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected GIVEN
pConstitutiveRule> expecting ( or other text or number

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected GIVEN Expecting: ( other text or number                        :2_1:Given:
*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Unli:
|>>/recurse> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Unlikely"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Unlikely" Expecting: (                                        :1_2:Other "Unli:
******* / |>>/base                                                                                                  :1_2:Other "Unli:
******** > |>>/base got "Unlikely"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Unlikely" ) GIVEN ( "an individual" "wh <…>
|>>/base> MATCH (COK): "Unlikely"
|>>/base> VALUE: (("Unlikely",0),[])

******* \ |>>/base has returned ("Unlikely",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>>/recurse> MATCH (COK): ( "Unlikely"
|>>/recurse> VALUE: (("Unlikely",1),[])

****** \ |>>/recurse has returned ("Unlikely",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Unlikely" ) GIVEN ( "an individual" " <…>
|>| calling $>>> MATCH (COK): ( "Unlikely"
|>| calling $>>> VALUE: (("Unlikely",1),[])

***** \ |>| calling $>> has returned ("Unlikely",1)                                                                    :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                                    :2_2:UnDeeper:
****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "an individual" "who" ( "is af <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRuleLabel> MATCH (EOK): §§ ( "Unlikely" )
pRuleLabel> VALUE: (("\167",2,"Unlikely"),[])

**** \ pRuleLabel has returned ("\167",2,"Unlikely")                                                                 :2_1:Given:
**** / someIndentation                                                                                                :2_2:GoDeeper:
***** / myindented: consuming GoDeeper                                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an individual" "who" ( "is affected b <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***** \ myindented: consuming GoDeeper has returned GoDeeper                                                          :2_2:Other "an i:
***** / manyIndentation/leaf?                                                                                         :2_2:Other "an i:
****** / pGivens                                                                                                     :2_2:Other "an i:
******* / sameDepth                                                                                                 :2_2:Other "an i:
******** / pRelPred                                                                                                :2_2:Other "an i:
********* / slRelPred                                                                                             :2_2:Other "an i:
********** / nested simpleHorn                                                                                   :2_2:Other "an i:
*********** > |^|                                                                                               :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: "an individual" "who" ( "is affected by  <…>
slMultiTerm> MATCH (COK): "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |^| deeps                                                                                         :3_2:Other "who":
|^| deeps> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

*********** \ |^| deeps has returned ([],0)                                                                     :3_2:Other "who":
nested simpleHorn> IN: "an individual" "who" ( "is affected by  <…>
nested simpleHorn> MATCH (CERR): "an individual"
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected "who"
nested simpleHorn> expecting (, ), or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected "who" Expecting: MEANS ( )                           :3_2:Other "who":
********** / RPConstraint                                                                                        :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: "an individual" "who" ( "is affected by  <…>
slMultiTerm> MATCH (COK): "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |>| calling $>>                                                                                   :3_2:Other "who":
************ / |>>/recurse                                                                                     :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                   :3_2:Other "who":
************ / |>>/base                                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: IS < <= > >= IN NOT IN ==              :3_2:Other "who":
|>| calling $>>> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected "who"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected "who" Expecting: IS < <= > >= IN NOT IN == (       :3_2:Other "who":
RPConstraint> IN: "an individual" "who" ( "is affected by  <…>
RPConstraint> MATCH (CERR): "an individual"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected "who"
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected "who" Expecting: IS < <= > >= IN NOT IN == (              :3_2:Other "who":
********** / RPBoolStructR                                                                                       :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slMultiTerm                                                                                     :2_2:Other "an i:
************* / someSL                                                                                        :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

************* \ someSL has returned (["an individual"],0)                                                     :3_2:Other "who":
slMultiTerm> IN: "an individual" "who" ( "is affected by  <…>
slMultiTerm> MATCH (COK): "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

************ \ slMultiTerm has returned (["an individual"],0)                                                  :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
*********** / |>| calling $>>                                                                                   :3_2:Other "who":
************ / |>>/recurse                                                                                     :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                   :3_2:Other "who":
************ / |>>/base                                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: IS < <= > >= IN NOT IN ==              :3_2:Other "who":
|>| calling $>>> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected "who"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected "who" Expecting: IS < <= > >= IN NOT IN == (       :3_2:Other "who":
RPBoolStructR> IN: "an individual" "who" ( "is affected by  <…>
RPBoolStructR> MATCH (CERR): "an individual"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected "who"
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected "who" Expecting: IS < <= > >= IN NOT IN == (             :3_2:Other "who":
********** / RPMT                                                                                                :2_2:Other "an i:
*********** / $*|                                                                                               :2_2:Other "an i:
************ / slAKA                                                                                           :2_2:Other "an i:
************* / $*|                                                                                           :2_2:Other "an i:
************** / slAKA base                                                                                  :2_2:Other "an i:
*************** / slMultiTerm                                                                               :2_2:Other "an i:
**************** / someSL                                                                                  :2_2:Other "an i:
someSL> IN: "an individual" "who" ( "is affected by  <…>
someSL> MATCH (COK): "an individual"
someSL> VALUE: ((["an individual"],0),[])

**************** \ someSL has returned (["an individual"],0)                                               :3_2:Other "who":
slMultiTerm> IN: "an individual" "who" ( "is affected by  <…>
slMultiTerm> MATCH (COK): "an individual"
slMultiTerm> VALUE: ((["an individual"],0),[])

*************** \ slMultiTerm has returned (["an individual"],0)                                            :3_2:Other "who":
slAKA base> IN: "an individual" "who" ( "is affected by  <…>
slAKA base> MATCH (COK): "an individual"
slAKA base> VALUE: ((["an individual"],0),[])

************** \ slAKA base has returned (["an individual"],0)                                               :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

************* \ $*| has returned (["an individual"],0)                                                        :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                 :3_2:Other "who":
************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional akapart                                                                      :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                           :3_2:Other "who":
**************** / |>>/base                                                                                :3_2:Other "who":
***************** / PAKA/akapart                                                                          :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
******************* / Aka Token                                                                         :3_2:Other "who":
Aka Token> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected "who"
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected "who" Expecting: AKA                     :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: AKA                             :3_2:Other "who":
PAKA/akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected "who"
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected "who" Expecting: AKA                      :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: AKA                            :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional akapart> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                             :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* / |>>/recurse                                                                                   :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                                 :3_2:Other "who":
************* / |>>/base                                                                                      :3_2:Other "who":
************** / slAKA optional typically                                                                    :3_2:Other "who":
*************** / |?| optional something                                                                    :3_2:Other "who":
**************** / |>>/recurse                                                                             :3_2:Other "who":
|>>/recurse> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "who"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "who" Expecting: (                           :3_2:Other "who":
**************** / |>>/base                                                                                :3_2:Other "who":
***************** / typically                                                                             :3_2:Other "who":
****************** / $>|                                                                                 :3_2:Other "who":
$>|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected "who"
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected "who" Expecting: TYPICALLY                       :3_2:Other "who":
typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected "who"
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected "who" Expecting: TYPICALLY                   :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected "who"
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected "who" Expecting: TYPICALLY                      :3_2:Other "who":
|?| optional something> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :3_2:Other "who":
slAKA optional typically> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :3_2:Other "who":
************** > |>>/base got Nothing                                                                        :3_2:Other "who":
|>>/base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :3_2:Other "who":
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :3_2:Other "who":
************* > pAKA: entityalias = Nothing                                                                   :3_2:Other "who":
slAKA> IN: "an individual" "who" ( "is affected by  <…>
slAKA> MATCH (COK): "an individual"
slAKA> VALUE: ((["an individual"],0),[])

************ \ slAKA has returned (["an individual"],0)                                                        :3_2:Other "who":
$*|> IN: "an individual" "who" ( "is affected by  <…>
$*|> MATCH (COK): "an individual"
$*|> VALUE: ((["an individual"],0),[])

*********** \ $*| has returned (["an individual"],0)                                                            :3_2:Other "who":
RPMT> IN: "an individual" "who" ( "is affected by  <…>
RPMT> MATCH (COK): "an individual"
RPMT> VALUE: ((RPMT ["an individual"],0),[])

********** \ RPMT has returned (RPMT ["an individual"],0)                                                        :3_2:Other "who":
slRelPred> IN: "an individual" "who" ( "is affected by  <…>
slRelPred> MATCH (COK): "an individual"
slRelPred> VALUE: ((RPMT ["an individual"],0),[])

********* \ slRelPred has returned (RPMT ["an individual"],0)                                                     :3_2:Other "who":
********* / undeepers                                                                                             :3_2:Other "who":
********** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                              :3_2:Other "who":
********** > sameLine: success!                                                                                  :3_2:Other "who":
undeepers> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :3_2:Other "who":
pRelPred> IN: "an individual" "who" ( "is affected by  <…>
pRelPred> MATCH (COK): "an individual"
pRelPred> VALUE: (RPMT ["an individual"],[])

******** \ pRelPred has returned RPMT ["an individual"]                                                            :3_2:Other "who":
******** / pRelPred                                                                                                :3_2:Other "who":
********* / slRelPred                                                                                             :3_2:Other "who":
********** / nested simpleHorn                                                                                   :3_2:Other "who":
*********** > |^|                                                                                               :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slMultiTerm> MATCH (COK): "who" ( "is affected by an NDB"
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |^| deeps                                                                                          :4_2:UnDeeper:
|^| deeps> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

*********** \ |^| deeps has returned ([(),()],-2)                                                             :4_1:Decide:
nested simpleHorn> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
nested simpleHorn> MATCH (CERR): "who" ( "is affected by an NDB" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=12:
nested simpleHorn> unexpected DECIDE
nested simpleHorn> expecting ) or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected DECIDE Expecting: MEANS )                          :4_1:Decide:
********** / RPConstraint                                                                                        :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slMultiTerm> MATCH (COK): "who" ( "is affected by an NDB"
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |>| calling $>>                                                                                    :4_2:UnDeeper:
************ / |>>/recurse                                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                        :4_2:UnDeeper:
************ / |>>/base                                                                                         :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==                   :4_2:UnDeeper:
|>| calling $>>> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (            :4_2:UnDeeper:
RPConstraint> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
RPConstraint> MATCH (CERR): "who" ( "is affected by an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (                   :4_2:UnDeeper:
********** / RPBoolStructR                                                                                       :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slMultiTerm                                                                                     :3_2:Other "who":
************* / someSL                                                                                        :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ someSL has returned (["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slMultiTerm> MATCH (COK): "who" ( "is affected by an NDB"
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slMultiTerm has returned (["who","is affected by an NDB"],1)                                     :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
*********** / |>| calling $>>                                                                                    :4_2:UnDeeper:
************ / |>>/recurse                                                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                        :4_2:UnDeeper:
************ / |>>/base                                                                                         :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==                   :4_2:UnDeeper:
|>| calling $>>> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (            :4_2:UnDeeper:
RPBoolStructR> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
RPBoolStructR> MATCH (CERR): "who" ( "is affected by an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (                  :4_2:UnDeeper:
********** / RPMT                                                                                                :3_2:Other "who":
*********** / $*|                                                                                               :3_2:Other "who":
************ / slAKA                                                                                           :3_2:Other "who":
************* / $*|                                                                                           :3_2:Other "who":
************** / slAKA base                                                                                  :3_2:Other "who":
*************** / slMultiTerm                                                                               :3_2:Other "who":
**************** / someSL                                                                                  :3_2:Other "who":
someSL> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
someSL> MATCH (COK): "who" ( "is affected by an NDB"
someSL> VALUE: ((["who","is affected by an NDB"],1),[])

**************** \ someSL has returned (["who","is affected by an NDB"],1)                                  :4_2:UnDeeper:
slMultiTerm> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slMultiTerm> MATCH (COK): "who" ( "is affected by an NDB"
slMultiTerm> VALUE: ((["who","is affected by an NDB"],1),[])

*************** \ slMultiTerm has returned (["who","is affected by an NDB"],1)                               :4_2:UnDeeper:
slAKA base> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA base> MATCH (COK): "who" ( "is affected by an NDB"
slAKA base> VALUE: ((["who","is affected by an NDB"],1),[])

************** \ slAKA base has returned (["who","is affected by an NDB"],1)                                  :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

************* \ $*| has returned (["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
************* / |>>/recurse                                                                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :4_2:UnDeeper:
************* / |>>/base                                                                                       :4_2:UnDeeper:
************** / slAKA optional akapart                                                                       :4_2:UnDeeper:
*************** / |?| optional something                                                                     :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :4_2:UnDeeper:
**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / PAKA/akapart                                                                           :4_2:UnDeeper:
****************** / $>|                                                                                  :4_2:UnDeeper:
******************* / Aka Token                                                                          :4_2:UnDeeper:
Aka Token> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :4_2:UnDeeper:
PAKA/akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :4_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :4_2:UnDeeper:
************* / |>>/recurse                                                                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :4_2:UnDeeper:
************* / |>>/base                                                                                       :4_2:UnDeeper:
************** / slAKA optional typically                                                                     :4_2:UnDeeper:
*************** / |?| optional something                                                                     :4_2:UnDeeper:
**************** / |>>/recurse                                                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :4_2:UnDeeper:
**************** / |>>/base                                                                                 :4_2:UnDeeper:
***************** / typically                                                                              :4_2:UnDeeper:
****************** / $>|                                                                                  :4_2:UnDeeper:
$>|> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :4_2:UnDeeper:
typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :4_2:UnDeeper:
|?| optional something> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :4_2:UnDeeper:
slAKA optional typically> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :4_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :4_2:UnDeeper:
|>>/base> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :4_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :4_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :4_2:UnDeeper:
slAKA> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slAKA> MATCH (COK): "who" ( "is affected by an NDB"
slAKA> VALUE: ((["who","is affected by an NDB"],1),[])

************ \ slAKA has returned (["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
$*|> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
$*|> MATCH (COK): "who" ( "is affected by an NDB"
$*|> VALUE: ((["who","is affected by an NDB"],1),[])

*********** \ $*| has returned (["who","is affected by an NDB"],1)                                               :4_2:UnDeeper:
RPMT> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
RPMT> MATCH (COK): "who" ( "is affected by an NDB"
RPMT> VALUE: ((RPMT ["who","is affected by an NDB"],1),[])

********** \ RPMT has returned (RPMT ["who","is affected by an NDB"],1)                                           :4_2:UnDeeper:
slRelPred> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
slRelPred> MATCH (COK): "who" ( "is affected by an NDB"
slRelPred> VALUE: ((RPMT ["who","is affected by an NDB"],1),[])

********* \ slRelPred has returned (RPMT ["who","is affected by an NDB"],1)                                        :4_2:UnDeeper:
********* / undeepers                                                                                              :4_2:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                               :4_2:UnDeeper:
********** > sameLine: success!                                                                                     :4_3:UnDeeper:
undeepers> IN: ) ) DECIDE ( "it is" ( "unlikely that th <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                                :4_3:UnDeeper:
pRelPred> IN: "who" ( "is affected by an NDB" ) ) DECI <…>
pRelPred> MATCH (COK): "who" ( "is affected by an NDB" )
pRelPred> VALUE: (RPMT ["who","is affected by an NDB"],[])

******** \ pRelPred has returned RPMT ["who","is affected by an NDB"]                                                 :4_3:UnDeeper:
******** / pRelPred                                                                                                   :4_3:UnDeeper:
********* / slRelPred                                                                                                :4_3:UnDeeper:
********** / nested simpleHorn                                                                                      :4_3:UnDeeper:
*********** > |^|                                                                                                  :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                                  :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number                          :4_3:UnDeeper:
slMultiTerm> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number                       :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                                 :4_3:UnDeeper:
nested simpleHorn> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number                     :4_3:UnDeeper:
********** / RPConstraint                                                                                           :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                                  :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number                          :4_3:UnDeeper:
slMultiTerm> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number                       :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                                 :4_3:UnDeeper:
RPConstraint> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number                          :4_3:UnDeeper:
********** / RPBoolStructR                                                                                          :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slMultiTerm                                                                                        :4_3:UnDeeper:
************* / someSL                                                                                           :4_3:UnDeeper:
************** / pNumAsText                                                                                     :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                                  :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number                          :4_3:UnDeeper:
slMultiTerm> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number                       :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                                 :4_3:UnDeeper:
RPBoolStructR> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number                         :4_3:UnDeeper:
********** / RPMT                                                                                                   :4_3:UnDeeper:
*********** / $*|                                                                                                  :4_3:UnDeeper:
************ / slAKA                                                                                              :4_3:UnDeeper:
************* / $*|                                                                                              :4_3:UnDeeper:
************** / slAKA base                                                                                     :4_3:UnDeeper:
*************** / slMultiTerm                                                                                  :4_3:UnDeeper:
**************** / someSL                                                                                     :4_3:UnDeeper:
***************** / pNumAsText                                                                               :4_3:UnDeeper:
pNumAsText> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                            :4_3:UnDeeper:
someSL> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected )
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number                    :4_3:UnDeeper:
slMultiTerm> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number                 :4_3:UnDeeper:
slAKA base> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected )
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number                    :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                             :4_3:UnDeeper:
slAKA> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected )
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                             :4_3:UnDeeper:
$*|> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                                 :4_3:UnDeeper:
RPMT> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected )
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number                                  :4_3:UnDeeper:
slRelPred> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected )
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number                               :4_3:UnDeeper:
pRelPred> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected )
pRelPred> expecting other text or number

******** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number                                  :4_3:UnDeeper:
sameDepth> IN: "an individual" "who" ( "is affected by  <…>
sameDepth> MATCH (COK): "an individual" "who" ( "is affected by  <…>
sameDepth> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

******* \ sameDepth has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                         :4_3:UnDeeper:
pGivens> IN: "an individual" "who" ( "is affected by  <…>
pGivens> MATCH (COK): "an individual" "who" ( "is affected by  <…>
pGivens> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

****** \ pGivens has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                             :4_3:UnDeeper:
manyIndentation/leaf?> IN: "an individual" "who" ( "is affected by  <…>
manyIndentation/leaf?> MATCH (COK): "an individual" "who" ( "is affected by  <…>
manyIndentation/leaf?> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

***** \ manyIndentation/leaf? has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                 :4_3:UnDeeper:
***** / myindented: consuming UnDeeper                                                                                   :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) DECIDE ( "it is" ( "unlikely that the  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***** \ myindented: consuming UnDeeper has returned UnDeeper                                                        :4_1:Decide:
someIndentation> IN: ( "an individual" "who" ( "is affected b <…>
someIndentation> MATCH (COK): ( "an individual" "who" ( "is affected b <…>
someIndentation> VALUE: ([RPMT ["an individual"],RPMT ["who","is affected by an NDB"]],[])

**** \ someIndentation has returned [RPMT ["an individual"],RPMT ["who","is affected by an NDB"]]                    :4_1:Decide:
**** / pExpect                                                                                                       :4_1:Decide:
pExpect> IN: DECIDE ( "it is" ( "unlikely that the no <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=12:
pExpect> unexpected DECIDE
pExpect> expecting EXPECT

**** \ !Unconsumed Error: pExpect: Unexpected DECIDE Expecting: EXPECT                                               :4_1:Decide:
pScenarioRule> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pScenarioRule> MATCH (CERR): §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pScenarioRule> ERROR:
pScenarioRule> offset=12:
pScenarioRule> unexpected DECIDE
pScenarioRule> expecting EXPECT

*** \ !Consumed Error: pScenarioRule: Unexpected DECIDE Expecting: EXPECT                                             :4_1:Decide:
pRule> IN: §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRule> MATCH (CERR): §§ ( "Unlikely" ) GIVEN ( "an individual <…>
pRule> ERROR:
pRule> offset=12:
pRule> unexpected DECIDE
pRule> expecting DEFINE, EXPECT, UPON, or regulative rule

** \ !Consumed Error: pRule: Unexpected DECIDE Expecting: UPON DEFINE EXPECT regulative rule                           :4_1:Decide:

PDPA
  pdpadbno-6 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-6
       expected: [[Hornlike {name = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], keyword = Decide, given = Just (("an individual" :| [],Nothing) :| [("who" :| ["is affected by an NDB"],Nothing)]), upon = Nothing, clauses = [HC2 {hHead = RPMT ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], hBody = Just (Any Nothing [Leaf (RPMT ["the organisation has taken any action","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"]),Leaf (RPMT ["the organisation already implemented any technological measure","to","render it unlikely that the notifiable data breach will result in significant harm to the individual"])])}], rlabel = Just ("\167",2,"Unlikely"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []},DefNameAlias {name = ["Unlikely"], detail = ["it is","unlikely that the notifiable data breach will result in significant harm to the affected individual"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 5, version = Nothing})}]]
       but parsing failed with error:
       4:1:
       unexpected DECIDE
       expecting DEFINE, EXPECT, UPON, or regulative rule
       §§                                                                                                   Unlikely                                                                                                                                                                                                                                                                                                                                                                                                           
       GIVEN                                                                                                an individual                                                                                                                                                                                                                                                                                                                                                                                                      
                                                                                                            who                                                                                                  is affected by an NDB                                                                                                                                                                                                                                                                                         
       ✳ DECIDE                                                                                             it is                                                                                                unlikely that the notifiable data breach will result in significant harm to the affected individual  AKA                                                                                                  Unlikely                                                                                            
       IF                                                                                                   FALSE                                                                                                the organisation has taken any action                                                                to                                                                                                   render it unlikely that the notifiable data breach will result in significant harm to the individual
       OR                                                                                                   TRUE                                                                                                 the organisation already implemented any technological measure                                       to                                                                                                   render it unlikely that the notifiable data breach will result in significant harm to the individual
       

  To rerun use: --match "/PDPA/pdpadbno-6/"

Randomized with seed 1781410308

Finished in 0.0283 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

