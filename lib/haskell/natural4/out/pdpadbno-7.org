* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-7/)

* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Notify Individuals",UnDeeper,If,GoDeeper,GoDeeper,Other "it is",GoDeeper,Other "an NDB",UnDeeper,UnDeeper,UnDeeper,Unless,GoDeeper,GoDeeper,Other "you are a Public Agency",UnDeeper,UnDeeper,Party,GoDeeper,Other "You",UnDeeper,Must,GoDeeper,GoDeeper,Before,GoDeeper,TNumber 3,GoDeeper,Other "days",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Do,GoDeeper,GoDeeper,Other "NOTIFY",GoDeeper,Other "each of the Notifiable Individuals",UnDeeper,Other "in",GoDeeper,Other "any manner that is reasonable in the circumstances",UnDeeper,Other "with",GoDeeper,Other "a message obeying a certain format",UnDeeper,UnDeeper,UnDeeper,Where,GoDeeper,Other "the Notifiable Individuals",Means,GoDeeper,Other "the set of individuals affected by the NDB",SetLess,GoDeeper,Other "the individuals who are deemed",GoDeeper,Other "Unlikely",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the PDPC Exclusion List",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the LEA Exclusion List",UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected If
someDeep first part calls base directly> expecting Other text

someDeep> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected If
someDeep> expecting Other text

pRegRuleSugary> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected If
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :2_3:GoDeeper:
******************* / $*|                                                                                :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/1a:label directly above                                             :2_4:GoDeeper:
************************* / $*|                                                                      :2_4:GoDeeper:
************************** / someSL                                                                 :2_4:GoDeeper:
*************************** / pNumAsText                                                           :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :2_4:GoDeeper:
************************* / someSL                                                                   :2_4:GoDeeper:
************************** / pNumAsText                                                             :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/1a:label directly above                                  :2_4:Other "an N:
******************************* / $*|                                                           :2_4:Other "an N:
******************************** / someSL                                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************** \ someSL has returned (["an NDB"],0)                       :3_2:UnDeeper:
******************************** / pNumAsText                                               :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL              :2_4:Other "an N:
******************************* / someSL                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************* \ someSL has returned (["an NDB"],0)                         :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
******************************* / matching EOL                                               :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

regulative permutation with deontic-temporal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> MATCH (CERR): If GoDeeper
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=14:
regulative permutation with deontic-temporal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
regulative permutation with deontic-temporal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :2_3:GoDeeper:
******************* / $*|                                                                                :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/1a:label directly above                                             :2_4:GoDeeper:
************************* / $*|                                                                      :2_4:GoDeeper:
************************** / someSL                                                                 :2_4:GoDeeper:
*************************** / pNumAsText                                                           :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :2_4:GoDeeper:
************************* / someSL                                                                   :2_4:GoDeeper:
************************** / pNumAsText                                                             :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/1a:label directly above                                  :2_4:Other "an N:
******************************* / $*|                                                           :2_4:Other "an N:
******************************** / someSL                                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************** \ someSL has returned (["an NDB"],0)                       :3_2:UnDeeper:
******************************** / pNumAsText                                               :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL              :2_4:Other "an N:
******************************* / someSL                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************* \ someSL has returned (["an NDB"],0)                         :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
******************************* / matching EOL                                               :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

regulative permutation with deontic-action> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): If GoDeeper
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=14:
regulative permutation with deontic-action> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
regulative permutation with deontic-action> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

permutationsReg> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=14:
permutationsReg> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
permutationsReg> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pRegRuleNormal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=14:
pRegRuleNormal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pRegRuleNormal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pRegRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> ERROR:
pRegRule> offset=14:
pRegRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pRegRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected If
pTypeDefinition> expecting Define, Given, or Upon

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

pAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected If
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected If
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected If
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected If
pConstitutiveRule> expecting GoDeeper, Other text, or TNumber 1234

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected If
pExpect> expecting Expect

pScenarioRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected If
pScenarioRule> expecting Expect or Given

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :1_2:Other "Noti:
********* > |>>/base got "Notify Individuals"                                                                      :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******** \ |>>/base has returned ("Notify Individuals",0)                                                           :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

******* \ |>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

****** \ |>| calling $>> has returned ("Notify Individuals",1)                                                        :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                     :2_1:If:
pSrcRef> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> VALUE: ((Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/uponLimb                                                                                          :2_1:If:
****** / preambleParamText:[Upon]                                                                                  :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/givenLimb                                                                                         :2_1:If:
****** / preambleParamText:[Given]                                                                                 :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :2_1:If:
****** / preambleParamText:[Given]                                                                                 :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/uponLimb                                                                                          :2_1:If:
****** / preambleParamText:[Upon]                                                                                  :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=14:
pHornlike / permute> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pHornlike / permute> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pHornlike> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> ERROR:
pHornlike> offset=14:
pHornlike> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pHornlike> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

**** \ |>| calling $>> has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

*** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                         :2_1:If:
pRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:If:
** / pRule                                                                                                             :2_1:If:
*** / pRegRule                                                                                                        :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected If
someDeep first part calls base directly> expecting Other text

someDeep> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected If
someDeep> expecting Other text

pRegRuleSugary> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected If
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :2_3:GoDeeper:
******************* / $*|                                                                                :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/1a:label directly above                                             :2_4:GoDeeper:
************************* / $*|                                                                      :2_4:GoDeeper:
************************** / someSL                                                                 :2_4:GoDeeper:
*************************** / pNumAsText                                                           :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :2_4:GoDeeper:
************************* / someSL                                                                   :2_4:GoDeeper:
************************** / pNumAsText                                                             :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/1a:label directly above                                  :2_4:Other "an N:
******************************* / $*|                                                           :2_4:Other "an N:
******************************** / someSL                                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************** \ someSL has returned (["an NDB"],0)                       :3_2:UnDeeper:
******************************** / pNumAsText                                               :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL              :2_4:Other "an N:
******************************* / someSL                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************* \ someSL has returned (["an NDB"],0)                         :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
******************************* / matching EOL                                               :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

regulative permutation with deontic-temporal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> MATCH (CERR): If GoDeeper
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=14:
regulative permutation with deontic-temporal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
regulative permutation with deontic-temporal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/1a:label directly above                                                       :2_3:GoDeeper:
******************* / $*|                                                                                :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

****************** / term p/b:label to the left of line below, with EOL                                   :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/1a:label directly above                                             :2_4:GoDeeper:
************************* / $*|                                                                      :2_4:GoDeeper:
************************** / someSL                                                                 :2_4:GoDeeper:
*************************** / pNumAsText                                                           :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************ / term p/b:label to the left of line below, with EOL                         :2_4:GoDeeper:
************************* / someSL                                                                   :2_4:GoDeeper:
************************** / pNumAsText                                                             :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/1a:label directly above                                  :2_4:Other "an N:
******************************* / $*|                                                           :2_4:Other "an N:
******************************** / someSL                                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************** \ someSL has returned (["an NDB"],0)                       :3_2:UnDeeper:
******************************** / pNumAsText                                               :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

****************************** / term p/b:label to the left of line below, with EOL              :2_4:Other "an N:
******************************* / someSL                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

******************************* \ someSL has returned (["an NDB"],0)                         :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
******************************* / matching EOL                                               :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","it is","GD","an NDB"]                                                        :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :2_3:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                :2_3:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :2_3:GoDeeper:
************* / $*|                                                                                            :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :2_3:GoDeeper:
************* > ->| success                                                                                     :2_3:Other "it i:
************* / |>>/recurse                                                                                     :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                        :2_3:Other "it i:
************** / slMultiTerm                                                                                   :2_3:Other "it i:
*************** / someSL                                                                                      :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*************** \ someSL has returned (["it is","an NDB"],1)                                                 :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************** \ slMultiTerm has returned (["it is","an NDB"],1)                                              :3_2:UnDeeper:
************** > |>>/base got ["it is","an NDB"]                                                              :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

************* \ |>>/base has returned (["it is","an NDB"],1)                                                   :3_2:UnDeeper:
************* > aNLK: current depth is 2                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["it is","an NDB"]                                                      :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Other "it i:
************* / expectUnDeepers                                                                                 :2_3:Other "it i:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["it is","GD","an NDB"]                                                             :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                  :2_3:Other "it i:
************* > aNLK: determined undp_count = 3                                                                 :2_3:Other "it i:
************* > ->| trying to consume 1 GoDeepers                                                               :2_3:Other "it i:
************* / $*|                                                                                             :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                         :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Other "it i:
************ / aboveNextLineKeyword                                                                               :2_4:GoDeeper:
************* / expectUnDeepers                                                                                  :2_4:GoDeeper:
************** / pNumAsText                                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************** > ignoring ["GD","an NDB"]                                                                     :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                   :2_4:GoDeeper:
************* > aNLK: determined undp_count = 3                                                                  :2_4:GoDeeper:
************* > ->| trying to consume 1 GoDeepers                                                                :2_4:GoDeeper:
************* / $*|                                                                                              :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                          :2_4:GoDeeper:
************* > ->| success                                                                                       :2_4:Other "an N:
************* / |>>/recurse                                                                                       :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Other "an N:
************** / slMultiTerm                                                                                     :2_4:Other "an N:
*************** / someSL                                                                                        :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************** \ someSL has returned (["an NDB"],0)                                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************** \ slMultiTerm has returned (["an NDB"],0)                                                      :3_2:UnDeeper:
************** > |>>/base got ["an NDB"]                                                                      :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

************* \ |>>/base has returned (["an NDB"],0)                                                           :3_2:UnDeeper:
************* > aNLK: current depth is 1                                                                       :3_2:UnDeeper:
************* > |<|                                                                                            :3_2:UnDeeper:
************* > |<* starting                                                                                   :3_2:UnDeeper:
************* / |<*/parent                                                                                     :3_2:UnDeeper:
************** > |<*/recurse                                                                                  :3_2:UnDeeper:
************** > |<*/recurse matched 3 UnDeepers                                                            :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

************* \ |<*/parent has returned (Unless,-3)                                                          :3_2:GoDeeper:
************* > aNLK: slMultiTerm is ["an NDB"]                                                              :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

************ > /*= lookAhead failed, delegating to plain /+=                                                      :2_4:GoDeeper:
************ / aboveNextLineKeyword                                                                                :2_4:Other "an N:
************* / expectUnDeepers                                                                                   :2_4:Other "an N:
************** > ignoring ["an NDB"]                                                                          :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                    :2_4:Other "an N:
************* > aNLK: determined undp_count = 3                                                                   :2_4:Other "an N:
************* > ->| trying to consume 1 GoDeepers                                                                 :2_4:Other "an N:
************* / $*|                                                                                               :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                           :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                       :2_4:Other "an N:
************ / aboveNextLineKeyword                                                                             :3_2:UnDeeper:
************* / expectUnDeepers                                                                                :3_2:UnDeeper:
************** > ignoring []                                                                                  :3_2:UnDeeper:
************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                            :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************* \ expectUnDeepers has returned 3                                                                 :3_2:UnDeeper:
************* > aNLK: determined undp_count = 3                                                                :3_2:UnDeeper:
************* > ->| trying to consume 1 GoDeepers                                                              :3_2:UnDeeper:
************* / $*|                                                                                            :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************* \ $*| has returned ((),0)                                                                        :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************ > /*= lookAhead failed, delegating to plain /+=                                                    :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (CERR): If GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
preambleBoolStructR [When,If]> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

regulative permutation with deontic-action> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): If GoDeeper
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=14:
regulative permutation with deontic-action> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
regulative permutation with deontic-action> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

permutationsReg> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=14:
permutationsReg> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
permutationsReg> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pRegRuleNormal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=14:
pRegRuleNormal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pRegRuleNormal> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pRegRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=14:
pRegRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pRegRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

*** / pTypeDefinition                                                                                                 :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected If
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

pAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected If
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected If
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected If
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected If
pConstitutiveRule> expecting GoDeeper, Other text, RuleMarker 1 "\167", or TNumber 1234

*** / pScenarioRule                                                                                                   :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected If
pExpect> expecting Expect

pScenarioRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected If
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :2_1:If:
**** / pSrcRef                                                                                                       :2_1:If:
***** / pRuleLabel                                                                                                  :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/uponLimb                                                                                          :2_1:If:
****** / preambleParamText:[Upon]                                                                                  :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/givenLimb                                                                                         :2_1:If:
****** / preambleParamText:[Given]                                                                                 :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :2_1:If:
****** / preambleParamText:[Given]                                                                                 :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/uponLimb                                                                                          :2_1:If:
****** / preambleParamText:[Upon]                                                                                  :2_1:If:
******* / $>|                                                                                                     :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=5:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / someSL                                                                                           :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=5:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/1a:label directly above                                                 :2_4:GoDeeper:
*********************** / $*|                                                                          :2_4:GoDeeper:
************************ / someSL                                                                     :2_4:GoDeeper:
************************* / pNumAsText                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********************** / term p/b:label to the left of line below, with EOL                             :2_4:GoDeeper:
*********************** / someSL                                                                       :2_4:GoDeeper:
************************ / pNumAsText                                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/1a:label directly above                                      :2_4:Other "an N:
***************************** / $*|                                                               :2_4:Other "an N:
****************************** / someSL                                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************** \ someSL has returned (["an NDB"],0)                           :3_2:UnDeeper:
****************************** / pNumAsText                                                   :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "an NDB"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

**************************** / term p/b:label to the left of line below, with EOL                  :2_4:Other "an N:
***************************** / someSL                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

***************************** \ someSL has returned (["an NDB"],0)                             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                           :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :3_2:UnDeeper:
***************************** / matching EOL                                                   :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "an NDB"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (CERR): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> Label (["it is"]) followed by leaf (RPMT ["an NDB"]) is not allowed

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPrePost> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPrePost> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","it is","GD","an NDB"]                                                            :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :2_3:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :2_3:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :2_3:GoDeeper:
*********** / $*|                                                                                                :2_3:GoDeeper:
$*|> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :2_3:GoDeeper:
*********** > ->| success                                                                                         :2_3:Other "it i:
*********** / |>>/recurse                                                                                         :2_3:Other "it i:
|>>/recurse> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "it is"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :2_3:Other "it i:
************ / slMultiTerm                                                                                       :2_3:Other "it i:
************* / someSL                                                                                          :2_3:Other "it i:
someSL> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
someSL> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************* \ someSL has returned (["it is","an NDB"],1)                                                     :3_2:UnDeeper:
slMultiTerm> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
slMultiTerm> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************ \ slMultiTerm has returned (["it is","an NDB"],1)                                                  :3_2:UnDeeper:
************ > |>>/base got ["it is","an NDB"]                                                                  :3_2:UnDeeper:
|>>/base> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
|>>/base> MATCH (COK): Other "it is" GoDeeper Other "an NDB"
|>>/base> VALUE: ((["it is","an NDB"],1),[])

*********** \ |>>/base has returned (["it is","an NDB"],1)                                                       :3_2:UnDeeper:
*********** > aNLK: current depth is 2                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["it is","an NDB"]                                                          :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "it is" GoDeeper Other "a <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Other "it i:
*********** / expectUnDeepers                                                                                     :2_3:Other "it i:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["it is","GD","an NDB"]                                                                 :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                      :2_3:Other "it i:
*********** > aNLK: determined undp_count = 3                                                                     :2_3:Other "it i:
*********** > ->| trying to consume 1 GoDeepers                                                                   :2_3:Other "it i:
*********** / $*|                                                                                                 :2_3:Other "it i:
$*|> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                             :2_3:Other "it i:
aboveNextLineKeyword> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "it is"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Other "it i:
********** / aboveNextLineKeyword                                                                                   :2_4:GoDeeper:
*********** / expectUnDeepers                                                                                      :2_4:GoDeeper:
************ / pNumAsText                                                                                         :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

************ > ignoring ["GD","an NDB"]                                                                         :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                       :2_4:GoDeeper:
*********** > aNLK: determined undp_count = 3                                                                      :2_4:GoDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                    :2_4:GoDeeper:
*********** / $*|                                                                                                  :2_4:GoDeeper:
$*|> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                              :2_4:GoDeeper:
*********** > ->| success                                                                                           :2_4:Other "an N:
*********** / |>>/recurse                                                                                           :2_4:Other "an N:
|>>/recurse> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Other "an NDB"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                              :2_4:Other "an N:
************ / slMultiTerm                                                                                         :2_4:Other "an N:
************* / someSL                                                                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************* \ someSL has returned (["an NDB"],0)                                                             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************ \ slMultiTerm has returned (["an NDB"],0)                                                          :3_2:UnDeeper:
************ > |>>/base got ["an NDB"]                                                                          :3_2:UnDeeper:
|>>/base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "an NDB"
|>>/base> VALUE: ((["an NDB"],0),[])

*********** \ |>>/base has returned (["an NDB"],0)                                                               :3_2:UnDeeper:
*********** > aNLK: current depth is 1                                                                           :3_2:UnDeeper:
*********** > |<|                                                                                                :3_2:UnDeeper:
*********** > |<* starting                                                                                       :3_2:UnDeeper:
*********** / |<*/parent                                                                                         :3_2:UnDeeper:
************ > |<*/recurse                                                                                      :3_2:UnDeeper:
************ > |<*/recurse matched 3 UnDeepers                                                                :3_2:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper UnDeeper Unless
|<*/parent> VALUE: ((Unless,-3),[])

*********** \ |<*/parent has returned (Unless,-3)                                                              :3_2:GoDeeper:
*********** > aNLK: slMultiTerm is ["an NDB"]                                                                  :3_2:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

********** > /*= lookAhead failed, delegating to plain /+=                                                          :2_4:GoDeeper:
********** / aboveNextLineKeyword                                                                                    :2_4:Other "an N:
*********** / expectUnDeepers                                                                                       :2_4:Other "an N:
************ > ignoring ["an NDB"]                                                                              :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                        :2_4:Other "an N:
*********** > aNLK: determined undp_count = 3                                                                       :2_4:Other "an N:
*********** > ->| trying to consume 1 GoDeepers                                                                     :2_4:Other "an N:
*********** / $*|                                                                                                   :2_4:Other "an N:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                               :2_4:Other "an N:
aboveNextLineKeyword> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected Other "an NDB"
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                           :2_4:Other "an N:
********** / aboveNextLineKeyword                                                                                 :3_2:UnDeeper:
*********** / expectUnDeepers                                                                                    :3_2:UnDeeper:
************ > ignoring []                                                                                      :3_2:UnDeeper:
************ > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                                :3_1:Unless:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

*********** \ expectUnDeepers has returned 3                                                                     :3_2:UnDeeper:
*********** > aNLK: determined undp_count = 3                                                                    :3_2:UnDeeper:
*********** > ->| trying to consume 1 GoDeepers                                                                  :3_2:UnDeeper:
*********** / $*|                                                                                                :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

*********** \ $*| has returned ((),0)                                                                            :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********** > /*= lookAhead failed, delegating to plain /+=                                                        :3_2:UnDeeper:
pre part> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pre part> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

$*|> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
$*|> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

withPreOnly> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
withPreOnly> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pBSR> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

****** / Otherwise                                                                                                 :2_1:If:
Otherwise> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected If
Otherwise> expecting Otherwise

whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
whenCase> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Decide or Define

pHornlike/ambitious> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected If
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:If:
****** / manyIndentation/leaf?                                                                                     :2_1:If:
******* / relPredNextlineWhen                                                                                     :2_1:If:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:If:
********* / optIndentedTuple                                                                                    :2_1:If:
********** / optIndented                                                                                       :2_1:If:
*********** / pRelPred                                                                                        :2_1:If:
************ / slRelPred                                                                                     :2_1:If:
************* / nested simpleHorn                                                                           :2_1:If:
************** > |^|                                                                                       :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:If:
************** / $*|                                                                                       :2_1:If:
*************** / slAKA                                                                                   :2_1:If:
**************** / $*|                                                                                   :2_1:If:
***************** / slAKA base                                                                          :2_1:If:
****************** / slMultiTerm                                                                       :2_1:If:
******************* / someSL                                                                          :2_1:If:
******************** / pNumAsText                                                                    :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected If
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected If
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected If
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected If
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected If
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:If:
******** / $*|                                                                                                   :2_1:If:
********* / slRelPred                                                                                           :2_1:If:
********** / nested simpleHorn                                                                                 :2_1:If:
*********** > |^|                                                                                             :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected If
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected If
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slMultiTerm                                                                                   :2_1:If:
************* / someSL                                                                                      :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected If
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:If:
*********** / $*|                                                                                             :2_1:If:
************ / slAKA                                                                                         :2_1:If:
************* / $*|                                                                                         :2_1:If:
************** / slAKA base                                                                                :2_1:If:
*************** / slMultiTerm                                                                             :2_1:If:
**************** / someSL                                                                                :2_1:If:
***************** / pNumAsText                                                                          :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting TNumber 1234

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

RPMT> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected If
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected If
slRelPred> expecting Other text or TNumber 1234

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected If
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:If:
******* / someIndentation                                                                                         :2_1:If:
******** / myindented: consuming GoDeeper                                                                        :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected If
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=14:
pHornlike / permute> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pHornlike / permute> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

pHornlike> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=14:
pHornlike> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pHornlike> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better

*** / pRuleLabel                                                                                                      :2_1:If:
**** / $>|                                                                                                           :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:If:
**** / myindented: consuming GoDeeper                                                                                :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected If
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=14:
pRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better
pRule> aNLK: expecting depth 3 but the cursor seems to be placed such that we have 2; a different backtrack will probably fare better


PDPA
  pdpadbno-7 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-7
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Nothing, lest = Nothing, rlabel = Just ("\167",2,"Notify Individuals"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}], defaults = [], symtab = []},Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["the Notifiable Individuals"] RPis (All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected If
       expecting end of input
       §§                                                 Notify Individuals                                                                                                                                                                                         
       ✳ IF                                               TRUE                                               it is                                              an NDB                                                                                               
       UNLESS                                             FALSE                                              you are a Public Agency                                                                                                                                 
       PARTY                                              You                                                                                                                                                                                                        
       MUST                                                                                                  WITHIN                                             3                                                  days                                              
       ➔                                                                                                     NOTIFY                                             each of the Notifiable Individuals                                                                   
                                                                                                             in                                                 any manner that is reasonable in the circumstances                                                   
                                                                                                             with                                               a message obeying a certain format                                                                   
       WHERE                                              the Notifiable Individuals                                                                                                                                                                                 
                                                          MEANS                                              the set of individuals affected by the NDB                                                                                                              
                                                                                                             LESS                                               the individuals who are deemed                     Unlikely                                          
                                                                                                             LESS                                               the individuals on                                 the PDPC Exclusion List                           
                                                                                                             LESS                                               the individuals on                                 the LEA Exclusion List                            
                                                                                                                                                                                                                                                                     
       

  To rerun use: --match "/PDPA/pdpadbno-7/"

Randomized with seed 486115198

Finished in 0.2109 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

