* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-7/)

* Tokens
§§ ( "Notify Individuals" ) IF
    (
        ( "it is" ( "an NDB" ) )
    ) UNLESS ( ( "you are a Public Agency" ) ) PARTY ( "You" ) MUST
    (
        ( BEFORE
            ( 3 ( "days" ) )
        )
    ) DO
    (
        ( "NOTIFY" ( "each of the Notifiable Individuals" ) "in" ( "any manner that is reasonable in the circumstances" ) "with" ( "a message obeying a certain format" ) )
    ) WHERE
    ( "the Notifiable Individuals" MEANS
        ( "the set of individuals affected by the NDB" LESS
            ( "the individuals who are deemed" ( "Unlikely" ) ) LESS
            ( "the individuals on" ( "the PDPC Exclusion List" ) ) LESS
            ( "the individuals on" ( "the LEA Exclusion List" ) )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected IF
someDeep first part calls base directly> expecting Other text

someDeep> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected IF
someDeep> expecting Other text

pRegRuleSugary> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected IF
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "you are a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p> MATCH (COK): "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p> MATCH (COK): ( "you are a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=19:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [Every,Party,TokAll]> MATCH (COK): PARTY ( "You" )
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected MUST
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                          :5_3:GoDeeper:
*********** / |>>/recurse                                                                                         :5_3:Before:
|>>/recurse> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

*********** / |>>/base                                                                                            :5_3:Before:
************ / pTemporal/eventually                                                                              :5_3:Before:
pTemporal/eventually> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

************ / pTemporal/specifically                                                                            :5_3:Before:
************* / $>|                                                                                             :5_3:Before:
$>|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************* \ $>| has returned Before                                                                          :5_4:GoDeeper:
************* / |>>/recurse                                                                                      :5_4:GoDeeper:
************** / |>>/recurse                                                                                     :5_4:TNumber 3:
|>>/recurse> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected 3
|>>/recurse> expecting (

************** / |>>/base                                                                                        :5_4:TNumber 3:
*************** > |>>/base got Just 3                                                                            :5_5:GoDeeper:
|>>/base> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/base> MATCH (COK): 3
|>>/base> VALUE: ((Just 3,0),[])

************** \ |>>/base has returned (Just 3,0)                                                                 :5_5:GoDeeper:
|>>/recurse> IN: ( 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( " <…>
|>>/recurse> MATCH (COK): ( 3
|>>/recurse> VALUE: ((Just 3,1),[])

************* \ |>>/recurse has returned (Just 3,1)                                                                :5_5:GoDeeper:
************* / |>| calling $>>                                                                                    :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "days:
|>>/recurse> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

*************** / |>>/base                                                                                        :5_5:Other "days:
**************** > |>>/base got "days"                                                                      :6_2:UnDeeper:
|>>/base> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

*************** \ |>>/base has returned ("days",0)                                                           :6_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************** \ |>>/recurse has returned ("days",1)                                                          :6_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************* \ |>| calling $>> has returned ("days",1)                                                        :6_2:UnDeeper:
************* / undeepers                                                                                      :6_2:UnDeeper:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                       :6_2:UnDeeper:
************** > sameLine: success!                                                                               :6_4:UnDeeper:
undeepers> IN: ) ) ) ) DO ( ( "NOTIFY" ( "each of the N <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                          :6_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 3 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************ \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")                :6_4:UnDeeper:
************ > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                                :6_4:UnDeeper:
|>>/base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/base> MATCH (COK): BEFORE ( 3 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

*********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                     :6_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                    :6_4:UnDeeper:
|>>/recurse> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>>/recurse> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                      :6_4:UnDeeper:
|>| calling $>>> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>| calling $>>> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:Do:
undeepers> IN: ) ) DO ( ( "NOTIFY" ( "each of the Notif <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:Do:
pDT> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDT> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=35:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=35:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=35:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=35:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :6_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :6_3:GoDeeper:
***************** / expression                                                                             :6_3:GoDeeper:
****************** / labelPrefix                                                                          :6_3:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=37:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "NOTI:
********************** / manyIndentation/leaf?                                                         :6_3:Other "NOTI:
*********************** / expression                                                                  :6_3:Other "NOTI:
************************ / labelPrefix                                                               :6_3:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************ \ labelPrefix has returned "NOTIFY"                                          :6_4:GoDeeper:
************************ / term p                                                                     :6_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :6_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :6_4:GoDeeper:
*************************** / someIndentation                                                      :6_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "each of the Notifiable Individuals" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :6_4:Other "each:
**************************** / manyIndentation/leaf?                                               :6_4:Other "each:
***************************** / expression                                                        :6_4:Other "each:
****************************** / labelPrefix                                                     :6_4:Other "each:
labelPrefix> IN: "each of the Notifiable Individuals" ) " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected )

****************************** / term p                                                          :6_4:Other "each:
******************************* / term p/notLabelTerm                                           :6_4:Other "each:
******************************** / term p/2:someIndentation expr p                             :6_4:Other "each:
********************************* / someIndentation                                           :6_4:Other "each:
********************************** / myindented: consuming GoDeeper                          :6_4:Other "each:
myindented: consuming GoDeeper> IN: "each of the Notifiable Individuals" ) " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "each of the Notifiable Individuals" ) " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected "each of the Notifiable Individuals"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "each of the Notifiable Individuals" ) " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :6_4:Other "each:
********************************* / pParamText                                                :6_4:Other "each:
********************************** / pParamText(flat) first line: pKeyValues                 :6_4:Other "each:
*********************************** / pKeyValuesAka                                         :6_4:Other "each:
************************************ / slAKA                                               :6_4:Other "each:
************************************* / $*|                                               :6_4:Other "each:
************************************** / slAKA base                                      :6_4:Other "each:
*************************************** / slKeyValues                                   :6_4:Other "each:
**************************************** / $*|                                         :6_4:Other "each:
***************************************** / someSL                                    :6_4:Other "each:
someSL> IN: "each of the Notifiable Individuals" ) " <…>
someSL> MATCH (COK): "each of the Notifiable Individuals"
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

***************************************** \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

**************************************** \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / |?| optional something                     :7_4:UnDeeper:
****************************************** / |>>/recurse                              :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** / |>>/base                                 :7_4:UnDeeper:
******************************************* / slTypeSig                              :7_4:UnDeeper:
******************************************** / $>|                                  :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "in" ( "any manner that is reasonable  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
***************************************** > |>>/base got Nothing                       :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************************** \ |>>/base has returned (Nothing,0)            :7_4:UnDeeper:
slKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
slKeyValues> MATCH (COK): "each of the Notifiable Individuals"
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*************************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: "each of the Notifiable Individuals" ) " <…>
slAKA base> MATCH (COK): "each of the Notifiable Individuals"
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional akapart                           :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / PAKA/akapart                               :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
******************************************* / Aka Token                              :7_4:UnDeeper:
Aka Token> IN: ) "in" ( "any manner that is reasonable  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "in" ( "any manner that is reasonable  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0)  :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional typically                         :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / typically                                  :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "in" ( "any manner that is reasonable  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
************************************* > pAKA: entityalias = Nothing                        :7_4:UnDeeper:
slAKA> IN: "each of the Notifiable Individuals" ) " <…>
slAKA> MATCH (COK): "each of the Notifiable Individuals"
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************ \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************ / undeepers                                            :7_4:UnDeeper:
************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
************************************* > sameLine: success!                                 :7_4:UnDeeper:
undeepers> IN: ) "in" ( "any manner that is reasonable  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************ \ undeepers has returned ()                            :7_4:UnDeeper:
pKeyValuesAka> IN: "each of the Notifiable Individuals" ) " <…>
pKeyValuesAka> MATCH (COK): "each of the Notifiable Individuals"
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

*********************************** \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "each of the Notifiable Individuals"
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

********************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
********************************** / pParamText(flat) subsequent lines: sameMany pKeyValues   :7_4:UnDeeper:
*********************************** / manyIndentation/leaf?                                  :7_4:UnDeeper:
************************************ / sameMany                                             :7_4:UnDeeper:
************************************* / pKeyValuesAka                                      :7_4:UnDeeper:
************************************** / slAKA                                            :7_4:UnDeeper:
*************************************** / $*|                                            :7_4:UnDeeper:
**************************************** / slAKA base                                   :7_4:UnDeeper:
***************************************** / slKeyValues                                :7_4:UnDeeper:
****************************************** / $*|                                      :7_4:UnDeeper:
******************************************* / someSL                                 :7_4:UnDeeper:
******************************************** / pNumAsText                           :7_4:UnDeeper:
pNumAsText> IN: ) "in" ( "any manner that is reasonable  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "in" ( "any manner that is reasonable  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "in" ( "any manner that is reasonable  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "in" ( "any manner that is reasonable  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************ \ sameMany has returned []                             :7_4:UnDeeper:
manyIndentation/leaf?> IN: ) "in" ( "any manner that is reasonable  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************************** \ manyIndentation/leaf? has returned []                  :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: "each of the Notifiable Individuals" ) " <…>
pParamText> MATCH (COK): "each of the Notifiable Individuals"
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

********************************* \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: "each of the Notifiable Individuals" ) " <…>
term p/3:plain p> MATCH (COK): "each of the Notifiable Individuals"
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: "each of the Notifiable Individuals" ) " <…>
term p/notLabelTerm> MATCH (COK): "each of the Notifiable Individuals"
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: "each of the Notifiable Individuals" ) " <…>
term p> MATCH (COK): "each of the Notifiable Individuals"
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

****************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
****************************** / binary(Or)                                                       :7_4:UnDeeper:
binary(Or)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                      :7_4:UnDeeper:
binary(And)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                  :7_4:UnDeeper:
binary(SetLess)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                  :7_4:UnDeeper:
binary(SetPlus)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "each of the Notifiable Individuals" ) " <…>
expression> MATCH (COK): "each of the Notifiable Individuals"
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

***************************** \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "each of the Notifiable Individuals" ) " <…>
manyIndentation/leaf?> MATCH (COK): "each of the Notifiable Individuals"
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) "in" ( "any manner that is reasonable  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper              :7_3:Other "in":
someIndentation> IN: ( "each of the Notifiable Individuals" ) <…>
someIndentation> MATCH (COK): ( "each of the Notifiable Individuals" )
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: ( "each of the Notifiable Individuals" ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: ( "each of the Notifiable Individuals" ) <…>
term p/notLabelTerm> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: ( "each of the Notifiable Individuals" ) <…>
term p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
************************ / binary(Or)                                                                :7_3:Other "in":
binary(Or)> IN: "in" ( "any manner that is reasonable in <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected "in"
binary(Or)> expecting OR

************************ / binary(And)                                                               :7_3:Other "in":
binary(And)> IN: "in" ( "any manner that is reasonable in <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected "in"
binary(And)> expecting AND

************************ / binary(SetLess)                                                           :7_3:Other "in":
binary(SetLess)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected "in"
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                           :7_3:Other "in":
binary(SetPlus)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected "in"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

*********************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
********************** / myindented: consuming UnDeeper                                                :7_3:Other "in":
myindented: consuming UnDeeper> IN: "in" ( "any manner that is reasonable in <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected "in"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected "in"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

******************** / term p/3:plain p                                                                 :6_3:GoDeeper:
********************* / pParamText                                                                     :6_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :6_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :6_3:GoDeeper:
************************ / slAKA                                                                    :6_3:GoDeeper:
************************* / $*|                                                                    :6_3:GoDeeper:
************************** / slAKA base                                                           :6_3:GoDeeper:
*************************** / slKeyValues                                                        :6_3:GoDeeper:
**************************** / $*|                                                              :6_3:GoDeeper:
***************************** / someSL                                                         :6_3:GoDeeper:
****************************** / pNumAsText                                                   :6_3:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=37:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=37:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=37:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=37:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=37:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected "in"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected "in"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected "in"
expression> expecting expression

manyIndentation/leaf?> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=42:
manyIndentation/leaf?> unexpected "in"
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :6_3:Other "NOTI:
****************** / manyIndentation/leaf?                                                                 :6_3:Other "NOTI:
******************* / expression                                                                          :6_3:Other "NOTI:
******************** / labelPrefix                                                                       :6_3:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

******************** \ labelPrefix has returned "NOTIFY"                                                  :6_4:GoDeeper:
******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "each of the Notifiable Individuals" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "each:
************************ / manyIndentation/leaf?                                                       :6_4:Other "each:
************************* / expression                                                                :6_4:Other "each:
************************** / labelPrefix                                                             :6_4:Other "each:
labelPrefix> IN: "each of the Notifiable Individuals" ) " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected )

************************** / term p                                                                  :6_4:Other "each:
*************************** / term p/notLabelTerm                                                   :6_4:Other "each:
**************************** / term p/2:someIndentation expr p                                     :6_4:Other "each:
***************************** / someIndentation                                                   :6_4:Other "each:
****************************** / myindented: consuming GoDeeper                                  :6_4:Other "each:
myindented: consuming GoDeeper> IN: "each of the Notifiable Individuals" ) " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "each of the Notifiable Individuals" ) " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected "each of the Notifiable Individuals"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "each of the Notifiable Individuals" ) " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting (

**************************** / term p/3:plain p                                                    :6_4:Other "each:
***************************** / pParamText                                                        :6_4:Other "each:
****************************** / pParamText(flat) first line: pKeyValues                         :6_4:Other "each:
******************************* / pKeyValuesAka                                                 :6_4:Other "each:
******************************** / slAKA                                                       :6_4:Other "each:
********************************* / $*|                                                       :6_4:Other "each:
********************************** / slAKA base                                              :6_4:Other "each:
*********************************** / slKeyValues                                           :6_4:Other "each:
************************************ / $*|                                                 :6_4:Other "each:
************************************* / someSL                                            :6_4:Other "each:
someSL> IN: "each of the Notifiable Individuals" ) " <…>
someSL> MATCH (COK): "each of the Notifiable Individuals"
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************* \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************ \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / |?| optional something                             :7_4:UnDeeper:
************************************** / |>>/recurse                                      :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                         :7_4:UnDeeper:
*************************************** / slTypeSig                                      :7_4:UnDeeper:
**************************************** / $>|                                          :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "in" ( "any manner that is reasonable  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)    :7_4:UnDeeper:
************************************* > |>>/base got Nothing                               :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :7_4:UnDeeper:
slKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
slKeyValues> MATCH (COK): "each of the Notifiable Individuals"
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*********************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: "each of the Notifiable Individuals" ) " <…>
slAKA base> MATCH (COK): "each of the Notifiable Individuals"
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional akapart                                   :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / PAKA/akapart                                       :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
*************************************** / Aka Token                                      :7_4:UnDeeper:
Aka Token> IN: ) "in" ( "any manner that is reasonable  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "in" ( "any manner that is reasonable  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)          :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional typically                                 :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / typically                                          :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "in" ( "any manner that is reasonable  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional typically> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)        :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
********************************* > pAKA: entityalias = Nothing                                :7_4:UnDeeper:
slAKA> IN: "each of the Notifiable Individuals" ) " <…>
slAKA> MATCH (COK): "each of the Notifiable Individuals"
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

******************************** \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
******************************** / undeepers                                                    :7_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
********************************* > sameLine: success!                                         :7_4:UnDeeper:
undeepers> IN: ) "in" ( "any manner that is reasonable  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :7_4:UnDeeper:
pKeyValuesAka> IN: "each of the Notifiable Individuals" ) " <…>
pKeyValuesAka> MATCH (COK): "each of the Notifiable Individuals"
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

******************************* \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "each of the Notifiable Individuals"
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

****************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
****************************** / pParamText(flat) subsequent lines: sameMany pKeyValues           :7_4:UnDeeper:
******************************* / manyIndentation/leaf?                                          :7_4:UnDeeper:
******************************** / sameMany                                                     :7_4:UnDeeper:
********************************* / pKeyValuesAka                                              :7_4:UnDeeper:
********************************** / slAKA                                                    :7_4:UnDeeper:
*********************************** / $*|                                                    :7_4:UnDeeper:
************************************ / slAKA base                                           :7_4:UnDeeper:
************************************* / slKeyValues                                        :7_4:UnDeeper:
************************************** / $*|                                              :7_4:UnDeeper:
*************************************** / someSL                                         :7_4:UnDeeper:
**************************************** / pNumAsText                                   :7_4:UnDeeper:
pNumAsText> IN: ) "in" ( "any manner that is reasonable  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "in" ( "any manner that is reasonable  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "in" ( "any manner that is reasonable  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "in" ( "any manner that is reasonable  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************************** \ sameMany has returned []                                     :7_4:UnDeeper:
manyIndentation/leaf?> IN: ) "in" ( "any manner that is reasonable  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************************* \ manyIndentation/leaf? has returned []                          :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: "each of the Notifiable Individuals" ) " <…>
pParamText> MATCH (COK): "each of the Notifiable Individuals"
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

***************************** \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: "each of the Notifiable Individuals" ) " <…>
term p/3:plain p> MATCH (COK): "each of the Notifiable Individuals"
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: "each of the Notifiable Individuals" ) " <…>
term p/notLabelTerm> MATCH (COK): "each of the Notifiable Individuals"
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: "each of the Notifiable Individuals" ) " <…>
term p> MATCH (COK): "each of the Notifiable Individuals"
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************** / binary(Or)                                                               :7_4:UnDeeper:
binary(Or)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** / binary(And)                                                              :7_4:UnDeeper:
binary(And)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected )
binary(And)> expecting AND

************************** / binary(SetLess)                                                          :7_4:UnDeeper:
binary(SetLess)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** / binary(SetPlus)                                                          :7_4:UnDeeper:
binary(SetPlus)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "each of the Notifiable Individuals" ) " <…>
expression> MATCH (COK): "each of the Notifiable Individuals"
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "each of the Notifiable Individuals" ) " <…>
manyIndentation/leaf?> MATCH (COK): "each of the Notifiable Individuals"
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************ / myindented: consuming UnDeeper                                               :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) "in" ( "any manner that is reasonable  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented: consuming UnDeeper has returned UnDeeper                      :7_3:Other "in":
someIndentation> IN: ( "each of the Notifiable Individuals" ) <…>
someIndentation> MATCH (COK): ( "each of the Notifiable Individuals" )
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*********************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: ( "each of the Notifiable Individuals" ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: ( "each of the Notifiable Individuals" ) <…>
term p/notLabelTerm> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: ( "each of the Notifiable Individuals" ) <…>
term p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
******************** / binary(Or)                                                                        :7_3:Other "in":
binary(Or)> IN: "in" ( "any manner that is reasonable in <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected "in"
binary(Or)> expecting OR

******************** / binary(And)                                                                       :7_3:Other "in":
binary(And)> IN: "in" ( "any manner that is reasonable in <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected "in"
binary(And)> expecting AND

******************** / binary(SetLess)                                                                   :7_3:Other "in":
binary(SetLess)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected "in"
binary(SetLess)> expecting LESS

******************** / binary(SetPlus)                                                                   :7_3:Other "in":
binary(SetPlus)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected "in"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

******************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

****************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
****************** / myindented: consuming UnDeeper                                                        :7_3:Other "in":
myindented: consuming UnDeeper> IN: "in" ( "any manner that is reasonable in <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected "in"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, or PLUS

manyIndentation/deeper; calling someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=42:
manyIndentation/deeper; calling someIndentation> unexpected "in"
manyIndentation/deeper; calling someIndentation> expecting ), AND, LESS, OR, or PLUS

someIndentation> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, PLUS, or expression

term p/2:someIndentation expr p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected "in"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, PLUS, or expression

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=36:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=36:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=36:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected "in"
term p/notLabelTerm> expecting ), AND, LESS, OR, PLUS, or expression

term p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected "in"
term p> expecting ), AND, LESS, OR, PLUS, or expression

expression> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected "in"
expression> expecting expression

expr pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=42:
expr pParamText> unexpected "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=42:
dBoolStructP calling exprP> unexpected "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=42:
pAction calling dBoolStructP> unexpected "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=42:
pDoAction/pAction> unexpected "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=42:
regulative permutation with deontic-temporal> unexpected "in"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "you are a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p> MATCH (COK): "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p> MATCH (COK): ( "you are a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* / pTemporal/eventually                                                                                    :4_1:Party:
pTemporal/eventually> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:Party:
pTemporal/vaguely> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [Every,Party,TokAll]> MATCH (COK): PARTY ( "You" )
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected MUST
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / pTemporal/eventually                                                                                    :5_1:Must:
pTemporal/eventually> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=23:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=23:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :5_1:Must:
pTemporal/vaguely> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=23:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :5_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :5_3:GoDeeper:
***************** / expression                                                                             :5_3:GoDeeper:
****************** / labelPrefix                                                                          :5_3:GoDeeper:
labelPrefix> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Before:
********************** / manyIndentation/leaf?                                                         :5_3:Before:
*********************** / expression                                                                  :5_3:Before:
************************ / labelPrefix                                                               :5_3:Before:
labelPrefix> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

************************ / term p                                                                    :5_3:Before:
************************* / term p/notLabelTerm                                                     :5_3:Before:
************************** / term p/2:someIndentation expr p                                       :5_3:Before:
*************************** / someIndentation                                                     :5_3:Before:
**************************** / myindented: consuming GoDeeper                                    :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :5_3:Before:
*************************** / pParamText                                                          :5_3:Before:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Before:
***************************** / pKeyValuesAka                                                   :5_3:Before:
****************************** / slAKA                                                         :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / slAKA base                                                :5_3:Before:
********************************* / slKeyValues                                             :5_3:Before:
********************************** / $*|                                                   :5_3:Before:
*********************************** / someSL                                              :5_3:Before:
************************************ / pNumAsText                                        :5_3:Before:
pNumAsText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

********************** / manyIndentation/deeper; calling someIndentation                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

******************** / term p/3:plain p                                                                 :5_3:GoDeeper:
********************* / pParamText                                                                     :5_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :5_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :5_3:GoDeeper:
************************ / slAKA                                                                    :5_3:GoDeeper:
************************* / $*|                                                                    :5_3:GoDeeper:
************************** / slAKA base                                                           :5_3:GoDeeper:
*************************** / slKeyValues                                                        :5_3:GoDeeper:
**************************** / $*|                                                              :5_3:GoDeeper:
***************************** / someSL                                                         :5_3:GoDeeper:
****************************** / pNumAsText                                                   :5_3:GoDeeper:
pNumAsText> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=25:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=25:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=25:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=25:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :5_3:Before:
****************** / manyIndentation/leaf?                                                                 :5_3:Before:
******************* / expression                                                                          :5_3:Before:
******************** / labelPrefix                                                                       :5_3:Before:
labelPrefix> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

******************** / term p                                                                            :5_3:Before:
********************* / term p/notLabelTerm                                                             :5_3:Before:
********************** / term p/2:someIndentation expr p                                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

********************** / term p/3:plain p                                                              :5_3:Before:
*********************** / pParamText                                                                  :5_3:Before:
************************ / pParamText(flat) first line: pKeyValues                                   :5_3:Before:
************************* / pKeyValuesAka                                                           :5_3:Before:
************************** / slAKA                                                                 :5_3:Before:
*************************** / $*|                                                                 :5_3:Before:
**************************** / slAKA base                                                        :5_3:Before:
***************************** / slKeyValues                                                     :5_3:Before:
****************************** / $*|                                                           :5_3:Before:
******************************* / someSL                                                      :5_3:Before:
******************************** / pNumAsText                                                :5_3:Before:
pNumAsText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                       :5_3:Before:
******************* / someIndentation                                                                     :5_3:Before:
******************** / myindented: consuming GoDeeper                                                    :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

manyIndentation/deeper; calling someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting ( or expression

someIndentation> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=24:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=24:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=24:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=24:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

expr pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=26:
expr pParamText> unexpected BEFORE
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=26:
dBoolStructP calling exprP> unexpected BEFORE
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=26:
pAction calling dBoolStructP> unexpected BEFORE
pAction calling dBoolStructP> expecting expression

pDA> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=26:
pDA> unexpected BEFORE
pDA> expecting expression

regulative permutation with deontic-action> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=26:
regulative permutation with deontic-action> unexpected BEFORE
regulative permutation with deontic-action> expecting (, WHICH, WHO, WHOSE, or expression

permutationsReg> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=42:
permutationsReg> unexpected "in"
permutationsReg> expecting expression

pRegRuleNormal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=42:
pRegRuleNormal> unexpected "in"
pRegRuleNormal> expecting expression

pRegRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRegRule> MATCH (CERR): §§ ( "Notify Individuals" )
pRegRule> ERROR:
pRegRule> offset=42:
pRegRule> unexpected "in"
pRegRule> expecting expression

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected IF
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected IF
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pTypeDefinition> MATCH (CERR): §§ ( "Notify Individuals" )
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected IF
pTypeDefinition> expecting DEFINE, GIVEN, or UPON

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IF
pNumAsText> expecting number

someSL> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IF
someSL> expecting other text or number

slMultiTerm> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IF
slMultiTerm> expecting other text or number

slAKA base> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected IF
slAKA base> expecting other text or number

$*|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IF
$*|> expecting other text or number

slAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected IF
slAKA> expecting other text or number

pAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected IF
pAKA> expecting other text or number

pMultiTermAka> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected IF
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected IF
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected IF
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IF
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected IF
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected IF
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pConstitutiveRule> MATCH (CERR): §§ ( "Notify Individuals" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected IF
pConstitutiveRule> expecting ( or other text or number

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected IF
pExpect> expecting EXPECT

pScenarioRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pScenarioRule> MATCH (CERR): §§ ( "Notify Individuals" )
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected IF
pScenarioRule> expecting EXPECT or GIVEN

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******** / |>>/base                                                                                                :1_2:Other "Noti:
********* > |>>/base got "Notify Individuals"                                                                      :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******** \ |>>/base has returned ("Notify Individuals",0)                                                           :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

******* \ |>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

****** \ |>| calling $>> has returned ("Notify Individuals",1)                                                        :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                     :2_1:If:
pSrcRef> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pSrcRef> MATCH (COK): §§ ( "Notify Individuals" )
pSrcRef> VALUE: ((Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenMeansIf> MATCH (COK): IF
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
whenCase> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenCase> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
whenCase> VALUE: (Just (Leaf (RPMT ["it is","an NDB"])),[])

***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike / permute> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) )
pHornlike / permute> ERROR:
pHornlike / permute> offset=13:
pHornlike / permute> unexpected UNLESS
pHornlike / permute> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

pHornlike> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pHornlike> MATCH (CERR): §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pHornlike> ERROR:
pHornlike> offset=13:
pHornlike> unexpected UNLESS
pHornlike> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
|>| calling $>>> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>| calling $>>> MATCH (COK): ( "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

**** \ |>| calling $>> has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:If:
undeepers> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (COK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

*** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                         :2_1:If:
pRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRule> MATCH (COK): §§ ( "Notify Individuals" )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:If:
** / pRule                                                                                                             :2_1:If:
*** / pRegRule                                                                                                        :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected IF
someDeep first part calls base directly> expecting Other text

someDeep> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected IF
someDeep> expecting Other text

pRegRuleSugary> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected IF
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "you are a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p> MATCH (COK): "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p> MATCH (COK): ( "you are a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=19:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [Every,Party,TokAll]> MATCH (COK): PARTY ( "You" )
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected MUST
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                          :5_3:GoDeeper:
*********** / |>>/recurse                                                                                         :5_3:Before:
|>>/recurse> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

*********** / |>>/base                                                                                            :5_3:Before:
************ / pTemporal/eventually                                                                              :5_3:Before:
pTemporal/eventually> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

************ / pTemporal/specifically                                                                            :5_3:Before:
************* / $>|                                                                                             :5_3:Before:
$>|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************* \ $>| has returned Before                                                                          :5_4:GoDeeper:
************* / |>>/recurse                                                                                      :5_4:GoDeeper:
************** / |>>/recurse                                                                                     :5_4:TNumber 3:
|>>/recurse> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected 3
|>>/recurse> expecting (

************** / |>>/base                                                                                        :5_4:TNumber 3:
*************** > |>>/base got Just 3                                                                            :5_5:GoDeeper:
|>>/base> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/base> MATCH (COK): 3
|>>/base> VALUE: ((Just 3,0),[])

************** \ |>>/base has returned (Just 3,0)                                                                 :5_5:GoDeeper:
|>>/recurse> IN: ( 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( " <…>
|>>/recurse> MATCH (COK): ( 3
|>>/recurse> VALUE: ((Just 3,1),[])

************* \ |>>/recurse has returned (Just 3,1)                                                                :5_5:GoDeeper:
************* / |>| calling $>>                                                                                    :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "days:
|>>/recurse> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

*************** / |>>/base                                                                                        :5_5:Other "days:
**************** > |>>/base got "days"                                                                      :6_2:UnDeeper:
|>>/base> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

*************** \ |>>/base has returned ("days",0)                                                           :6_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************** \ |>>/recurse has returned ("days",1)                                                          :6_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************* \ |>| calling $>> has returned ("days",1)                                                        :6_2:UnDeeper:
************* / undeepers                                                                                      :6_2:UnDeeper:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                       :6_2:UnDeeper:
************** > sameLine: success!                                                                               :6_4:UnDeeper:
undeepers> IN: ) ) ) ) DO ( ( "NOTIFY" ( "each of the N <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                          :6_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 3 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************ \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")                :6_4:UnDeeper:
************ > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                                :6_4:UnDeeper:
|>>/base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/base> MATCH (COK): BEFORE ( 3 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

*********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                     :6_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                    :6_4:UnDeeper:
|>>/recurse> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>>/recurse> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                      :6_4:UnDeeper:
|>| calling $>>> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>| calling $>>> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:Do:
undeepers> IN: ) ) DO ( ( "NOTIFY" ( "each of the Notif <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:Do:
pDT> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDT> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=35:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=35:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=35:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=35:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :6_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :6_3:GoDeeper:
***************** / expression                                                                             :6_3:GoDeeper:
****************** / labelPrefix                                                                          :6_3:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=37:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "NOTI:
********************** / manyIndentation/leaf?                                                         :6_3:Other "NOTI:
*********************** / expression                                                                  :6_3:Other "NOTI:
************************ / labelPrefix                                                               :6_3:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************ \ labelPrefix has returned "NOTIFY"                                          :6_4:GoDeeper:
************************ / term p                                                                     :6_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :6_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :6_4:GoDeeper:
*************************** / someIndentation                                                      :6_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "each of the Notifiable Individuals" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :6_4:Other "each:
**************************** / manyIndentation/leaf?                                               :6_4:Other "each:
***************************** / expression                                                        :6_4:Other "each:
****************************** / labelPrefix                                                     :6_4:Other "each:
labelPrefix> IN: "each of the Notifiable Individuals" ) " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected )

****************************** / term p                                                          :6_4:Other "each:
******************************* / term p/notLabelTerm                                           :6_4:Other "each:
******************************** / term p/2:someIndentation expr p                             :6_4:Other "each:
********************************* / someIndentation                                           :6_4:Other "each:
********************************** / myindented: consuming GoDeeper                          :6_4:Other "each:
myindented: consuming GoDeeper> IN: "each of the Notifiable Individuals" ) " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "each of the Notifiable Individuals" ) " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected "each of the Notifiable Individuals"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "each of the Notifiable Individuals" ) " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :6_4:Other "each:
********************************* / pParamText                                                :6_4:Other "each:
********************************** / pParamText(flat) first line: pKeyValues                 :6_4:Other "each:
*********************************** / pKeyValuesAka                                         :6_4:Other "each:
************************************ / slAKA                                               :6_4:Other "each:
************************************* / $*|                                               :6_4:Other "each:
************************************** / slAKA base                                      :6_4:Other "each:
*************************************** / slKeyValues                                   :6_4:Other "each:
**************************************** / $*|                                         :6_4:Other "each:
***************************************** / someSL                                    :6_4:Other "each:
someSL> IN: "each of the Notifiable Individuals" ) " <…>
someSL> MATCH (COK): "each of the Notifiable Individuals"
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

***************************************** \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

**************************************** \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / |?| optional something                     :7_4:UnDeeper:
****************************************** / |>>/recurse                              :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** / |>>/base                                 :7_4:UnDeeper:
******************************************* / slTypeSig                              :7_4:UnDeeper:
******************************************** / $>|                                  :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "in" ( "any manner that is reasonable  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
***************************************** > |>>/base got Nothing                       :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************************** \ |>>/base has returned (Nothing,0)            :7_4:UnDeeper:
slKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
slKeyValues> MATCH (COK): "each of the Notifiable Individuals"
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*************************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: "each of the Notifiable Individuals" ) " <…>
slAKA base> MATCH (COK): "each of the Notifiable Individuals"
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional akapart                           :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / PAKA/akapart                               :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
******************************************* / Aka Token                              :7_4:UnDeeper:
Aka Token> IN: ) "in" ( "any manner that is reasonable  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "in" ( "any manner that is reasonable  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0)  :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional typically                         :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / typically                                  :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "in" ( "any manner that is reasonable  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
************************************* > pAKA: entityalias = Nothing                        :7_4:UnDeeper:
slAKA> IN: "each of the Notifiable Individuals" ) " <…>
slAKA> MATCH (COK): "each of the Notifiable Individuals"
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************ \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************ / undeepers                                            :7_4:UnDeeper:
************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
************************************* > sameLine: success!                                 :7_4:UnDeeper:
undeepers> IN: ) "in" ( "any manner that is reasonable  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************ \ undeepers has returned ()                            :7_4:UnDeeper:
pKeyValuesAka> IN: "each of the Notifiable Individuals" ) " <…>
pKeyValuesAka> MATCH (COK): "each of the Notifiable Individuals"
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

*********************************** \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "each of the Notifiable Individuals"
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

********************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
********************************** / pParamText(flat) subsequent lines: sameMany pKeyValues   :7_4:UnDeeper:
*********************************** / manyIndentation/leaf?                                  :7_4:UnDeeper:
************************************ / sameMany                                             :7_4:UnDeeper:
************************************* / pKeyValuesAka                                      :7_4:UnDeeper:
************************************** / slAKA                                            :7_4:UnDeeper:
*************************************** / $*|                                            :7_4:UnDeeper:
**************************************** / slAKA base                                   :7_4:UnDeeper:
***************************************** / slKeyValues                                :7_4:UnDeeper:
****************************************** / $*|                                      :7_4:UnDeeper:
******************************************* / someSL                                 :7_4:UnDeeper:
******************************************** / pNumAsText                           :7_4:UnDeeper:
pNumAsText> IN: ) "in" ( "any manner that is reasonable  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "in" ( "any manner that is reasonable  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "in" ( "any manner that is reasonable  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "in" ( "any manner that is reasonable  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************ \ sameMany has returned []                             :7_4:UnDeeper:
manyIndentation/leaf?> IN: ) "in" ( "any manner that is reasonable  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************************** \ manyIndentation/leaf? has returned []                  :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: "each of the Notifiable Individuals" ) " <…>
pParamText> MATCH (COK): "each of the Notifiable Individuals"
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

********************************* \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: "each of the Notifiable Individuals" ) " <…>
term p/3:plain p> MATCH (COK): "each of the Notifiable Individuals"
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: "each of the Notifiable Individuals" ) " <…>
term p/notLabelTerm> MATCH (COK): "each of the Notifiable Individuals"
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: "each of the Notifiable Individuals" ) " <…>
term p> MATCH (COK): "each of the Notifiable Individuals"
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

****************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
****************************** / binary(Or)                                                       :7_4:UnDeeper:
binary(Or)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                      :7_4:UnDeeper:
binary(And)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                  :7_4:UnDeeper:
binary(SetLess)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                  :7_4:UnDeeper:
binary(SetPlus)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "each of the Notifiable Individuals" ) " <…>
expression> MATCH (COK): "each of the Notifiable Individuals"
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

***************************** \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "each of the Notifiable Individuals" ) " <…>
manyIndentation/leaf?> MATCH (COK): "each of the Notifiable Individuals"
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) "in" ( "any manner that is reasonable  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper              :7_3:Other "in":
someIndentation> IN: ( "each of the Notifiable Individuals" ) <…>
someIndentation> MATCH (COK): ( "each of the Notifiable Individuals" )
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: ( "each of the Notifiable Individuals" ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: ( "each of the Notifiable Individuals" ) <…>
term p/notLabelTerm> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: ( "each of the Notifiable Individuals" ) <…>
term p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
************************ / binary(Or)                                                                :7_3:Other "in":
binary(Or)> IN: "in" ( "any manner that is reasonable in <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected "in"
binary(Or)> expecting OR

************************ / binary(And)                                                               :7_3:Other "in":
binary(And)> IN: "in" ( "any manner that is reasonable in <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected "in"
binary(And)> expecting AND

************************ / binary(SetLess)                                                           :7_3:Other "in":
binary(SetLess)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected "in"
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                           :7_3:Other "in":
binary(SetPlus)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected "in"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

*********************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
********************** / myindented: consuming UnDeeper                                                :7_3:Other "in":
myindented: consuming UnDeeper> IN: "in" ( "any manner that is reasonable in <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected "in"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected "in"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

******************** / term p/3:plain p                                                                 :6_3:GoDeeper:
********************* / pParamText                                                                     :6_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :6_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :6_3:GoDeeper:
************************ / slAKA                                                                    :6_3:GoDeeper:
************************* / $*|                                                                    :6_3:GoDeeper:
************************** / slAKA base                                                           :6_3:GoDeeper:
*************************** / slKeyValues                                                        :6_3:GoDeeper:
**************************** / $*|                                                              :6_3:GoDeeper:
***************************** / someSL                                                         :6_3:GoDeeper:
****************************** / pNumAsText                                                   :6_3:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=37:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=37:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=37:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=37:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=37:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected "in"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected "in"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected "in"
expression> expecting expression

manyIndentation/leaf?> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=42:
manyIndentation/leaf?> unexpected "in"
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :6_3:Other "NOTI:
****************** / manyIndentation/leaf?                                                                 :6_3:Other "NOTI:
******************* / expression                                                                          :6_3:Other "NOTI:
******************** / labelPrefix                                                                       :6_3:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

******************** \ labelPrefix has returned "NOTIFY"                                                  :6_4:GoDeeper:
******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "each of the Notifiable Individuals" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "each:
************************ / manyIndentation/leaf?                                                       :6_4:Other "each:
************************* / expression                                                                :6_4:Other "each:
************************** / labelPrefix                                                             :6_4:Other "each:
labelPrefix> IN: "each of the Notifiable Individuals" ) " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected )

************************** / term p                                                                  :6_4:Other "each:
*************************** / term p/notLabelTerm                                                   :6_4:Other "each:
**************************** / term p/2:someIndentation expr p                                     :6_4:Other "each:
***************************** / someIndentation                                                   :6_4:Other "each:
****************************** / myindented: consuming GoDeeper                                  :6_4:Other "each:
myindented: consuming GoDeeper> IN: "each of the Notifiable Individuals" ) " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "each of the Notifiable Individuals" ) " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected "each of the Notifiable Individuals"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "each of the Notifiable Individuals" ) " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting (

**************************** / term p/3:plain p                                                    :6_4:Other "each:
***************************** / pParamText                                                        :6_4:Other "each:
****************************** / pParamText(flat) first line: pKeyValues                         :6_4:Other "each:
******************************* / pKeyValuesAka                                                 :6_4:Other "each:
******************************** / slAKA                                                       :6_4:Other "each:
********************************* / $*|                                                       :6_4:Other "each:
********************************** / slAKA base                                              :6_4:Other "each:
*********************************** / slKeyValues                                           :6_4:Other "each:
************************************ / $*|                                                 :6_4:Other "each:
************************************* / someSL                                            :6_4:Other "each:
someSL> IN: "each of the Notifiable Individuals" ) " <…>
someSL> MATCH (COK): "each of the Notifiable Individuals"
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************* \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************ \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / |?| optional something                             :7_4:UnDeeper:
************************************** / |>>/recurse                                      :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                         :7_4:UnDeeper:
*************************************** / slTypeSig                                      :7_4:UnDeeper:
**************************************** / $>|                                          :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "in" ( "any manner that is reasonable  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)    :7_4:UnDeeper:
************************************* > |>>/base got Nothing                               :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :7_4:UnDeeper:
slKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
slKeyValues> MATCH (COK): "each of the Notifiable Individuals"
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*********************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: "each of the Notifiable Individuals" ) " <…>
slAKA base> MATCH (COK): "each of the Notifiable Individuals"
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: "each of the Notifiable Individuals" ) " <…>
$*|> MATCH (COK): "each of the Notifiable Individuals"
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional akapart                                   :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / PAKA/akapart                                       :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
*************************************** / Aka Token                                      :7_4:UnDeeper:
Aka Token> IN: ) "in" ( "any manner that is reasonable  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "in" ( "any manner that is reasonable  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)          :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional typically                                 :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / typically                                          :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
$>|> IN: ) "in" ( "any manner that is reasonable  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "in" ( "any manner that is reasonable  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "in" ( "any manner that is reasonable  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional typically> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)        :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: ) "in" ( "any manner that is reasonable  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
********************************* > pAKA: entityalias = Nothing                                :7_4:UnDeeper:
slAKA> IN: "each of the Notifiable Individuals" ) " <…>
slAKA> MATCH (COK): "each of the Notifiable Individuals"
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

******************************** \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
******************************** / undeepers                                                    :7_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
********************************* > sameLine: success!                                         :7_4:UnDeeper:
undeepers> IN: ) "in" ( "any manner that is reasonable  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :7_4:UnDeeper:
pKeyValuesAka> IN: "each of the Notifiable Individuals" ) " <…>
pKeyValuesAka> MATCH (COK): "each of the Notifiable Individuals"
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

******************************* \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "each of the Notifiable Individuals" ) " <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "each of the Notifiable Individuals"
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

****************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
****************************** / pParamText(flat) subsequent lines: sameMany pKeyValues           :7_4:UnDeeper:
******************************* / manyIndentation/leaf?                                          :7_4:UnDeeper:
******************************** / sameMany                                                     :7_4:UnDeeper:
********************************* / pKeyValuesAka                                              :7_4:UnDeeper:
********************************** / slAKA                                                    :7_4:UnDeeper:
*********************************** / $*|                                                    :7_4:UnDeeper:
************************************ / slAKA base                                           :7_4:UnDeeper:
************************************* / slKeyValues                                        :7_4:UnDeeper:
************************************** / $*|                                              :7_4:UnDeeper:
*************************************** / someSL                                         :7_4:UnDeeper:
**************************************** / pNumAsText                                   :7_4:UnDeeper:
pNumAsText> IN: ) "in" ( "any manner that is reasonable  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "in" ( "any manner that is reasonable  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "in" ( "any manner that is reasonable  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "in" ( "any manner that is reasonable  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "in" ( "any manner that is reasonable  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "in" ( "any manner that is reasonable  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************************** \ sameMany has returned []                                     :7_4:UnDeeper:
manyIndentation/leaf?> IN: ) "in" ( "any manner that is reasonable  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************************* \ manyIndentation/leaf? has returned []                          :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "in" ( "any manner that is reasonable  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: "each of the Notifiable Individuals" ) " <…>
pParamText> MATCH (COK): "each of the Notifiable Individuals"
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

***************************** \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: "each of the Notifiable Individuals" ) " <…>
term p/3:plain p> MATCH (COK): "each of the Notifiable Individuals"
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: "each of the Notifiable Individuals" ) " <…>
term p/notLabelTerm> MATCH (COK): "each of the Notifiable Individuals"
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: "each of the Notifiable Individuals" ) " <…>
term p> MATCH (COK): "each of the Notifiable Individuals"
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************** / binary(Or)                                                               :7_4:UnDeeper:
binary(Or)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** / binary(And)                                                              :7_4:UnDeeper:
binary(And)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected )
binary(And)> expecting AND

************************** / binary(SetLess)                                                          :7_4:UnDeeper:
binary(SetLess)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** / binary(SetPlus)                                                          :7_4:UnDeeper:
binary(SetPlus)> IN: ) "in" ( "any manner that is reasonable  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "each of the Notifiable Individuals" ) " <…>
expression> MATCH (COK): "each of the Notifiable Individuals"
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "each of the Notifiable Individuals" ) " <…>
manyIndentation/leaf?> MATCH (COK): "each of the Notifiable Individuals"
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************ / myindented: consuming UnDeeper                                               :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) "in" ( "any manner that is reasonable  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented: consuming UnDeeper has returned UnDeeper                      :7_3:Other "in":
someIndentation> IN: ( "each of the Notifiable Individuals" ) <…>
someIndentation> MATCH (COK): ( "each of the Notifiable Individuals" )
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*********************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: ( "each of the Notifiable Individuals" ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: ( "each of the Notifiable Individuals" ) <…>
term p/notLabelTerm> MATCH (COK): ( "each of the Notifiable Individuals" )
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: ( "each of the Notifiable Individuals" ) <…>
term p> MATCH (COK): ( "each of the Notifiable Individuals" )
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
******************** / binary(Or)                                                                        :7_3:Other "in":
binary(Or)> IN: "in" ( "any manner that is reasonable in <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected "in"
binary(Or)> expecting OR

******************** / binary(And)                                                                       :7_3:Other "in":
binary(And)> IN: "in" ( "any manner that is reasonable in <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected "in"
binary(And)> expecting AND

******************** / binary(SetLess)                                                                   :7_3:Other "in":
binary(SetLess)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected "in"
binary(SetLess)> expecting LESS

******************** / binary(SetPlus)                                                                   :7_3:Other "in":
binary(SetPlus)> IN: "in" ( "any manner that is reasonable in <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected "in"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

******************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "each of the Notifiable Indiv <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

****************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
****************** / myindented: consuming UnDeeper                                                        :7_3:Other "in":
myindented: consuming UnDeeper> IN: "in" ( "any manner that is reasonable in <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected "in"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "each of the Notifiable Ind <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, or PLUS

manyIndentation/deeper; calling someIndentation> IN: ( "NOTIFY" ( "each of the Notifiable Ind <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=42:
manyIndentation/deeper; calling someIndentation> unexpected "in"
manyIndentation/deeper; calling someIndentation> expecting ), AND, LESS, OR, or PLUS

someIndentation> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected "in"
someIndentation> expecting ), AND, LESS, OR, PLUS, or expression

term p/2:someIndentation expr p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected "in"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, PLUS, or expression

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=36:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=36:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=36:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected "in"
term p/notLabelTerm> expecting ), AND, LESS, OR, PLUS, or expression

term p> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected "in"
term p> expecting ), AND, LESS, OR, PLUS, or expression

expression> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected "in"
expression> expecting expression

expr pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=42:
expr pParamText> unexpected "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=42:
dBoolStructP calling exprP> unexpected "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=42:
pAction calling dBoolStructP> unexpected "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=42:
pDoAction/pAction> unexpected "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=42:
regulative permutation with deontic-temporal> unexpected "in"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected (
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "you are a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p> MATCH (COK): "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p> MATCH (COK): ( "you are a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* / pTemporal/eventually                                                                                    :4_1:Party:
pTemporal/eventually> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:Party:
pTemporal/vaguely> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [Every,Party,TokAll]> MATCH (COK): PARTY ( "You" )
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected MUST
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / pTemporal/eventually                                                                                    :5_1:Must:
pTemporal/eventually> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=23:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=23:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :5_1:Must:
pTemporal/vaguely> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=23:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :5_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :5_3:GoDeeper:
***************** / expression                                                                             :5_3:GoDeeper:
****************** / labelPrefix                                                                          :5_3:GoDeeper:
labelPrefix> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Before:
********************** / manyIndentation/leaf?                                                         :5_3:Before:
*********************** / expression                                                                  :5_3:Before:
************************ / labelPrefix                                                               :5_3:Before:
labelPrefix> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

************************ / term p                                                                    :5_3:Before:
************************* / term p/notLabelTerm                                                     :5_3:Before:
************************** / term p/2:someIndentation expr p                                       :5_3:Before:
*************************** / someIndentation                                                     :5_3:Before:
**************************** / myindented: consuming GoDeeper                                    :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :5_3:Before:
*************************** / pParamText                                                          :5_3:Before:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Before:
***************************** / pKeyValuesAka                                                   :5_3:Before:
****************************** / slAKA                                                         :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / slAKA base                                                :5_3:Before:
********************************* / slKeyValues                                             :5_3:Before:
********************************** / $*|                                                   :5_3:Before:
*********************************** / someSL                                              :5_3:Before:
************************************ / pNumAsText                                        :5_3:Before:
pNumAsText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

********************** / manyIndentation/deeper; calling someIndentation                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

******************** / term p/3:plain p                                                                 :5_3:GoDeeper:
********************* / pParamText                                                                     :5_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :5_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :5_3:GoDeeper:
************************ / slAKA                                                                    :5_3:GoDeeper:
************************* / $*|                                                                    :5_3:GoDeeper:
************************** / slAKA base                                                           :5_3:GoDeeper:
*************************** / slKeyValues                                                        :5_3:GoDeeper:
**************************** / $*|                                                              :5_3:GoDeeper:
***************************** / someSL                                                         :5_3:GoDeeper:
****************************** / pNumAsText                                                   :5_3:GoDeeper:
pNumAsText> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=25:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=25:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=25:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=25:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :5_3:Before:
****************** / manyIndentation/leaf?                                                                 :5_3:Before:
******************* / expression                                                                          :5_3:Before:
******************** / labelPrefix                                                                       :5_3:Before:
labelPrefix> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

******************** / term p                                                                            :5_3:Before:
********************* / term p/notLabelTerm                                                             :5_3:Before:
********************** / term p/2:someIndentation expr p                                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

********************** / term p/3:plain p                                                              :5_3:Before:
*********************** / pParamText                                                                  :5_3:Before:
************************ / pParamText(flat) first line: pKeyValues                                   :5_3:Before:
************************* / pKeyValuesAka                                                           :5_3:Before:
************************** / slAKA                                                                 :5_3:Before:
*************************** / $*|                                                                 :5_3:Before:
**************************** / slAKA base                                                        :5_3:Before:
***************************** / slKeyValues                                                     :5_3:Before:
****************************** / $*|                                                           :5_3:Before:
******************************* / someSL                                                      :5_3:Before:
******************************** / pNumAsText                                                :5_3:Before:
pNumAsText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                       :5_3:Before:
******************* / someIndentation                                                                     :5_3:Before:
******************** / myindented: consuming GoDeeper                                                    :5_3:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

manyIndentation/deeper; calling someIndentation> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting ( or expression

someIndentation> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=24:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=24:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=24:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=24:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected BEFORE
expression> expecting expression

expr pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=26:
expr pParamText> unexpected BEFORE
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=26:
dBoolStructP calling exprP> unexpected BEFORE
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=26:
pAction calling dBoolStructP> unexpected BEFORE
pAction calling dBoolStructP> expecting expression

pDA> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=26:
pDA> unexpected BEFORE
pDA> expecting expression

regulative permutation with deontic-action> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=26:
regulative permutation with deontic-action> unexpected BEFORE
regulative permutation with deontic-action> expecting (, WHICH, WHO, WHOSE, or expression

permutationsReg> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=42:
permutationsReg> unexpected "in"
permutationsReg> expecting expression

pRegRuleNormal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=42:
pRegRuleNormal> unexpected "in"
pRegRuleNormal> expecting expression

pRegRule> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=42:
pRegRule> unexpected "in"
pRegRule> expecting expression or §

*** / pTypeDefinition                                                                                                 :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected IF
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected IF
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected IF
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IF
pNumAsText> expecting number

someSL> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IF
someSL> expecting other text or number

slMultiTerm> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IF
slMultiTerm> expecting other text or number

slAKA base> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected IF
slAKA base> expecting other text or number

$*|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IF
$*|> expecting other text or number

slAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected IF
slAKA> expecting other text or number

pAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected IF
pAKA> expecting other text or number

pMultiTermAka> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected IF
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected IF
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected IF
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IF
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected IF
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected IF
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected IF
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected IF
pExpect> expecting EXPECT

pScenarioRule> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected IF
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :2_1:If:
**** / pSrcRef                                                                                                       :2_1:If:
***** / pRuleLabel                                                                                                  :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

pSrcRef> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenMeansIf> MATCH (COK): IF
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
labelPrefix> MATCH (COK): "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected )

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "an NDB"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "an NDB"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "an NDB"
term p/2:someIndentation expr p> expecting (

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
nested simpleHorn> MATCH (CERR): "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPConstraint> MATCH (CERR): "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPBoolStructR> MATCH (CERR): "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
someSL> MATCH (COK): "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slMultiTerm> MATCH (COK): "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA base> MATCH (COK): "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slAKA> MATCH (COK): "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
$*|> MATCH (COK): "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
RPMT> MATCH (COK): "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
slRelPred> MATCH (COK): "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
pRelPred> MATCH (COK): "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/3:plain p> MATCH (COK): "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p/notLabelTerm> MATCH (COK): "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
term p> MATCH (COK): "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
expression> MATCH (COK): "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: "an NDB" ) ) ) UNLESS ( ( "you are a Pub <…>
manyIndentation/leaf?> MATCH (COK): "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
someIndentation> MATCH (COK): ( "an NDB" )
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/2:someIndentation expr p> MATCH (COK): ( "an NDB" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p/notLabelTerm> MATCH (COK): ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: ( "an NDB" ) ) ) UNLESS ( ( "you are a P <…>
term p> MATCH (COK): ( "an NDB" )
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
whenCase> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenCase> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
whenCase> VALUE: (Just (Leaf (RPMT ["it is","an NDB"])),[])

***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected UNLESS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike / permute> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) )
pHornlike / permute> ERROR:
pHornlike / permute> offset=13:
pHornlike / permute> unexpected UNLESS
pHornlike / permute> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

pHornlike> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) )
pHornlike> ERROR:
pHornlike> offset=13:
pHornlike> unexpected UNLESS
pHornlike> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

*** / pRuleLabel                                                                                                      :2_1:If:
**** / $>|                                                                                                           :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting §

pRuleLabel> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected IF
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:If:
**** / myindented: consuming GoDeeper                                                                                :2_1:If:
myindented: consuming GoDeeper> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected IF
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected IF
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=42:
pRule> unexpected "in"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-7 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-7
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Nothing, lest = Nothing, rlabel = Just ("\167",2,"Notify Individuals"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}], defaults = [], symtab = []},Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["the Notifiable Individuals"] RPis (All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected IF
       expecting end of input
       §§                                                 Notify Individuals                                                                                                                                                                                         
       ✳ IF                                               TRUE                                               it is                                              an NDB                                                                                               
       UNLESS                                             FALSE                                              you are a Public Agency                                                                                                                                 
       PARTY                                              You                                                                                                                                                                                                        
       MUST                                                                                                  WITHIN                                             3                                                  days                                              
       ➔                                                                                                     NOTIFY                                             each of the Notifiable Individuals                                                                   
                                                                                                             in                                                 any manner that is reasonable in the circumstances                                                   
                                                                                                             with                                               a message obeying a certain format                                                                   
       WHERE                                              the Notifiable Individuals                                                                                                                                                                                 
                                                          MEANS                                              the set of individuals affected by the NDB                                                                                                              
                                                                                                             LESS                                               the individuals who are deemed                     Unlikely                                          
                                                                                                             LESS                                               the individuals on                                 the PDPC Exclusion List                           
                                                                                                             LESS                                               the individuals on                                 the LEA Exclusion List                            
                                                                                                                                                                                                                                                                     
       

  To rerun use: --match "/PDPA/pdpadbno-7/"

Randomized with seed 1719813531

Finished in 0.1469 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

