* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-7/)

Passed:
""

Passed:
"H"

Passed:
""

Passed:
"\""

Passed:
"\97782\NULQ"

Passed:
""

Passed:
"\1052367\181237z"

Passed:
"\SOHC"

Passed:
"\EME\41813"

Passed:
",[\SI\1042737(\1090631"

Passed:
"&["

Passed:
"\1022504;\1005706X+"

Passed:
"\DC1\EM$7\1014207;\SUB\FS\1020348\DC2V"

Passed:
"\b9\US\ENQX3\98454\97045\RS\1064830\143381\SI"

Passed:
"\21987"

Passed:
".q\199513\DC1R\SYN\SUB"

Passed:
"%\171658F\SUB|\1022311\STX%\33517\t\US"

Passed:
"*u\EM\24024\53222\185\1101826u\DEL \EM\ENQ`\998694e)>"

Passed:
"q\177124\1064558\1038766\DLE<\RS\1062738FY5sh)"

Passed:
"j\154354V|\DC2\SO,U\1106764"

Passed:
"\159724cs"

Passed:
"E\NUL\SO\NUL(w\ESC=5w\59089"

Passed:
"5\40256<1L\197844s\NUL@\1017870\1058770"

Passed:
"\1028933\47407T@\62832*i\128318\94425\153287\DC3[\1055524^\8009\1085841_\1052719"

Passed:
"\1110323\159249j\1047658~\166977D"

Passed:
";P~:\165930\8552b\SYN\t\NUL9HK\1016346\ETB,,\1046037"

Passed:
"\992397\FS\DC3\DC4\167542lj"

Passed:
"="

Passed:
"w-;\1085671at\EOT$\b"

Passed:
"\CAN\SOH@a'\1025913c\ACK\1059213lP\159249u3\1086905_O"

Passed:
"s)u\DEL-\ACKXy\EM*\RS`,\EM%R-[\a\1039631\\Ib\DC2W*\1075921\&6h"

Passed:
"}\148725,\169302\1042352\bb\1020948\SI\1103983\"y\1070907\tWA*\1096853k\SOji`b\NAK"

Passed:
"}<\NAK\72732sQq-&\52925\"Mia;GWA\1097135/P0\1026350U\173457V\\}K{%"

Passed:
"J:\b\v\96483\US\26440(\1073734\SYN<S\110694P.cJ\1097923\2908\\jN"

Passed:
":8\151915]\DC4\GSQ\141252mm\34747\162444\1102995\997276\SI\ENQPBS\ESC+[B\145341y"

Passed:
"Bi\998485\DLEW\1100348@\RS\CAN\1047097O"

Passed:
"s\US\149806i\24526Uto`s\24441\&3\r\994113\&6\v\1105572SE'\62717\74060pD:\11094\59442"

Passed:
"\SYNQi\1112757\1066981EF;8\94547\EOT-x\aH)q\NUL<3?;x\133476\1057120puM\1051867\b"

Passed:
"\2419\1063624;\1105019\1033679V\SOHp\142388v_."

Passed:
"l\15036W]^\42908\25102"

Passed:
"\1026554\1016718"

Passed:
"\ESC~C\n\ENQ.(GS\1038916.`\SYN\70344n\SOHY\65888\998049\&9\1113327lluDy\1108896Ge-\136157\54240"

Passed:
"+l\19703\1005737\a\SOg\a\1105212n\162647\&4W\47341\1097574p=\FStRd\f/\b[\1035562pz\NUL"

Passed:
"\DC1\\\DC1=\vUA?Q\137402c\DC4\1095864@\v"

Passed:
"N|\64478\69798\SI\179741\1070454g\11413z\1077631L&7\201089R\189550jy^"

Passed:
"\f\1035283_\fo2\CANZ\vi\NUL+Yh\44713-\39135-\1110192D^.\100729\&1\182649d\1110283\23121\70375\"Y\1027304\173123\144265\EOTX\r\b\1099794Dq\7912C"

Passed:
"?\SO\1083939f\EOT\156133V#\n\997090 \148620iP\8929Fv\157054\1080393\FS_\ESC\NAKH$\fm\2238"

Passed:
"\DEL@\1081384,\DLE\96447"

Passed:
"}"

Passed:
"\1068409=xy\DC2\10512\t\\\1079514'V*[\142578\35369\1044098K\STX>\995593\51959~e\SUBs[nJWH\1056588"

Passed:
"g\t"

Passed:
"\1013387#\4247Ygw\5955\149485S\US\SUB \CAN /"

Passed:
"\1071526mA\STX\1050952\5212\1042628\NAK\1016102\&0\179932\990853[\1101582b\7228\&1\138520\66350h\SOHh\ESCh\16102(Z\1031881\1083180\SOHT!0\1033987&Pi}\1000230u"

Passed:
"\DC2 \96716$O\CAN\\#+\156930)\ACK\\\18087\&2\1049680X"

Passed:
"Du\RSk\SO]o\1095510gO\EMGj\201321\1090013\t\1007147\SUB\FS\ETX`\ngtD4t\165328\990830*\155028*\ACK3\1046633e\34066\186151\DC3N;0"

Passed:
"\n1n2h\DC4r\138151\&8uC\GS\148369\986399,\ENQ\t_\180111r\NAKqv\1054713\1112814(\US\CAN_k2T9h\a0;R\1110535?x"

Passed:
"-\111153\t[`=\1009786aku\38368\1061115\&8C\1039372"

Passed:
"(\39843s9In\188960\35470\CAN%\1045788<\2362<;\98973\DC2\49004@\185520\1016676`\1014579_+;\62678\"\r\DEL\61481?\17456\1020679\141308\GSR\NUL>\48474\&0\1020943H\"\NAK\1064573\SOH"

Passed:
"4\154091|D\1101337\b"

Passed:
"6#\SI\1052424\23431\NAK\44409"

Passed:
"v\"eJ\SOe\NUL;r\ETXPW\r~/|-?3cCO\48710\DC27j\DEL\bW\v[lCid\DC3\1090564\29250iB\v\64477\57745\r-\1031626\199735\&2"

Passed:
"d\1092427=\DC477\190506S\28065\CANHr98s"

Passed:
"\ETX\STX\63419YA\ACKv\US\"\NAKVt\USjU\1108284\f\9643A\SIwO\ETXh\DC1\158338\FS\bpM\1073936dW`.y\".\22939;`\r\ENQ\47325\ENQO3;1\SO\DC3[\b"

Passed:
"\174470\24869"

Passed:
"{\DC1Ui\1080457\1022974S\164955u6\SI\1049009d\CAN.\1045295\27440\\\CAN\NUL@\DC1j\ACK\1019478t\998934\ESC\1084993\178787\146326k\DC4`4\60146%\NUL\77950\SO;x5\1007391\DC1\35626|\987005Rnn]n,p\vj|?\ETB"

Passed:
"\9511\ETX\1103176\1072589\SYNR=[\ah\nKt-K\1086109\GSrF\1096118\SOHu\183708\1067483\187748\&4\r\DLEF\178884\18261@\34826\1021210r\153628dC\1041103K^\164418\155983:`\RS\ESCh0\991086>\100646~)z\28948\CAN<C:w\26469"

Passed:
"y\r\aN\17245\169385W\131468\1001921"

Passed:
"@n\ETX"

Passed:
"4uH%\196658\SOBB\29342zj\1030056\127259\NAK_-\62963G4\1065410Z\ESC[m^d<\67325HH\163774*n\121447\SUB)>v8\1064305cj\38345fO\1097407}\172367\r8\42537\986394\ETX\SUB\1001315d\135256"

Passed:
"N\197167\&1\1083985\137053J\73775\3088&,+M\1088611S\NAKh"

Passed:
"/F\RS\1062389Y\191240V\n9zp}A\1040816\37285]\1015987$V\63018\1019367 6\EM\1103429\994217\151527\62895\DLE\139935\SYN1T\DC1Dz1v\20708L/\NAKOc\134447\US\NAKHS49j$]w[{\1084153\RS.N\b\DC2$\NUL\ETBFY"

Passed:
"'fy\69229a>v\ETBPy6NUO\6089H'\b\DELw\1086864>\DC2%NC[%IK\1037107h\174856\DC2MA3\ETXKn\1052820v?\1010441E\20876v"

Passed:
"\172172\DC3$5o\28004(\1022487\NAKDt\155193\132101sJy\1094803- \DEL?\137304"

Passed:
"%\ETX}\1054290qG8\a\ENQ4\161006>\1072862\DC2f\119307fa1\fHqc\ACK\35549FG\1083699iJG`\1015404J3.\1044822\119831<6\DC2xq\DC3tH\t\182838>\b}\127405\1062788<\1016143\&7\177926&V[\1064658\NUL_dp5aQ\1104602"

Passed:
"\EM\1106162{A\DC3\136448\32435\RS{\169338\47467\SYN\DLE\SYN]H\1026828\&4\154683n\52576\STXq*vu~\1084387\14869\1003325\GS}Vwi"

Passed:
"+ZFa\1075524f\DC4c\169195\DC3\187318\\D\NAK'bE\\\8489$\40471I\1020428-^\EM\12656\985173^/Z~/\DC1K\v\23791\\5\DC1$\NUL\SO\189209\&1<:N\6843\ETX:kN4m\94362\&9r\45112CL\1012925-"

Passed:
"\r\180598\ACK\1004896[\1102774\152639p7\1105026p\1076052\DC1\172877U\ACK\DC2\ETX}7&\1034463\1012773\ETB+\ENQJ\1005166J\1077797W%\1068336kR\f!\1009044:Z\SUBzF\1018550jj"

Passed:
"\18704#,~-_\EMv/\b\GSF;L\1090582V~xD&\bU7V.r\131703\DEL \1003576V$U\1049803/'r\NUL\"\65902."

Passed:
"\FS\n\1029505\ETX\3989\36345\&3hDV\134012\&6\nV\DC3d]\1099381\ETB\1047315O\1099645\ETB\1070315\RS&,J\1085528/W\1070206]\"\"<O!\59985c\24931\171327A\EOTz\1053625_\1100894(d\18004\1107993\994696\1104200\134292m\1079870b\1095812V\DC1=N\1356#3\DC1"

Passed:
"!\37226w=@T\1100838\SI\1106300\FSR\NULH\137337\178394\v{\998933)`t\200305\1226\&2v\ENQw\ENQ\SOH\US\STXWHt\1069431\33270X_\73944=rw\1111157\143571M\1103779Yk\1011552\SO(l"

Passed:
"V\158630t\ETX\181153<\DEL\SO1]\1071494\1079036\f(\146426\995692Q"

Passed:
"!7\167451d-\139244whz`\ESC\1053790\EOT\1089703\998944\DC1\197281@\1030094\17393\RSs\124936\131139\NAK}yE?\\\aY\1043402T\NAK[mR-G]JrIz\1110273\&5\184813%l\1046141\1033869\SOH\197728\163218+\"1N\1002702\154900g6m-:5"

Passed:
"\SYN%=w0{[Fh\154398$]\DC11X\DC1\r/\15374C\78760"

Passed:
"\r\1012909\DC2up\46926\1108621\139797\31546\n\173549\136658,82:-\f\1034789\f\13099\SUB]4\1065695<@:v\1000871\21417IfUfh\1075149S\\u1m\13177\bD\SYN\51343\SIp\34685\&0~F\67844-l"

Passed:
"\\y\1058113$\n\SOiWq/T\142247\61256\aoV\n\135495\1017884\1005258\&9\25885\167803*tw\1011435[%ge\65822h\59929\98556\141793[\178401\190647\1099211|25wLD\r\160529:X\tXb\110842K\FSkzP)\1050433\19547\NULEX"

Passed:
"rRh\1036114\24268\STXmH\1077356\b0h\168509\ESC\74358wF\984114\ENQ\SOn\5134%\14620\a5F\1031556w&\SYNpN\1016941M\1099689=\DC4\ENQu\a\ACK&-{\1059928\137368\&9l\154102\EOTu!\63737i-\1035206%y\SUBqdW\SO*\ESCmI\12001\t\SO"

Passed:
"6\128318h)\1074549d\DEL\rg%\46709Of\7018v,8s\1099812\6309T\DEL\163080,d\DC3{\118993\ESC\t\SI\148465\1081970,H>\1008930\DLE\CANXK\ETBhon`A\39200\NAK8&n"

Passed:
"\1111360\DC4h\"`\110960dX"

Passed:
"j\"H\1013095h\147887-*M\DLE X\EOT\CANn\78239\150548\25984\1061857),8vA\169230~\62089\1060791oH\96038\t\SIkxh97e\FS$y\1013311\992592#5S\b\ACKT\vt\1071176=\1026359\38587a\101232\1024598\1907\NUL+\SUBi\134926)\156329Y\\\138286\41343px{#\997778y\1112214aT\RSD\33318\t\CAN"

Passed:
"\EM\101104T\171495)\1042117Q`Q=7m\47314\&9hWv\CAN\1014505\ENQ\32722\1038941\SYN\201353h\131654\FS\1003434 &\"\ACK*F\995903\DC1\ETX\DELg\1062779\1005102#\DC2s\DC2u\39870P\111222}#Z/\r\182583\SIE5\SI\78616\39125\DEL0\1025317\\\1107947\&2\140325\1053252"

Passed:
"\SYNAl\1060335R\SOHP=\\,\bc\n\1000309"

Passed:
"j\164606\SYN\SO\132491\131414K\1056317lON\ACK\v\1097942#\GS>\RS\DLEl\NAK2\1019924\NAK\n\12705Id7a{\SO*\1046378_?\30453uq\STX)zr\147102\&9_v"

Passed:
"\ETB(\36784?\ETXy1hO#}\1063239jU\997430j\f\EM\1034258\69436\GSdm\1753!\DC3\ETXa\27706\f\DC3\141504`\1010015D;=\US\FS3j\1018406*K\1105099\""

Passed:
"'\SI`\23341\&4\NULM6\989677\135408IiG\DLE\20608\NAKs\36642b\1002252\DC1\189409D\1005623:u,o`l:NF\bi\US\re\987277\1074915{\vh^wU|\149063D\999290d\1061496\155182\ETB\1041375\&3/\ACKaT7w\f\158415vT\26360\CANI wpF`\1081594\23488\&9P8"

Passed:
"a\"CJ>\184590|\\vc\SUBW\EOT-\DC3L\1049177\a\RS\f\1110624VZr\1014372XzEy\200424\SUBAT\1043932rS]\DC2\NULu1\1027743\NUL\189225:#/\151067\990768d8NT\ESC9/\STXG\97729v\fBEwh<\SUB\990807\1041960\64963TOt3{#i\34803bue\187043uw&\1066931"

Passed:
"\73046,r\NAKcX\179733\120272F\ETB\EOT\GSb\154952Y0V\1052658f\ESCA\136206d:Os\52349"

Passed:
"0xP\1066957Q{\SYN\DC1\DC4U\RS\CAN\32170/\35412}\SUBJ\94696\1033412S\DLE\21352\&9\1030121\128378R\188748\146468\f\4268q\13162*\1106070>\"\52249\147433QSh%VB\EMiXJsh=\151137L\SOU\1069961\f"

Passed:
"e\183229\RS \147874\&4u\167888 p\SOH\1017220\1078335mUCW\163973'$bYt\RS[[}L\RS\SI&,;\CAN8g>\1068405\1032951t\FS\f\1070369\&9\1015922\194895Xv\1058926G\DC1t\ra\94446\ETXdR9\172500b\1023689\70120\SI.L\986042\988769\101515O;"

Passed:
"*`\984232\DEL\1062973\DELQr\1025648;q#\DC3\DC1\1002982\ETB\1010889\ESC\CAN@\1087853.\10420\153589\RSt\ETB\DC1\78634F\f\FS%(\r\RSlH\18843@%\f>\1050410\1107749\152335\21439l}\DC1\182921^\NAK\ETXmz.:L\178292;\92247\SOH*\b\STX\DC2\5410/W\1060446\ETX"

Passed:
"\64415\1040295\&3\1026215iE\CANg\ETX\ENQ\191057\1091083B\as\ETX?\ETX\DC2}eWE\180259XU\1032568jd<\EOT!\ESC\1026649F\CAN\ENQp\187223y\1047040\f\RS\tt^4c\1021973M\b6k\SUB(\a\983614\69691->\ENQ7\1061146,w"

+++ OK, passed 100 tests.
* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Notify Individuals",UnDeeper,If,GoDeeper,GoDeeper,Other "it is",GoDeeper,Other "an NDB",UnDeeper,UnDeeper,UnDeeper,Unless,GoDeeper,GoDeeper,Other "you are a Public Agency",UnDeeper,UnDeeper,Party,GoDeeper,Other "You",UnDeeper,Must,GoDeeper,GoDeeper,Before,GoDeeper,TNumber 3,GoDeeper,Other "days",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Do,GoDeeper,GoDeeper,Other "NOTIFY",GoDeeper,Other "each of the Notifiable Individuals",UnDeeper,Other "in",GoDeeper,Other "any manner that is reasonable in the circumstances",UnDeeper,Other "with",GoDeeper,Other "a message obeying a certain format",UnDeeper,UnDeeper,UnDeeper,Where,GoDeeper,GoDeeper,Other "the Notifiable Individuals",UnDeeper,Means,GoDeeper,Other "the set of individuals affected by the NDB",SetLess,GoDeeper,Other "the individuals who are deemed",GoDeeper,Other "Unlikely",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the PDPC Exclusion List",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the LEA Exclusion List",UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / $>>                                                                                                        :1_2:GoDeeper:
******* / $>>/recurse                                                                                              :1_2:GoDeeper:
******** / $>>                                                                                                     :1_2:Other "Noti:
********* / $>>/recurse                                                                                           :1_2:Other "Noti:
********* / $>>/base                                                                                              :1_2:Other "Noti:
********** / $>>/base got "Notify Individuals"                                                                    :2_2:UnDeeper:
********* \ $>>/base has returned ("Notify Individuals",0)                                                         :2_2:UnDeeper:
******** \ $>> has returned ("Notify Individuals",0)                                                                :2_2:UnDeeper:
******* \ $>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
****** \ $>> has returned ("Notify Individuals",1)                                                                    :2_2:UnDeeper:
***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / $>>                                                                                                          :2_2:UnDeeper:
******* / $>>/recurse                                                                                                :2_2:UnDeeper:
******* / $>>/base                                                                                                   :2_2:UnDeeper:
******** / $>>/base got Nothing                                                                                     :2_2:UnDeeper:
******* \ $>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
****** \ $>> has returned (Nothing,0)                                                                                 :2_2:UnDeeper:
***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** / sameLine: success!                                                                                        :2_1:If:
***** \ undeepers has returned ()                                                                                   :2_1:If:
**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / term p                                                                                             :2_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / |:| some                                                                                     :2_2:GoDeeper:
************** / |:| base parser                                                                            :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :2_2:GoDeeper:
************ / |:| some                                                                                       :2_2:GoDeeper:
************* / |:| base parser                                                                              :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :2_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :2_2:GoDeeper:
************* / someIndentation                                                                              :2_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :2_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :2_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / |:| some                                                                             :2_3:GoDeeper:
******************* / |:| base parser                                                                    :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / |:| some                                                                               :2_3:GoDeeper:
****************** / |:| base parser                                                                      :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / term p                                                                            :2_3:Other "it i:
********************* / term p/1a:label directly above                                                  :2_3:Other "it i:
********************** / $*|                                                                           :2_3:Other "it i:
*********************** / |:| some                                                                    :2_3:Other "it i:
************************ / |:| base parser                                                           :2_3:Other "it i:
************************ \ |:| base parser has returned ("it is",0)                                   :2_4:GoDeeper:
************************ / |:| deeper                                                                 :2_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :2_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :2_4:Other "an N:
************************* / |:| some                                                                  :2_4:Other "an N:
************************** / |:| base parser                                                         :2_4:Other "an N:
************************** \ |:| base parser has returned ("an NDB",0)                            :3_2:UnDeeper:
************************** / |:| deeper                                                           :3_2:UnDeeper:
*************************** / |:| some GoDeeper                                                  :3_2:UnDeeper:
************************** / |:| noMore                                                           :3_2:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                       :3_2:UnDeeper:
************************* \ |:| some has returned (["an NDB"],0)                                   :3_2:UnDeeper:
************************ \ |:| deeper has returned (["an NDB"],1)                                   :3_2:UnDeeper:
*********************** \ |:| some has returned (["it is","an NDB"],1)                               :3_2:UnDeeper:
*********************** / pNumAsText                                                                 :3_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :2_3:Other "it i:
********************** / |:| some                                                                      :2_3:Other "it i:
*********************** / |:| base parser                                                             :2_3:Other "it i:
*********************** \ |:| base parser has returned ("it is",0)                                     :2_4:GoDeeper:
*********************** / |:| deeper                                                                   :2_4:GoDeeper:
************************ / |:| some GoDeeper                                                          :2_4:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper]                                   :2_4:Other "an N:
************************ / |:| some                                                                    :2_4:Other "an N:
************************* / |:| base parser                                                           :2_4:Other "an N:
************************* \ |:| base parser has returned ("an NDB",0)                              :3_2:UnDeeper:
************************* / |:| deeper                                                             :3_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :3_2:UnDeeper:
************************* / |:| noMore                                                             :3_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :3_2:UnDeeper:
************************ \ |:| some has returned (["an NDB"],0)                                     :3_2:UnDeeper:
*********************** \ |:| deeper has returned (["an NDB"],1)                                     :3_2:UnDeeper:
********************** \ |:| some has returned (["it is","an NDB"],1)                                 :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************** / matching EOL                                                                   :3_3:UnDeeper:
********************* / term p/notLabelTerm                                                             :2_3:Other "it i:
********************** / term p/2:someIndentation expr p                                               :2_3:Other "it i:
*********************** / someIndentation                                                             :2_3:Other "it i:
************************ / myindented: consuming GoDeeper                                            :2_3:Other "it i:
********************** / term p/3:plain p                                                              :2_3:Other "it i:
*********************** / pRelPred                                                                    :2_3:Other "it i:
************************ / slRelPred                                                                 :2_3:Other "it i:
************************* / nested simpleHorn                                                       :2_3:Other "it i:
************************** / |^|                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |^| deeps                                                            :3_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]               :3_1:Unless:
************************* / RPConstraint                                                            :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPBoolStructR                                                           :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPMT                                                                    :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA                                                               :2_3:Other "it i:
**************************** / $*|                                                               :2_3:Other "it i:
***************************** / slAKA base                                                      :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / |:| some                                                    :2_3:Other "it i:
******************************** / |:| base parser                                           :2_3:Other "it i:
******************************** \ |:| base parser has returned ("it is",0)                   :2_4:GoDeeper:
******************************** / |:| deeper                                                 :2_4:GoDeeper:
********************************* / |:| some GoDeeper                                        :2_4:GoDeeper:
********************************* \ |:| some GoDeeper has returned [GoDeeper]                 :2_4:Other "an N:
********************************* / |:| some                                                  :2_4:Other "an N:
********************************** / |:| base parser                                         :2_4:Other "an N:
********************************** \ |:| base parser has returned ("an NDB",0)            :3_2:UnDeeper:
********************************** / |:| deeper                                           :3_2:UnDeeper:
*********************************** / |:| some GoDeeper                                  :3_2:UnDeeper:
********************************** / |:| noMore                                           :3_2:UnDeeper:
********************************** \ |:| noMore has returned ([],0)                       :3_2:UnDeeper:
********************************* \ |:| some has returned (["an NDB"],0)                   :3_2:UnDeeper:
******************************** \ |:| deeper has returned (["an NDB"],1)                   :3_2:UnDeeper:
******************************* \ |:| some has returned (["it is","an NDB"],1)               :3_2:UnDeeper:
****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
***************************** \ slAKA base has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
**************************** \ $*| has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional akapart                                       :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / PAKA/akapart                                         :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
************************************ / Aka Token                                        :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional typically                                     :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / typically                                            :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :3_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :3_2:UnDeeper:
*************************** \ slAKA has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["it is","an NDB"],1)                          :3_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["it is","an NDB"],1)                       :3_2:UnDeeper:
************************ / undeepers                                                                :3_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
************************* / sameLine: success!                                                       :3_3:UnDeeper:
************************ \ undeepers has returned ()                                                  :3_3:UnDeeper:
*********************** \ pRelPred has returned RPMT ["it is","an NDB"]                                :3_3:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_3:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                :3_3:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_3:UnDeeper:
******************** / binary(Or)                                                                         :3_3:UnDeeper:
******************** / binary(And)                                                                        :3_3:UnDeeper:
******************** / binary(SetLess)                                                                    :3_3:UnDeeper:
******************** / binary(SetPlus)                                                                    :3_3:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])              :3_4:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                           :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
*************** / binary(And)                                                                                    :3_4:UnDeeper:
*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                              :3_4:UnDeeper:
************** / myindented: consuming UnDeeper                                                                   :3_4:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :3_1:Unless:
************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_1:Unless:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
********** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                              :3_1:Unless:
********** / binary(Or)                                                                                        :3_1:Unless:
********** / binary(And)                                                                                       :3_1:Unless:
********** / binary(SetLess)                                                                                   :3_1:Unless:
********** / binary(SetPlus)                                                                                   :3_1:Unless:
********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / term p                                                                                             :3_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :3_2:GoDeeper:
************ / $*|                                                                                            :3_2:GoDeeper:
************* / |:| some                                                                                     :3_2:GoDeeper:
************** / |:| base parser                                                                            :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :3_2:GoDeeper:
************ / |:| some                                                                                       :3_2:GoDeeper:
************* / |:| base parser                                                                              :3_2:GoDeeper:
************** / pNumAsText                                                                                 :3_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :3_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :3_2:GoDeeper:
************* / someIndentation                                                                              :3_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :3_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :3_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :3_3:GoDeeper:
*************** / term p                                                                                     :3_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :3_3:GoDeeper:
***************** / $*|                                                                                    :3_3:GoDeeper:
****************** / |:| some                                                                             :3_3:GoDeeper:
******************* / |:| base parser                                                                    :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :3_3:GoDeeper:
***************** / |:| some                                                                               :3_3:GoDeeper:
****************** / |:| base parser                                                                      :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :3_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :3_3:GoDeeper:
****************** / someIndentation                                                                      :3_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :3_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :3_3:Other "you:
******************* / manyIndentation/leaf?                                                               :3_3:Other "you:
******************** / term p                                                                            :3_3:Other "you:
********************* / term p/1a:label directly above                                                  :3_3:Other "you:
********************** / $*|                                                                           :3_3:Other "you:
*********************** / |:| some                                                                    :3_3:Other "you:
************************ / |:| base parser                                                           :3_3:Other "you:
************************ \ |:| base parser has returned ("you are a Public Agency",0)               :4_2:UnDeeper:
************************ / |:| deeper                                                               :4_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :4_2:UnDeeper:
************************ / |:| noMore                                                               :4_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :4_2:UnDeeper:
*********************** \ |:| some has returned (["you are a Public Agency"],0)                      :4_2:UnDeeper:
*********************** / pNumAsText                                                                 :4_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :3_3:Other "you:
********************** / |:| some                                                                      :3_3:Other "you:
*********************** / |:| base parser                                                             :3_3:Other "you:
*********************** \ |:| base parser has returned ("you are a Public Agency",0)                 :4_2:UnDeeper:
*********************** / |:| deeper                                                                 :4_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :4_2:UnDeeper:
*********************** / |:| noMore                                                                 :4_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :4_2:UnDeeper:
********************** \ |:| some has returned (["you are a Public Agency"],0)                        :4_2:UnDeeper:
********************** / undeepers                                                                    :4_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :4_2:UnDeeper:
*********************** / sameLine: success!                                                         :4_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :4_2:UnDeeper:
********************** / matching EOL                                                                 :4_2:UnDeeper:
********************* / term p/notLabelTerm                                                             :3_3:Other "you:
********************** / term p/2:someIndentation expr p                                               :3_3:Other "you:
*********************** / someIndentation                                                             :3_3:Other "you:
************************ / myindented: consuming GoDeeper                                            :3_3:Other "you:
********************** / term p/3:plain p                                                              :3_3:Other "you:
*********************** / pRelPred                                                                    :3_3:Other "you:
************************ / slRelPred                                                                 :3_3:Other "you:
************************* / nested simpleHorn                                                       :3_3:Other "you:
************************** / |^|                                                                   :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |^| deeps                                                            :4_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper]                        :4_1:Party:
************************* / RPConstraint                                                            :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPBoolStructR                                                           :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPMT                                                                    :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slAKA                                                               :3_3:Other "you:
**************************** / $*|                                                               :3_3:Other "you:
***************************** / slAKA base                                                      :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / |:| some                                                    :3_3:Other "you:
******************************** / |:| base parser                                           :3_3:Other "you:
******************************** \ |:| base parser has returned ("you are a Public Agency",0) :4_2:UnDeeper:
******************************** / |:| deeper                                               :4_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :4_2:UnDeeper:
******************************** / |:| noMore                                               :4_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :4_2:UnDeeper:
******************************* \ |:| some has returned (["you are a Public Agency"],0)      :4_2:UnDeeper:
****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
***************************** \ slAKA base has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
**************************** \ $*| has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / PAKA/akapart                                         :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
************************************ / Aka Token                                        :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / typically                                            :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :4_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :4_2:UnDeeper:
*************************** \ slAKA has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["you are a Public Agency"],0)              :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* / sameLine: success!                                                     :4_2:UnDeeper:
************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
*********************** \ pRelPred has returned RPMT ["you are a Public Agency"]                     :4_2:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_2:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])     :4_2:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_2:UnDeeper:
******************** / binary(Or)                                                                       :4_2:UnDeeper:
******************** / binary(And)                                                                      :4_2:UnDeeper:
******************** / binary(SetLess)                                                                  :4_2:UnDeeper:
******************** / binary(SetPlus)                                                                  :4_2:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])       :4_2:UnDeeper:
******************* / myindented: consuming UnDeeper                                                     :4_2:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_3:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_3:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                :4_3:UnDeeper:
*************** / binary(Or)                                                                                   :4_3:UnDeeper:
*************** / binary(And)                                                                                  :4_3:UnDeeper:
*************** / binary(SetLess)                                                                              :4_3:UnDeeper:
*************** / binary(SetPlus)                                                                              :4_3:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                   :4_3:UnDeeper:
************** / myindented: consuming UnDeeper                                                                 :4_3:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :4_1:Party:
************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_1:Party:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                     :4_1:Party:
********** / binary(Or)                                                                                        :4_1:Party:
********** / binary(And)                                                                                       :4_1:Party:
********** / binary(SetLess)                                                                                   :4_1:Party:
********** / binary(SetPlus)                                                                                   :4_1:Party:
********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / |:| some                                                                                :4_2:Other "You":
***************** / |:| base parser                                                                       :4_2:Other "You":
***************** \ |:| base parser has returned ("You",0)                                                 :5_2:UnDeeper:
***************** / |:| deeper                                                                             :5_2:UnDeeper:
****************** / |:| some GoDeeper                                                                    :5_2:UnDeeper:
***************** / |:| noMore                                                                             :5_2:UnDeeper:
***************** \ |:| noMore has returned ([],0)                                                         :5_2:UnDeeper:
**************** \ |:| some has returned (["You"],0)                                                        :5_2:UnDeeper:
*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional akapart                                                                     :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional akapart has returned (Nothing,0)                                            :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional typically                                                                   :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional typically has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* / pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* / sameLine: success!                                                                             :5_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / $>>                                                                                                  :5_2:GoDeeper:
********** / $>>/recurse                                                                                        :5_2:GoDeeper:
*********** / $>>                                                                                                :5_3:GoDeeper:
************ / $>>/recurse                                                                                      :5_3:GoDeeper:
************* / $>>                                                                                             :5_3:Before:
************** / $>>/recurse                                                                                   :5_3:Before:
************** / $>>/base                                                                                      :5_3:Before:
*************** / pTemporal/eventually                                                                        :5_3:Before:
*************** / pTemporal/specifically                                                                      :5_3:Before:
**************** / $>|                                                                                       :5_3:Before:
**************** \ $>| has returned Before                                                                    :5_4:GoDeeper:
**************** / |>>                                                                                        :5_4:GoDeeper:
***************** / |>>/recurse                                                                              :5_4:GoDeeper:
****************** / |>>                                                                                     :5_4:TNumber 3:
******************* / |>>/recurse                                                                           :5_4:TNumber 3:
******************* / |>>/base                                                                              :5_4:TNumber 3:
******************** / |>>/base got Just 3                                                                  :5_5:GoDeeper:
******************* \ |>>/base has returned (Just 3,0)                                                       :5_5:GoDeeper:
****************** \ |>> has returned (Just 3,0)                                                              :5_5:GoDeeper:
***************** \ |>>/recurse has returned (Just 3,1)                                                        :5_5:GoDeeper:
**************** \ |>> has returned (Just 3,1)                                                                  :5_5:GoDeeper:
**************** / |>| calling $>>                                                                              :5_5:GoDeeper:
***************** / $>>                                                                                        :5_5:GoDeeper:
****************** / $>>/recurse                                                                              :5_5:GoDeeper:
******************* / $>>                                                                                     :5_5:Other "days:
******************** / $>>/recurse                                                                           :5_5:Other "days:
******************** / $>>/base                                                                              :5_5:Other "days:
********************* / $>>/base got "days"                                                            :6_2:UnDeeper:
******************** \ $>>/base has returned ("days",0)                                                 :6_2:UnDeeper:
******************* \ $>> has returned ("days",0)                                                        :6_2:UnDeeper:
****************** \ $>>/recurse has returned ("days",1)                                                  :6_2:UnDeeper:
***************** \ $>> has returned ("days",1)                                                            :6_2:UnDeeper:
**************** \ |>| calling $>> has returned ("days",1)                                                  :6_2:UnDeeper:
**************** / undeepers                                                                                :6_2:UnDeeper:
***************** / sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                 :6_2:UnDeeper:
***************** / sameLine: success!                                                                         :6_4:UnDeeper:
**************** \ undeepers has returned ()                                                                    :6_4:UnDeeper:
*************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")          :6_4:UnDeeper:
*************** / $>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                          :6_4:UnDeeper:
************** \ $>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)               :6_4:UnDeeper:
************* \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                      :6_4:UnDeeper:
************ \ $>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                :6_4:UnDeeper:
*********** \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                          :6_4:UnDeeper:
********** \ $>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
********* \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                              :6_4:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* / sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* / sameLine: success!                                                                                  :6_1:Do:
******** \ undeepers has returned ()                                                                             :6_1:Do:
******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / pDoAction/Do                                                                                            :6_1:Do:
******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / |:| some                                                                                   :6_2:GoDeeper:
*************** / |:| base parser                                                                          :6_2:GoDeeper:
**************** / pNumAsText                                                                             :6_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :6_2:GoDeeper:
************* / |:| some                                                                                     :6_2:GoDeeper:
************** / |:| base parser                                                                            :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :6_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :6_3:GoDeeper:
**************** / term p                                                                                   :6_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :6_3:GoDeeper:
****************** / $*|                                                                                  :6_3:GoDeeper:
******************* / |:| some                                                                           :6_3:GoDeeper:
******************** / |:| base parser                                                                  :6_3:GoDeeper:
********************* / pNumAsText                                                                     :6_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :6_3:GoDeeper:
****************** / |:| some                                                                             :6_3:GoDeeper:
******************* / |:| base parser                                                                    :6_3:GoDeeper:
******************** / pNumAsText                                                                       :6_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :6_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :6_3:GoDeeper:
******************* / someIndentation                                                                    :6_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :6_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :6_3:Other "NOTI:
******************** / manyIndentation/leaf?                                                             :6_3:Other "NOTI:
********************* / term p                                                                          :6_3:Other "NOTI:
********************** / term p/1a:label directly above                                                :6_3:Other "NOTI:
*********************** / $*|                                                                         :6_3:Other "NOTI:
************************ / |:| some                                                                  :6_3:Other "NOTI:
************************* / |:| base parser                                                         :6_3:Other "NOTI:
************************* \ |:| base parser has returned ("NOTIFY",0)                                :6_4:GoDeeper:
************************* / |:| deeper                                                               :6_4:GoDeeper:
************************** / |:| some GoDeeper                                                      :6_4:GoDeeper:
************************** \ |:| some GoDeeper has returned [GoDeeper]                               :6_4:Other "each:
************************** / |:| some                                                                :6_4:Other "each:
*************************** / |:| base parser                                                       :6_4:Other "each:
*************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0)  :7_4:UnDeeper:
*************************** / |:| deeper                                                             :7_4:UnDeeper:
**************************** / |:| some GoDeeper                                                    :7_4:UnDeeper:
*************************** / |:| noMore                                                             :7_4:UnDeeper:
*************************** \ |:| noMore has returned ([],0)                                         :7_4:UnDeeper:
************************** \ |:| some has returned (["each of the Notifiable Individuals"],0)         :7_4:UnDeeper:
************************* \ |:| deeper has returned (["each of the Notifiable Individuals"],1)         :7_4:UnDeeper:
************************ \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1)    :7_4:UnDeeper:
************************ / pNumAsText                                                                   :7_4:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :6_3:Other "NOTI:
*********************** / |:| some                                                                    :6_3:Other "NOTI:
************************ / |:| base parser                                                           :6_3:Other "NOTI:
************************ \ |:| base parser has returned ("NOTIFY",0)                                  :6_4:GoDeeper:
************************ / |:| deeper                                                                 :6_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :6_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :6_4:Other "each:
************************* / |:| some                                                                  :6_4:Other "each:
************************** / |:| base parser                                                         :6_4:Other "each:
************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0)    :7_4:UnDeeper:
************************** / |:| deeper                                                               :7_4:UnDeeper:
*************************** / |:| some GoDeeper                                                      :7_4:UnDeeper:
************************** / |:| noMore                                                               :7_4:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                           :7_4:UnDeeper:
************************* \ |:| some has returned (["each of the Notifiable Individuals"],0)           :7_4:UnDeeper:
************************ \ |:| deeper has returned (["each of the Notifiable Individuals"],1)           :7_4:UnDeeper:
*********************** \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1)      :7_4:UnDeeper:
*********************** / undeepers                                                                      :7_4:UnDeeper:
************************ / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :7_4:UnDeeper:
************************ / sameLine: success!                                                        :7_3:Other "in":
*********************** \ undeepers has returned ()                                                   :7_3:Other "in":
*********************** / matching EOL                                                                :7_3:Other "in":
********************** / term p/notLabelTerm                                                           :6_3:Other "NOTI:
*********************** / term p/2:someIndentation expr p                                             :6_3:Other "NOTI:
************************ / someIndentation                                                           :6_3:Other "NOTI:
************************* / myindented: consuming GoDeeper                                          :6_3:Other "NOTI:
*********************** / term p/3:plain p                                                            :6_3:Other "NOTI:
************************ / pParamText                                                                :6_3:Other "NOTI:
************************* / pParamText(flat) first line: pKeyValues                                 :6_3:Other "NOTI:
************************** / pKeyValuesAka                                                         :6_3:Other "NOTI:
*************************** / slAKA                                                               :6_3:Other "NOTI:
**************************** / $*|                                                               :6_3:Other "NOTI:
***************************** / slAKA base                                                      :6_3:Other "NOTI:
****************************** / slKeyValues                                                   :6_3:Other "NOTI:
******************************* / $*|                                                         :6_3:Other "NOTI:
******************************** / |:| some                                                  :6_3:Other "NOTI:
********************************* / |:| base parser                                         :6_3:Other "NOTI:
********************************* \ |:| base parser has returned ("NOTIFY",0)                :6_4:GoDeeper:
********************************* / |:| deeper                                               :6_4:GoDeeper:
********************************** / |:| some GoDeeper                                      :6_4:GoDeeper:
********************************** \ |:| some GoDeeper has returned [GoDeeper]               :6_4:Other "each:
********************************** / |:| some                                                :6_4:Other "each:
*********************************** / |:| base parser                                       :6_4:Other "each:
*********************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0) :7_4:UnDeeper:
*********************************** / |:| deeper                                             :7_4:UnDeeper:
************************************ / |:| some GoDeeper                                    :7_4:UnDeeper:
*********************************** / |:| noMore                                             :7_4:UnDeeper:
*********************************** \ |:| noMore has returned ([],0)                         :7_4:UnDeeper:
********************************** \ |:| some has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
********************************* \ |:| deeper has returned (["each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************** \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************* \ $*| has returned (["NOTIFY","each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************* / |>>                                                            :7_4:UnDeeper:
******************************** / |>>/recurse                                                  :7_4:UnDeeper:
******************************** / |>>/base                                                     :7_4:UnDeeper:
********************************* / |?| optional something                                     :7_4:UnDeeper:
********************************** / |>>                                                      :7_4:UnDeeper:
*********************************** / |>>/recurse                                            :7_4:UnDeeper:
*********************************** / |>>/base                                               :7_4:UnDeeper:
************************************ / slTypeSig                                            :7_4:UnDeeper:
************************************* / $>|                                                :7_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :7_4:UnDeeper:
********************************* / |>>/base got Nothing                                       :7_4:UnDeeper:
******************************** \ |>>/base has returned (Nothing,0)                            :7_4:UnDeeper:
******************************* \ |>> has returned (Nothing,0)                                   :7_4:UnDeeper:
****************************** \ slKeyValues has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
***************************** \ slAKA base has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
**************************** \ $*| has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
**************************** / |>>                                                                  :7_4:UnDeeper:
***************************** / |>>/recurse                                                        :7_4:UnDeeper:
***************************** / |>>/base                                                           :7_4:UnDeeper:
****************************** / slAKA optional akapart                                           :7_4:UnDeeper:
******************************* / |?| optional something                                         :7_4:UnDeeper:
******************************** / |>>                                                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / PAKA/akapart                                             :7_4:UnDeeper:
*********************************** / $>|                                                    :7_4:UnDeeper:
************************************ / Aka Token                                            :7_4:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)                :7_4:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)                  :7_4:UnDeeper:
****************************** / |>>/base got Nothing                                             :7_4:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                                  :7_4:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                         :7_4:UnDeeper:
**************************** / |>>                                                                  :7_4:UnDeeper:
***************************** / |>>/recurse                                                        :7_4:UnDeeper:
***************************** / |>>/base                                                           :7_4:UnDeeper:
****************************** / slAKA optional typically                                         :7_4:UnDeeper:
******************************* / |?| optional something                                         :7_4:UnDeeper:
******************************** / |>>                                                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / typically                                                :7_4:UnDeeper:
*********************************** / $>|                                                    :7_4:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)                :7_4:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)                :7_4:UnDeeper:
****************************** / |>>/base got Nothing                                             :7_4:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                                  :7_4:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                         :7_4:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...       :7_4:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                          :7_4:UnDeeper:
*************************** \ slAKA has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
*************************** / undeepers                                                              :7_4:UnDeeper:
**************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :7_4:UnDeeper:
**************************** / sameLine: success!                                                :7_3:Other "in":
*************************** \ undeepers has returned ()                                           :7_3:Other "in":
************************** \ pKeyValuesAka has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :7_3:Other "in":
************************* \ pParamText(flat) first line: pKeyValues has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :7_3:Other "in":
************************* / pParamText(flat) subsequent lines: sameMany pKeyValues                  :7_3:Other "in":
************************** / manyIndentation/leaf?                                                 :7_3:Other "in":
*************************** / sameMany                                                            :7_3:Other "in":
**************************** / pKeyValuesAka                                                     :7_3:Other "in":
***************************** / slAKA                                                           :7_3:Other "in":
****************************** / $*|                                                           :7_3:Other "in":
******************************* / slAKA base                                                  :7_3:Other "in":
******************************** / slKeyValues                                               :7_3:Other "in":
********************************* / $*|                                                     :7_3:Other "in":
********************************** / |:| some                                              :7_3:Other "in":
*********************************** / |:| base parser                                     :7_3:Other "in":
*********************************** \ |:| base parser has returned ("in",0)                :7_4:GoDeeper:
*********************************** / |:| deeper                                           :7_4:GoDeeper:
************************************ / |:| some GoDeeper                                  :7_4:GoDeeper:
************************************ \ |:| some GoDeeper has returned [GoDeeper]           :7_4:Other "any:
************************************ / |:| some                                            :7_4:Other "any:
************************************* / |:| base parser                                   :7_4:Other "any:
************************************* \ |:| base parser has returned ("any manner that is reasonable in the circumstances",0) :8_4:UnDeeper:
************************************* / |:| deeper                                         :8_4:UnDeeper:
************************************** / |:| some GoDeeper                                :8_4:UnDeeper:
************************************* / |:| noMore                                         :8_4:UnDeeper:
************************************* \ |:| noMore has returned ([],0)                     :8_4:UnDeeper:
************************************ \ |:| some has returned (["any manner that is reasonable in the circumstances"],0) :8_4:UnDeeper:
*********************************** \ |:| deeper has returned (["any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************** \ |:| some has returned (["in","any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************* \ $*| has returned (["in","any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************* / |>>                                                        :8_4:UnDeeper:
********************************** / |>>/recurse                                              :8_4:UnDeeper:
********************************** / |>>/base                                                 :8_4:UnDeeper:
*********************************** / |?| optional something                                 :8_4:UnDeeper:
************************************ / |>>                                                  :8_4:UnDeeper:
************************************* / |>>/recurse                                        :8_4:UnDeeper:
************************************* / |>>/base                                           :8_4:UnDeeper:
************************************** / slTypeSig                                        :8_4:UnDeeper:
*************************************** / $>|                                            :8_4:UnDeeper:
*********************************** \ |?| optional something has returned (Nothing,0)        :8_4:UnDeeper:
*********************************** / |>>/base got Nothing                                   :8_4:UnDeeper:
********************************** \ |>>/base has returned (Nothing,0)                        :8_4:UnDeeper:
********************************* \ |>> has returned (Nothing,0)                               :8_4:UnDeeper:
******************************** \ slKeyValues has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
******************************* \ slAKA base has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
****************************** \ $*| has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
****************************** / |>>                                                              :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / slAKA optional akapart                                       :8_4:UnDeeper:
********************************* / |?| optional something                                     :8_4:UnDeeper:
********************************** / |>>                                                      :8_4:UnDeeper:
*********************************** / |>>/recurse                                            :8_4:UnDeeper:
*********************************** / |>>/base                                               :8_4:UnDeeper:
************************************ / PAKA/akapart                                         :8_4:UnDeeper:
************************************* / $>|                                                :8_4:UnDeeper:
************************************** / Aka Token                                        :8_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :8_4:UnDeeper:
******************************** \ slAKA optional akapart has returned (Nothing,0)              :8_4:UnDeeper:
******************************** / |>>/base got Nothing                                         :8_4:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                              :8_4:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                     :8_4:UnDeeper:
****************************** / |>>                                                              :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / slAKA optional typically                                     :8_4:UnDeeper:
********************************* / |?| optional something                                     :8_4:UnDeeper:
********************************** / |>>                                                      :8_4:UnDeeper:
*********************************** / |>>/recurse                                            :8_4:UnDeeper:
*********************************** / |>>/base                                               :8_4:UnDeeper:
************************************ / typically                                            :8_4:UnDeeper:
************************************* / $>|                                                :8_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :8_4:UnDeeper:
******************************** \ slAKA optional typically has returned (Nothing,0)            :8_4:UnDeeper:
******************************** / |>>/base got Nothing                                         :8_4:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                              :8_4:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                     :8_4:UnDeeper:
****************************** / slAKA: proceeding after base and entityalias are retrieved ...   :8_4:UnDeeper:
****************************** / pAKA: entityalias = Nothing                                      :8_4:UnDeeper:
***************************** \ slAKA has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
***************************** / undeepers                                                          :8_4:UnDeeper:
****************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :8_4:UnDeeper:
****************************** / sameLine: success!                                            :8_3:Other "with:
***************************** \ undeepers has returned ()                                       :8_3:Other "with:
**************************** \ pKeyValuesAka has returned ("in" :| ["any manner that is reasonable in the circumstances"],Nothing) :8_3:Other "with:
**************************** / pKeyValuesAka                                                     :8_3:Other "with:
***************************** / slAKA                                                           :8_3:Other "with:
****************************** / $*|                                                           :8_3:Other "with:
******************************* / slAKA base                                                  :8_3:Other "with:
******************************** / slKeyValues                                               :8_3:Other "with:
********************************* / $*|                                                     :8_3:Other "with:
********************************** / |:| some                                              :8_3:Other "with:
*********************************** / |:| base parser                                     :8_3:Other "with:
*********************************** \ |:| base parser has returned ("with",0)              :8_4:GoDeeper:
*********************************** / |:| deeper                                           :8_4:GoDeeper:
************************************ / |:| some GoDeeper                                  :8_4:GoDeeper:
************************************ \ |:| some GoDeeper has returned [GoDeeper]           :8_4:Other "a me:
************************************ / |:| some                                            :8_4:Other "a me:
************************************* / |:| base parser                                   :8_4:Other "a me:
************************************* \ |:| base parser has returned ("a message obeying a certain format",0) :9_2:UnDeeper:
************************************* / |:| deeper                                     :9_2:UnDeeper:
************************************** / |:| some GoDeeper                            :9_2:UnDeeper:
************************************* / |:| noMore                                     :9_2:UnDeeper:
************************************* \ |:| noMore has returned ([],0)                 :9_2:UnDeeper:
************************************ \ |:| some has returned (["a message obeying a certain format"],0) :9_2:UnDeeper:
*********************************** \ |:| deeper has returned (["a message obeying a certain format"],1) :9_2:UnDeeper:
********************************** \ |:| some has returned (["with","a message obeying a certain format"],1) :9_2:UnDeeper:
********************************* \ $*| has returned (["with","a message obeying a certain format"],1) :9_2:UnDeeper:
********************************* / |>>                                                    :9_2:UnDeeper:
********************************** / |>>/recurse                                          :9_2:UnDeeper:
********************************** / |>>/base                                             :9_2:UnDeeper:
*********************************** / |?| optional something                             :9_2:UnDeeper:
************************************ / |>>                                              :9_2:UnDeeper:
************************************* / |>>/recurse                                    :9_2:UnDeeper:
************************************* / |>>/base                                       :9_2:UnDeeper:
************************************** / slTypeSig                                    :9_2:UnDeeper:
*************************************** / $>|                                        :9_2:UnDeeper:
*********************************** \ |?| optional something has returned (Nothing,0)    :9_2:UnDeeper:
*********************************** / |>>/base got Nothing                               :9_2:UnDeeper:
********************************** \ |>>/base has returned (Nothing,0)                    :9_2:UnDeeper:
********************************* \ |>> has returned (Nothing,0)                           :9_2:UnDeeper:
******************************** \ slKeyValues has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
******************************* \ slAKA base has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
****************************** \ $*| has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
****************************** / |>>                                                          :9_2:UnDeeper:
******************************* / |>>/recurse                                                :9_2:UnDeeper:
******************************* / |>>/base                                                   :9_2:UnDeeper:
******************************** / slAKA optional akapart                                   :9_2:UnDeeper:
********************************* / |?| optional something                                 :9_2:UnDeeper:
********************************** / |>>                                                  :9_2:UnDeeper:
*********************************** / |>>/recurse                                        :9_2:UnDeeper:
*********************************** / |>>/base                                           :9_2:UnDeeper:
************************************ / PAKA/akapart                                     :9_2:UnDeeper:
************************************* / $>|                                            :9_2:UnDeeper:
************************************** / Aka Token                                    :9_2:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)        :9_2:UnDeeper:
******************************** \ slAKA optional akapart has returned (Nothing,0)          :9_2:UnDeeper:
******************************** / |>>/base got Nothing                                     :9_2:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                          :9_2:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                 :9_2:UnDeeper:
****************************** / |>>                                                          :9_2:UnDeeper:
******************************* / |>>/recurse                                                :9_2:UnDeeper:
******************************* / |>>/base                                                   :9_2:UnDeeper:
******************************** / slAKA optional typically                                 :9_2:UnDeeper:
********************************* / |?| optional something                                 :9_2:UnDeeper:
********************************** / |>>                                                  :9_2:UnDeeper:
*********************************** / |>>/recurse                                        :9_2:UnDeeper:
*********************************** / |>>/base                                           :9_2:UnDeeper:
************************************ / typically                                        :9_2:UnDeeper:
************************************* / $>|                                            :9_2:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)        :9_2:UnDeeper:
******************************** \ slAKA optional typically has returned (Nothing,0)        :9_2:UnDeeper:
******************************** / |>>/base got Nothing                                     :9_2:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                          :9_2:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                 :9_2:UnDeeper:
****************************** / slAKA: proceeding after base and entityalias are retrieved ... :9_2:UnDeeper:
****************************** / pAKA: entityalias = Nothing                                  :9_2:UnDeeper:
***************************** \ slAKA has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
***************************** / undeepers                                                      :9_2:UnDeeper:
****************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :9_2:UnDeeper:
****************************** / sameLine: success!                                             :9_3:UnDeeper:
***************************** \ undeepers has returned ()                                        :9_3:UnDeeper:
**************************** \ pKeyValuesAka has returned ("with" :| ["a message obeying a certain format"],Nothing) :9_3:UnDeeper:
**************************** / pKeyValuesAka                                                      :9_3:UnDeeper:
***************************** / slAKA                                                            :9_3:UnDeeper:
****************************** / $*|                                                            :9_3:UnDeeper:
******************************* / slAKA base                                                   :9_3:UnDeeper:
******************************** / slKeyValues                                                :9_3:UnDeeper:
********************************* / $*|                                                      :9_3:UnDeeper:
********************************** / |:| some                                               :9_3:UnDeeper:
*********************************** / |:| base parser                                      :9_3:UnDeeper:
************************************ / pNumAsText                                         :9_3:UnDeeper:
*************************** \ sameMany has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************** \ manyIndentation/leaf? has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************* \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************ \ pParamText has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************* \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************* / binary(Or)                                                                       :9_3:UnDeeper:
********************* / binary(And)                                                                      :9_3:UnDeeper:
********************* / binary(SetLess)                                                                  :9_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :9_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :9_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :9_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
**************** \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
**************** / binary(Or)                                                                                   :9_4:UnDeeper:
**************** / binary(And)                                                                                  :9_4:UnDeeper:
**************** / binary(SetLess)                                                                              :9_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :9_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :9_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :9_1:Where:
************** \ someIndentation has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
************ \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
*********** \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
*********** / binary(Or)                                                                                      :9_1:Where:
*********** / binary(And)                                                                                     :9_1:Where:
*********** / binary(SetLess)                                                                                 :9_1:Where:
*********** / binary(SetPlus)                                                                                 :9_1:Where:
********** \ expr pParamText has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
********* \ dBoolStructP calling exprP has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******** \ pAction calling dBoolStructP has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******* \ pDoAction/pAction has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******* / WHERE                                                                                                   :9_1:Where:
******* \ WHERE has returned Where                                                                                 :9_2:GoDeeper:
******* / someIndentation                                                                                          :9_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :9_2:GoDeeper:
******** \ myindented: consuming GoDeeper has returned GoDeeper                                                     :9_3:GoDeeper:
******** / manyIndentation/leaf?                                                                                    :9_3:GoDeeper:
********* / pHornlike                                                                                              :9_3:GoDeeper:
********** / pSrcRef                                                                                              :9_3:GoDeeper:
*********** / pRuleLabel                                                                                         :9_3:GoDeeper:
************ / $>|                                                                                              :9_3:GoDeeper:
********** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing})) :9_3:GoDeeper:
********** / pHornlike / permute                                                                                  :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/uponLimb                                                                                 :9_3:GoDeeper:
************ / preambleParamText:[Upon]                                                                         :9_3:GoDeeper:
************* / $>|                                                                                            :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/givenLimb                                                                                :9_3:GoDeeper:
************ / preambleParamText:[Given]                                                                        :9_3:GoDeeper:
************* / $>|                                                                                            :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/ambitious                                                                                :9_3:GoDeeper:
************ / $>|                                                                                              :9_3:GoDeeper:
*********** / pHornlike/someStructure                                                                            :9_3:GoDeeper:
************ / manyIndentation/leaf?                                                                            :9_3:GoDeeper:
************* / relPredNextlineWhen                                                                            :9_3:GoDeeper:
************** / pRelPred optIndentedTuple whenCase                                                           :9_3:GoDeeper:
*************** / optIndentedTuple                                                                           :9_3:GoDeeper:
**************** / optIndented                                                                              :9_3:GoDeeper:
***************** / pRelPred                                                                               :9_3:GoDeeper:
****************** / slRelPred                                                                            :9_3:GoDeeper:
******************* / nested simpleHorn                                                                  :9_3:GoDeeper:
******************** / |^|                                                                              :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPConstraint                                                                       :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPBoolStructR                                                                      :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPMT                                                                               :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slAKA                                                                          :9_3:GoDeeper:
********************** / $*|                                                                          :9_3:GoDeeper:
*********************** / slAKA base                                                                 :9_3:GoDeeper:
************************ / slMultiTerm                                                              :9_3:GoDeeper:
************************* / |:| some                                                               :9_3:GoDeeper:
************************** / |:| base parser                                                      :9_3:GoDeeper:
*************************** / pNumAsText                                                         :9_3:GoDeeper:
************* / relPredSamelineWhen                                                                            :9_3:GoDeeper:
************** / $*|                                                                                          :9_3:GoDeeper:
*************** / slRelPred                                                                                  :9_3:GoDeeper:
**************** / nested simpleHorn                                                                        :9_3:GoDeeper:
***************** / |^|                                                                                    :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPConstraint                                                                             :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPBoolStructR                                                                            :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPMT                                                                                     :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slAKA                                                                                :9_3:GoDeeper:
******************* / $*|                                                                                :9_3:GoDeeper:
******************** / slAKA base                                                                       :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
************ / manyIndentation/deeper; calling someIndentation                                                  :9_3:GoDeeper:
************* / someIndentation                                                                                :9_3:GoDeeper:
************** / myindented: consuming GoDeeper                                                               :9_3:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :9_3:Other "the:
************** / manyIndentation/leaf?                                                                         :9_3:Other "the:
*************** / relPredNextlineWhen                                                                         :9_3:Other "the:
**************** / pRelPred optIndentedTuple whenCase                                                        :9_3:Other "the:
***************** / optIndentedTuple                                                                        :9_3:Other "the:
****************** / optIndented                                                                           :9_3:Other "the:
******************* / pRelPred                                                                            :9_3:Other "the:
******************** / slRelPred                                                                         :9_3:Other "the:
********************* / nested simpleHorn                                                               :9_3:Other "the:
********************** / |^|                                                                           :9_3:Other "the:
********************** / $*|                                                                           :9_3:Other "the:
*********************** / slMultiTerm                                                                 :9_3:Other "the:
************************ / |:| some                                                                  :9_3:Other "the:
************************* / |:| base parser                                                         :9_3:Other "the:
************************* \ |:| base parser has returned ("the Notifiable Individuals",0)            :10_3:UnDeeper:
************************* / |:| deeper                                                               :10_3:UnDeeper:
************************** / |:| some GoDeeper                                                      :10_3:UnDeeper:
************************* / |:| noMore                                                               :10_3:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                           :10_3:UnDeeper:
************************ \ |:| some has returned (["the Notifiable Individuals"],0)                   :10_3:UnDeeper:
*********************** \ slMultiTerm has returned (["the Notifiable Individuals"],0)                  :10_3:UnDeeper:
********************** \ $*| has returned (["the Notifiable Individuals"],0)                            :10_3:UnDeeper:
********************** / |^| deeps                                                                      :10_3:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper]                                           :10_2:Means:
********************** / pBSR                                                                         :10_3:GoDeeper:
*********************** / ppp inner                                                                  :10_3:GoDeeper:
************************ / term p                                                                   :10_3:GoDeeper:
************************* / term p/1a:label directly above                                         :10_3:GoDeeper:
************************** / $*|                                                                  :10_3:GoDeeper:
*************************** / |:| some                                                           :10_3:GoDeeper:
**************************** / |:| base parser                                                  :10_3:GoDeeper:
***************************** / pNumAsText                                                     :10_3:GoDeeper:
************************* / term p/b:label to the left of line below, with EOL                     :10_3:GoDeeper:
************************** / |:| some                                                             :10_3:GoDeeper:
*************************** / |:| base parser                                                    :10_3:GoDeeper:
**************************** / pNumAsText                                                       :10_3:GoDeeper:
************************* / term p/notLabelTerm                                                    :10_3:GoDeeper:
************************** / term p/2:someIndentation expr p                                      :10_3:GoDeeper:
*************************** / someIndentation                                                    :10_3:GoDeeper:
**************************** / myindented: consuming GoDeeper                                   :10_3:GoDeeper:
**************************** \ myindented: consuming GoDeeper has returned GoDeeper              :10_3:Other "the:
**************************** / manyIndentation/leaf?                                             :10_3:Other "the:
***************************** / term p                                                          :10_3:Other "the:
****************************** / term p/1a:label directly above                                :10_3:Other "the:
******************************* / $*|                                                         :10_3:Other "the:
******************************** / |:| some                                                  :10_3:Other "the:
********************************* / |:| base parser                                         :10_3:Other "the:
********************************* \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
********************************* / |:| deeper                                              :11_3:SetLess:
********************************** / |:| some GoDeeper                                     :11_3:SetLess:
********************************* / |:| noMore                                              :11_3:SetLess:
********************************* \ |:| noMore has returned ([],0)                          :11_3:SetLess:
******************************** \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
******************************** / pNumAsText                                                :11_3:SetLess:
****************************** / term p/b:label to the left of line below, with EOL            :10_3:Other "the:
******************************* / |:| some                                                    :10_3:Other "the:
******************************** / |:| base parser                                           :10_3:Other "the:
******************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
******************************** / |:| deeper                                                :11_3:SetLess:
********************************* / |:| some GoDeeper                                       :11_3:SetLess:
******************************** / |:| noMore                                                :11_3:SetLess:
******************************** \ |:| noMore has returned ([],0)                            :11_3:SetLess:
******************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
******************************* / undeepers                                                   :11_3:SetLess:
******************************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :11_3:SetLess:
******************************** / sameLine: success!                                        :11_3:SetLess:
******************************* \ undeepers has returned ()                                   :11_3:SetLess:
******************************* / matching EOL                                                :11_3:SetLess:
****************************** / term p/notLabelTerm                                           :10_3:Other "the:
******************************* / term p/2:someIndentation expr p                             :10_3:Other "the:
******************************** / someIndentation                                           :10_3:Other "the:
********************************* / myindented: consuming GoDeeper                          :10_3:Other "the:
******************************* / term p/3:plain p                                            :10_3:Other "the:
******************************** / pRelPred                                                  :10_3:Other "the:
********************************* / slRelPred                                               :10_3:Other "the:
********************************** / nested simpleHorn                                     :10_3:Other "the:
*********************************** / |^|                                                 :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |^| deeps                                           :11_3:SetLess:
*********************************** \ |^| deeps has returned []                           :11_3:SetLess:
********************************** / RPConstraint                                          :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |>| calling $>>                                     :11_3:SetLess:
************************************ / $>>                                               :11_3:SetLess:
************************************* / $>>/recurse                                     :11_3:SetLess:
************************************* / $>>/base                                        :11_3:SetLess:
********************************** / RPBoolStructR                                         :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |>| calling $>>                                     :11_3:SetLess:
************************************ / $>>                                               :11_3:SetLess:
************************************* / $>>/recurse                                     :11_3:SetLess:
************************************* / $>>/base                                        :11_3:SetLess:
********************************** / RPMT                                                  :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slAKA                                             :10_3:Other "the:
************************************* / $*|                                             :10_3:Other "the:
************************************** / slAKA base                                    :10_3:Other "the:
*************************************** / slMultiTerm                                 :10_3:Other "the:
**************************************** / |:| some                                  :10_3:Other "the:
***************************************** / |:| base parser                         :10_3:Other "the:
***************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
***************************************** / |:| deeper                              :11_3:SetLess:
****************************************** / |:| some GoDeeper                     :11_3:SetLess:
***************************************** / |:| noMore                              :11_3:SetLess:
***************************************** \ |:| noMore has returned ([],0)          :11_3:SetLess:
**************************************** \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*************************************** \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************** \ slAKA base has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************* \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************* / |>>                                             :11_3:SetLess:
************************************** / |>>/recurse                                   :11_3:SetLess:
************************************** / |>>/base                                      :11_3:SetLess:
*************************************** / slAKA optional akapart                      :11_3:SetLess:
**************************************** / |?| optional something                    :11_3:SetLess:
***************************************** / |>>                                     :11_3:SetLess:
****************************************** / |>>/recurse                           :11_3:SetLess:
****************************************** / |>>/base                              :11_3:SetLess:
******************************************* / PAKA/akapart                        :11_3:SetLess:
******************************************** / $>|                               :11_3:SetLess:
********************************************* / Aka Token                       :11_3:SetLess:
**************************************** \ |?| optional something has returned (Nothing,0) :11_3:SetLess:
*************************************** \ slAKA optional akapart has returned (Nothing,0) :11_3:SetLess:
*************************************** / |>>/base got Nothing                        :11_3:SetLess:
************************************** \ |>>/base has returned (Nothing,0)             :11_3:SetLess:
************************************* \ |>> has returned (Nothing,0)                    :11_3:SetLess:
************************************* / |>>                                             :11_3:SetLess:
************************************** / |>>/recurse                                   :11_3:SetLess:
************************************** / |>>/base                                      :11_3:SetLess:
*************************************** / slAKA optional typically                    :11_3:SetLess:
**************************************** / |?| optional something                    :11_3:SetLess:
***************************************** / |>>                                     :11_3:SetLess:
****************************************** / |>>/recurse                           :11_3:SetLess:
****************************************** / |>>/base                              :11_3:SetLess:
******************************************* / typically                           :11_3:SetLess:
******************************************** / $>|                               :11_3:SetLess:
**************************************** \ |?| optional something has returned (Nothing,0) :11_3:SetLess:
*************************************** \ slAKA optional typically has returned (Nothing,0) :11_3:SetLess:
*************************************** / |>>/base got Nothing                        :11_3:SetLess:
************************************** \ |>>/base has returned (Nothing,0)             :11_3:SetLess:
************************************* \ |>> has returned (Nothing,0)                    :11_3:SetLess:
************************************* / slAKA: proceeding after base and entityalias are retrieved ... :11_3:SetLess:
************************************* / pAKA: entityalias = Nothing                     :11_3:SetLess:
************************************ \ slAKA has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************** \ RPMT has returned (RPMT ["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************* \ slRelPred has returned (RPMT ["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************* / undeepers                                               :11_3:SetLess:
********************************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :11_3:SetLess:
********************************** / sameLine: success!                                    :11_3:SetLess:
********************************* \ undeepers has returned ()                               :11_3:SetLess:
******************************** \ pRelPred has returned RPMT ["the set of individuals affected by the NDB"] :11_3:SetLess:
******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
***************************** / binary(Or)                                                      :11_3:SetLess:
***************************** / binary(And)                                                     :11_3:SetLess:
***************************** / binary(SetLess)                                                 :11_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :11_4:GoDeeper:
***************************** / term p                                                           :11_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :11_4:GoDeeper:
******************************* / $*|                                                          :11_4:GoDeeper:
******************************** / |:| some                                                   :11_4:GoDeeper:
********************************* / |:| base parser                                          :11_4:GoDeeper:
********************************** / pNumAsText                                             :11_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :11_4:GoDeeper:
******************************* / |:| some                                                     :11_4:GoDeeper:
******************************** / |:| base parser                                            :11_4:GoDeeper:
********************************* / pNumAsText                                               :11_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :11_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :11_4:GoDeeper:
******************************** / someIndentation                                            :11_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :11_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :11_4:Other "the:
********************************* / manyIndentation/leaf?                                     :11_4:Other "the:
********************************** / term p                                                  :11_4:Other "the:
*********************************** / term p/1a:label directly above                        :11_4:Other "the:
************************************ / $*|                                                 :11_4:Other "the:
************************************* / |:| some                                          :11_4:Other "the:
************************************** / |:| base parser                                 :11_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
************************************** / |:| deeper                                       :11_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :11_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :11_5:Other "Unl:
*************************************** / |:| some                                        :11_5:Other "Unl:
**************************************** / |:| base parser                               :11_5:Other "Unl:
**************************************** \ |:| base parser has returned ("Unlikely",0)  :12_4:UnDeeper:
**************************************** / |:| deeper                                   :12_4:UnDeeper:
***************************************** / |:| some GoDeeper                          :12_4:UnDeeper:
**************************************** / |:| noMore                                   :12_4:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)               :12_4:UnDeeper:
*************************************** \ |:| some has returned (["Unlikely"],0)         :12_4:UnDeeper:
************************************** \ |:| deeper has returned (["Unlikely"],1)         :12_4:UnDeeper:
************************************* \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************* / pNumAsText                                         :12_4:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :11_4:Other "the:
************************************ / |:| some                                            :11_4:Other "the:
************************************* / |:| base parser                                   :11_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
************************************* / |:| deeper                                         :11_5:GoDeeper:
************************************** / |:| some GoDeeper                                :11_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :11_5:Other "Unl:
************************************** / |:| some                                          :11_5:Other "Unl:
*************************************** / |:| base parser                                 :11_5:Other "Unl:
*************************************** \ |:| base parser has returned ("Unlikely",0)    :12_4:UnDeeper:
*************************************** / |:| deeper                                     :12_4:UnDeeper:
**************************************** / |:| some GoDeeper                            :12_4:UnDeeper:
*************************************** / |:| noMore                                     :12_4:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)                 :12_4:UnDeeper:
************************************** \ |:| some has returned (["Unlikely"],0)           :12_4:UnDeeper:
************************************* \ |:| deeper has returned (["Unlikely"],1)           :12_4:UnDeeper:
************************************ \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************ / undeepers                                            :12_4:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :12_4:UnDeeper:
************************************* / sameLine: success!                                   :12_5:UnDeeper:
************************************ \ undeepers has returned ()                              :12_5:UnDeeper:
************************************ / matching EOL                                           :12_5:UnDeeper:
*********************************** / term p/notLabelTerm                                   :11_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :11_4:Other "the:
************************************* / someIndentation                                   :11_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :11_4:Other "the:
************************************ / term p/3:plain p                                    :11_4:Other "the:
************************************* / pRelPred                                          :11_4:Other "the:
************************************** / slRelPred                                       :11_4:Other "the:
*************************************** / nested simpleHorn                             :11_4:Other "the:
**************************************** / |^|                                         :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |^| deeps                                    :12_4:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper] :12_3:SetLess:
*************************************** / RPConstraint                                  :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |>| calling $>>                              :12_4:UnDeeper:
***************************************** / $>>                                        :12_4:UnDeeper:
****************************************** / $>>/recurse                              :12_4:UnDeeper:
****************************************** / $>>/base                                 :12_4:UnDeeper:
*************************************** / RPBoolStructR                                 :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |>| calling $>>                              :12_4:UnDeeper:
***************************************** / $>>                                        :12_4:UnDeeper:
****************************************** / $>>/recurse                              :12_4:UnDeeper:
****************************************** / $>>/base                                 :12_4:UnDeeper:
*************************************** / RPMT                                          :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slAKA                                     :11_4:Other "the:
****************************************** / $*|                                     :11_4:Other "the:
******************************************* / slAKA base                            :11_4:Other "the:
******************************************** / slMultiTerm                         :11_4:Other "the:
********************************************* / |:| some                          :11_4:Other "the:
********************************************** / |:| base parser                 :11_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
********************************************** / |:| deeper                       :11_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :11_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
*********************************************** / |:| some                        :11_5:Other "Unl:
************************************************ / |:| base parser               :11_5:Other "Unl:
************************************************ \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
************************************************ / |:| deeper                   :12_4:UnDeeper:
************************************************* / |:| some GoDeeper          :12_4:UnDeeper:
************************************************ / |:| noMore                   :12_4:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :12_4:UnDeeper:
*********************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
********************************************** \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
********************************************* \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
****************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
****************************************** / |>>                                      :12_4:UnDeeper:
******************************************* / |>>/recurse                            :12_4:UnDeeper:
******************************************* / |>>/base                               :12_4:UnDeeper:
******************************************** / slAKA optional akapart               :12_4:UnDeeper:
********************************************* / |?| optional something             :12_4:UnDeeper:
********************************************** / |>>                              :12_4:UnDeeper:
*********************************************** / |>>/recurse                    :12_4:UnDeeper:
*********************************************** / |>>/base                       :12_4:UnDeeper:
************************************************ / PAKA/akapart                 :12_4:UnDeeper:
************************************************* / $>|                        :12_4:UnDeeper:
************************************************** / Aka Token                :12_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :12_4:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :12_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :12_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :12_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :12_4:UnDeeper:
****************************************** / |>>                                      :12_4:UnDeeper:
******************************************* / |>>/recurse                            :12_4:UnDeeper:
******************************************* / |>>/base                               :12_4:UnDeeper:
******************************************** / slAKA optional typically             :12_4:UnDeeper:
********************************************* / |?| optional something             :12_4:UnDeeper:
********************************************** / |>>                              :12_4:UnDeeper:
*********************************************** / |>>/recurse                    :12_4:UnDeeper:
*********************************************** / |>>/base                       :12_4:UnDeeper:
************************************************ / typically                    :12_4:UnDeeper:
************************************************* / $>|                        :12_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :12_4:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :12_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :12_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :12_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :12_4:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :12_4:UnDeeper:
****************************************** / pAKA: entityalias = Nothing              :12_4:UnDeeper:
***************************************** \ slAKA has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************** / undeepers                                        :12_4:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :12_4:UnDeeper:
*************************************** / sameLine: success!                               :12_5:UnDeeper:
************************************** \ undeepers has returned ()                          :12_5:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals who are deemed","Unlikely"] :12_5:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************** / binary(Or)                                                 :12_5:UnDeeper:
********************************** / binary(And)                                                :12_5:UnDeeper:
********************************** / binary(SetLess)                                            :12_5:UnDeeper:
********************************** / binary(SetPlus)                                            :12_5:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************* / myindented: consuming UnDeeper                               :12_5:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper    :12_3:SetLess:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
***************************** / binary(Or)                                                      :12_3:SetLess:
***************************** / binary(And)                                                     :12_3:SetLess:
***************************** / binary(SetLess)                                                 :12_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :12_4:GoDeeper:
***************************** / term p                                                           :12_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :12_4:GoDeeper:
******************************* / $*|                                                          :12_4:GoDeeper:
******************************** / |:| some                                                   :12_4:GoDeeper:
********************************* / |:| base parser                                          :12_4:GoDeeper:
********************************** / pNumAsText                                             :12_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :12_4:GoDeeper:
******************************* / |:| some                                                     :12_4:GoDeeper:
******************************** / |:| base parser                                            :12_4:GoDeeper:
********************************* / pNumAsText                                               :12_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :12_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :12_4:GoDeeper:
******************************** / someIndentation                                            :12_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :12_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :12_4:Other "the:
********************************* / manyIndentation/leaf?                                     :12_4:Other "the:
********************************** / term p                                                  :12_4:Other "the:
*********************************** / term p/1a:label directly above                        :12_4:Other "the:
************************************ / $*|                                                 :12_4:Other "the:
************************************* / |:| some                                          :12_4:Other "the:
************************************** / |:| base parser                                 :12_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
************************************** / |:| deeper                                       :12_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :12_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :12_5:Other "the:
*************************************** / |:| some                                        :12_5:Other "the:
**************************************** / |:| base parser                               :12_5:Other "the:
**************************************** \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
**************************************** / |:| deeper                                   :13_4:UnDeeper:
***************************************** / |:| some GoDeeper                          :13_4:UnDeeper:
**************************************** / |:| noMore                                   :13_4:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)               :13_4:UnDeeper:
*************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
************************************** \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************* \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************* / pNumAsText                                         :13_4:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :12_4:Other "the:
************************************ / |:| some                                            :12_4:Other "the:
************************************* / |:| base parser                                   :12_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
************************************* / |:| deeper                                         :12_5:GoDeeper:
************************************** / |:| some GoDeeper                                :12_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :12_5:Other "the:
************************************** / |:| some                                          :12_5:Other "the:
*************************************** / |:| base parser                                 :12_5:Other "the:
*************************************** \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
*************************************** / |:| deeper                                     :13_4:UnDeeper:
**************************************** / |:| some GoDeeper                            :13_4:UnDeeper:
*************************************** / |:| noMore                                     :13_4:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)                 :13_4:UnDeeper:
************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************ \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************ / undeepers                                            :13_4:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :13_4:UnDeeper:
************************************* / sameLine: success!                                   :13_5:UnDeeper:
************************************ \ undeepers has returned ()                              :13_5:UnDeeper:
************************************ / matching EOL                                           :13_5:UnDeeper:
*********************************** / term p/notLabelTerm                                   :12_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :12_4:Other "the:
************************************* / someIndentation                                   :12_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :12_4:Other "the:
************************************ / term p/3:plain p                                    :12_4:Other "the:
************************************* / pRelPred                                          :12_4:Other "the:
************************************** / slRelPred                                       :12_4:Other "the:
*************************************** / nested simpleHorn                             :12_4:Other "the:
**************************************** / |^|                                         :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |^| deeps                                    :13_4:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper] :13_3:SetLess:
*************************************** / RPConstraint                                  :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |>| calling $>>                              :13_4:UnDeeper:
***************************************** / $>>                                        :13_4:UnDeeper:
****************************************** / $>>/recurse                              :13_4:UnDeeper:
****************************************** / $>>/base                                 :13_4:UnDeeper:
*************************************** / RPBoolStructR                                 :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |>| calling $>>                              :13_4:UnDeeper:
***************************************** / $>>                                        :13_4:UnDeeper:
****************************************** / $>>/recurse                              :13_4:UnDeeper:
****************************************** / $>>/base                                 :13_4:UnDeeper:
*************************************** / RPMT                                          :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slAKA                                     :12_4:Other "the:
****************************************** / $*|                                     :12_4:Other "the:
******************************************* / slAKA base                            :12_4:Other "the:
******************************************** / slMultiTerm                         :12_4:Other "the:
********************************************* / |:| some                          :12_4:Other "the:
********************************************** / |:| base parser                 :12_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
********************************************** / |:| deeper                       :12_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :12_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
*********************************************** / |:| some                        :12_5:Other "the:
************************************************ / |:| base parser               :12_5:Other "the:
************************************************ \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
************************************************ / |:| deeper                   :13_4:UnDeeper:
************************************************* / |:| some GoDeeper          :13_4:UnDeeper:
************************************************ / |:| noMore                   :13_4:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :13_4:UnDeeper:
*********************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
********************************************** \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
********************************************* \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** / |>>                                      :13_4:UnDeeper:
******************************************* / |>>/recurse                            :13_4:UnDeeper:
******************************************* / |>>/base                               :13_4:UnDeeper:
******************************************** / slAKA optional akapart               :13_4:UnDeeper:
********************************************* / |?| optional something             :13_4:UnDeeper:
********************************************** / |>>                              :13_4:UnDeeper:
*********************************************** / |>>/recurse                    :13_4:UnDeeper:
*********************************************** / |>>/base                       :13_4:UnDeeper:
************************************************ / PAKA/akapart                 :13_4:UnDeeper:
************************************************* / $>|                        :13_4:UnDeeper:
************************************************** / Aka Token                :13_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :13_4:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :13_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :13_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :13_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :13_4:UnDeeper:
****************************************** / |>>                                      :13_4:UnDeeper:
******************************************* / |>>/recurse                            :13_4:UnDeeper:
******************************************* / |>>/base                               :13_4:UnDeeper:
******************************************** / slAKA optional typically             :13_4:UnDeeper:
********************************************* / |?| optional something             :13_4:UnDeeper:
********************************************** / |>>                              :13_4:UnDeeper:
*********************************************** / |>>/recurse                    :13_4:UnDeeper:
*********************************************** / |>>/base                       :13_4:UnDeeper:
************************************************ / typically                    :13_4:UnDeeper:
************************************************* / $>|                        :13_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :13_4:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :13_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :13_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :13_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :13_4:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :13_4:UnDeeper:
****************************************** / pAKA: entityalias = Nothing              :13_4:UnDeeper:
***************************************** \ slAKA has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************** / undeepers                                        :13_4:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :13_4:UnDeeper:
*************************************** / sameLine: success!                               :13_5:UnDeeper:
************************************** \ undeepers has returned ()                          :13_5:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals on","the PDPC Exclusion List"] :13_5:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************** / binary(Or)                                                 :13_5:UnDeeper:
********************************** / binary(And)                                                :13_5:UnDeeper:
********************************** / binary(SetLess)                                            :13_5:UnDeeper:
********************************** / binary(SetPlus)                                            :13_5:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************* / myindented: consuming UnDeeper                               :13_5:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper    :13_3:SetLess:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
***************************** / binary(Or)                                                      :13_3:SetLess:
***************************** / binary(And)                                                     :13_3:SetLess:
***************************** / binary(SetLess)                                                 :13_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :13_4:GoDeeper:
***************************** / term p                                                           :13_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :13_4:GoDeeper:
******************************* / $*|                                                          :13_4:GoDeeper:
******************************** / |:| some                                                   :13_4:GoDeeper:
********************************* / |:| base parser                                          :13_4:GoDeeper:
********************************** / pNumAsText                                             :13_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :13_4:GoDeeper:
******************************* / |:| some                                                     :13_4:GoDeeper:
******************************** / |:| base parser                                            :13_4:GoDeeper:
********************************* / pNumAsText                                               :13_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :13_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :13_4:GoDeeper:
******************************** / someIndentation                                            :13_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :13_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :13_4:Other "the:
********************************* / manyIndentation/leaf?                                     :13_4:Other "the:
********************************** / term p                                                  :13_4:Other "the:
*********************************** / term p/1a:label directly above                        :13_4:Other "the:
************************************ / $*|                                                 :13_4:Other "the:
************************************* / |:| some                                          :13_4:Other "the:
************************************** / |:| base parser                                 :13_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
************************************** / |:| deeper                                       :13_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :13_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :13_5:Other "the:
*************************************** / |:| some                                        :13_5:Other "the:
**************************************** / |:| base parser                               :13_5:Other "the:
**************************************** \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
**************************************** / |:| deeper                               :1_2:UnDeeper:
***************************************** / |:| some GoDeeper                      :1_2:UnDeeper:
**************************************** / |:| noMore                               :1_2:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)           :1_2:UnDeeper:
*************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
************************************** \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************* \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************* / pNumAsText                                     :1_2:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :13_4:Other "the:
************************************ / |:| some                                            :13_4:Other "the:
************************************* / |:| base parser                                   :13_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
************************************* / |:| deeper                                         :13_5:GoDeeper:
************************************** / |:| some GoDeeper                                :13_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :13_5:Other "the:
************************************** / |:| some                                          :13_5:Other "the:
*************************************** / |:| base parser                                 :13_5:Other "the:
*************************************** \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
*************************************** / |:| deeper                                 :1_2:UnDeeper:
**************************************** / |:| some GoDeeper                        :1_2:UnDeeper:
*************************************** / |:| noMore                                 :1_2:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)             :1_2:UnDeeper:
************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************ \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************ / undeepers                                        :1_2:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :1_2:UnDeeper:
************************************* / sameLine: success!                               :1_3:UnDeeper:
************************************ \ undeepers has returned ()                          :1_3:UnDeeper:
************************************ / matching EOL                                       :1_3:UnDeeper:
*********************************** / term p/notLabelTerm                                   :13_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :13_4:Other "the:
************************************* / someIndentation                                   :13_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :13_4:Other "the:
************************************ / term p/3:plain p                                    :13_4:Other "the:
************************************* / pRelPred                                          :13_4:Other "the:
************************************** / slRelPred                                       :13_4:Other "the:
*************************************** / nested simpleHorn                             :13_4:Other "the:
**************************************** / |^|                                         :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |^| deeps                                :1_2:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper,UnDeeper] :EOF:
*************************************** / RPConstraint                                  :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |>| calling $>>                          :1_2:UnDeeper:
***************************************** / $>>                                    :1_2:UnDeeper:
****************************************** / $>>/recurse                          :1_2:UnDeeper:
****************************************** / $>>/base                             :1_2:UnDeeper:
*************************************** / RPBoolStructR                                 :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |>| calling $>>                          :1_2:UnDeeper:
***************************************** / $>>                                    :1_2:UnDeeper:
****************************************** / $>>/recurse                          :1_2:UnDeeper:
****************************************** / $>>/base                             :1_2:UnDeeper:
*************************************** / RPMT                                          :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slAKA                                     :13_4:Other "the:
****************************************** / $*|                                     :13_4:Other "the:
******************************************* / slAKA base                            :13_4:Other "the:
******************************************** / slMultiTerm                         :13_4:Other "the:
********************************************* / |:| some                          :13_4:Other "the:
********************************************** / |:| base parser                 :13_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
********************************************** / |:| deeper                       :13_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :13_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
*********************************************** / |:| some                        :13_5:Other "the:
************************************************ / |:| base parser               :13_5:Other "the:
************************************************ \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
************************************************ / |:| deeper               :1_2:UnDeeper:
************************************************* / |:| some GoDeeper      :1_2:UnDeeper:
************************************************ / |:| noMore               :1_2:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :1_2:UnDeeper:
*********************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
********************************************** \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
********************************************* \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** / |>>                                  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional akapart           :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>                          :1_2:UnDeeper:
*********************************************** / |>>/recurse                :1_2:UnDeeper:
*********************************************** / |>>/base                   :1_2:UnDeeper:
************************************************ / PAKA/akapart             :1_2:UnDeeper:
************************************************* / $>|                    :1_2:UnDeeper:
************************************************** / Aka Token            :1_2:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
******************************************** / |>>/base got Nothing             :1_2:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)         :1_2:UnDeeper:
****************************************** / |>>                                  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional typically         :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>                          :1_2:UnDeeper:
*********************************************** / |>>/recurse                :1_2:UnDeeper:
*********************************************** / |>>/base                   :1_2:UnDeeper:
************************************************ / typically                :1_2:UnDeeper:
************************************************* / $>|                    :1_2:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
******************************************** / |>>/base got Nothing             :1_2:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)         :1_2:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
****************************************** / pAKA: entityalias = Nothing          :1_2:UnDeeper:
***************************************** \ slAKA has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************** / undeepers                                    :1_2:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :1_2:UnDeeper:
*************************************** / sameLine: success!                           :1_3:UnDeeper:
************************************** \ undeepers has returned ()                      :1_3:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals on","the LEA Exclusion List"] :1_3:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************** / binary(Or)                                             :1_3:UnDeeper:
********************************** / binary(And)                                            :1_3:UnDeeper:
********************************** / binary(SetLess)                                        :1_3:UnDeeper:
********************************** / binary(SetPlus)                                        :1_3:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************* / myindented: consuming UnDeeper                           :1_3:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper       :1_4:UnDeeper:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
***************************** / binary(Or)                                                         :1_4:UnDeeper:
***************************** / binary(And)                                                        :1_4:UnDeeper:
***************************** / binary(SetLess)                                                    :1_4:UnDeeper:
***************************** / binary(SetPlus)                                                    :1_4:UnDeeper:
**************************** \ manyIndentation/leaf? has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :1_4:UnDeeper:
**************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :1_5:UnDeeper:
*************************** \ someIndentation has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************** \ term p/2:someIndentation expr p has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************* \ term p/notLabelTerm has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************ \ term p has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************ / binary(Or)                                                                     :1_5:UnDeeper:
************************ / binary(And)                                                                    :1_5:UnDeeper:
************************ / binary(SetLess)                                                                :1_5:UnDeeper:
************************ / binary(SetPlus)                                                                :1_5:UnDeeper:
*********************** \ ppp inner has returned All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
********************** \ pBSR has returned All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
********************** / constructed simpleHorn; running tellIdFirst                                        :1_5:UnDeeper:
********************* \ nested simpleHorn has returned (RPMT ["the Notifiable Individuals"],-1)              :1_5:UnDeeper:
******************** \ slRelPred has returned (RPMT ["the Notifiable Individuals"],-1)                        :1_5:UnDeeper:
******************** / undeepers                                                                              :1_5:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers              :1_5:UnDeeper:
********************* / sameLine: success!                                                                   :1_5:UnDeeper:
******************** \ undeepers has returned ()                                                              :1_5:UnDeeper:
******************* \ pRelPred has returned RPMT ["the Notifiable Individuals"]                                :1_5:UnDeeper:
******************* / someIndentation                                                                          :1_5:UnDeeper:
******************** / myindented: consuming GoDeeper                                                         :1_5:UnDeeper:
****************** \ optIndented has returned (RPMT ["the Notifiable Individuals"],Nothing)                     :1_5:UnDeeper:
***************** \ optIndentedTuple has returned (RPMT ["the Notifiable Individuals"],Nothing)                  :1_5:UnDeeper:
**************** \ pRelPred optIndentedTuple whenCase has returned (RPMT ["the Notifiable Individuals"],Nothing)  :1_5:UnDeeper:
*************** \ relPredNextlineWhen has returned (RPMT ["the Notifiable Individuals"],Nothing)                   :1_5:UnDeeper:
************** \ manyIndentation/leaf? has returned (RPMT ["the Notifiable Individuals"],Nothing)                   :1_5:UnDeeper:
************** / myindented: consuming UnDeeper                                                                     :1_5:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :EOF:
************* \ someIndentation has returned (RPMT ["the Notifiable Individuals"],Nothing)                :EOF:
************ \ manyIndentation/deeper; calling someIndentation has returned (RPMT ["the Notifiable Individuals"],Nothing) :EOF:
*********** \ pHornlike/someStructure has returned (Nothing,["the Notifiable Individuals"],[HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}]) :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
********** \ pHornlike / permute has returned ((Nothing,["the Notifiable Individuals"],[HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}]),Nothing,Nothing,Nothing) :EOF:
********* \ pHornlike has returned Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing}), defaults = [], symtab = []} :EOF:
********* / pHornlike                                                                                         :EOF:
********** / pSrcRef                                                                                         :EOF:
*********** / pRuleLabel                                                                                    :EOF:
************ / $>|                                                                                         :EOF:
********** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 0, srccol = 0, version = Nothing})) :EOF:
********** / pHornlike / permute                                                                             :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/uponLimb                                                                            :EOF:
************ / preambleParamText:[Upon]                                                                    :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/givenLimb                                                                           :EOF:
************ / preambleParamText:[Given]                                                                   :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/givenLimb                                                                           :EOF:
************ / preambleParamText:[Given]                                                                   :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/uponLimb                                                                            :EOF:
************ / preambleParamText:[Upon]                                                                    :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
******** \ manyIndentation/leaf? has returned [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing}), defaults = [], symtab = []}] :EOF:
******** / myindented: consuming UnDeeper                                                                      :EOF:
****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / term p                                                                                             :2_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / |:| some                                                                                     :2_2:GoDeeper:
************** / |:| base parser                                                                            :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :2_2:GoDeeper:
************ / |:| some                                                                                       :2_2:GoDeeper:
************* / |:| base parser                                                                              :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :2_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :2_2:GoDeeper:
************* / someIndentation                                                                              :2_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :2_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :2_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / |:| some                                                                             :2_3:GoDeeper:
******************* / |:| base parser                                                                    :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / |:| some                                                                               :2_3:GoDeeper:
****************** / |:| base parser                                                                      :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / term p                                                                            :2_3:Other "it i:
********************* / term p/1a:label directly above                                                  :2_3:Other "it i:
********************** / $*|                                                                           :2_3:Other "it i:
*********************** / |:| some                                                                    :2_3:Other "it i:
************************ / |:| base parser                                                           :2_3:Other "it i:
************************ \ |:| base parser has returned ("it is",0)                                   :2_4:GoDeeper:
************************ / |:| deeper                                                                 :2_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :2_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :2_4:Other "an N:
************************* / |:| some                                                                  :2_4:Other "an N:
************************** / |:| base parser                                                         :2_4:Other "an N:
************************** \ |:| base parser has returned ("an NDB",0)                            :3_2:UnDeeper:
************************** / |:| deeper                                                           :3_2:UnDeeper:
*************************** / |:| some GoDeeper                                                  :3_2:UnDeeper:
************************** / |:| noMore                                                           :3_2:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                       :3_2:UnDeeper:
************************* \ |:| some has returned (["an NDB"],0)                                   :3_2:UnDeeper:
************************ \ |:| deeper has returned (["an NDB"],1)                                   :3_2:UnDeeper:
*********************** \ |:| some has returned (["it is","an NDB"],1)                               :3_2:UnDeeper:
*********************** / pNumAsText                                                                 :3_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :2_3:Other "it i:
********************** / |:| some                                                                      :2_3:Other "it i:
*********************** / |:| base parser                                                             :2_3:Other "it i:
*********************** \ |:| base parser has returned ("it is",0)                                     :2_4:GoDeeper:
*********************** / |:| deeper                                                                   :2_4:GoDeeper:
************************ / |:| some GoDeeper                                                          :2_4:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper]                                   :2_4:Other "an N:
************************ / |:| some                                                                    :2_4:Other "an N:
************************* / |:| base parser                                                           :2_4:Other "an N:
************************* \ |:| base parser has returned ("an NDB",0)                              :3_2:UnDeeper:
************************* / |:| deeper                                                             :3_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :3_2:UnDeeper:
************************* / |:| noMore                                                             :3_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :3_2:UnDeeper:
************************ \ |:| some has returned (["an NDB"],0)                                     :3_2:UnDeeper:
*********************** \ |:| deeper has returned (["an NDB"],1)                                     :3_2:UnDeeper:
********************** \ |:| some has returned (["it is","an NDB"],1)                                 :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************** / matching EOL                                                                   :3_3:UnDeeper:
********************* / term p/notLabelTerm                                                             :2_3:Other "it i:
********************** / term p/2:someIndentation expr p                                               :2_3:Other "it i:
*********************** / someIndentation                                                             :2_3:Other "it i:
************************ / myindented: consuming GoDeeper                                            :2_3:Other "it i:
********************** / term p/3:plain p                                                              :2_3:Other "it i:
*********************** / pRelPred                                                                    :2_3:Other "it i:
************************ / slRelPred                                                                 :2_3:Other "it i:
************************* / nested simpleHorn                                                       :2_3:Other "it i:
************************** / |^|                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |^| deeps                                                            :3_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]               :3_1:Unless:
************************* / RPConstraint                                                            :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPBoolStructR                                                           :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPMT                                                                    :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA                                                               :2_3:Other "it i:
**************************** / $*|                                                               :2_3:Other "it i:
***************************** / slAKA base                                                      :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / |:| some                                                    :2_3:Other "it i:
******************************** / |:| base parser                                           :2_3:Other "it i:
******************************** \ |:| base parser has returned ("it is",0)                   :2_4:GoDeeper:
******************************** / |:| deeper                                                 :2_4:GoDeeper:
********************************* / |:| some GoDeeper                                        :2_4:GoDeeper:
********************************* \ |:| some GoDeeper has returned [GoDeeper]                 :2_4:Other "an N:
********************************* / |:| some                                                  :2_4:Other "an N:
********************************** / |:| base parser                                         :2_4:Other "an N:
********************************** \ |:| base parser has returned ("an NDB",0)            :3_2:UnDeeper:
********************************** / |:| deeper                                           :3_2:UnDeeper:
*********************************** / |:| some GoDeeper                                  :3_2:UnDeeper:
********************************** / |:| noMore                                           :3_2:UnDeeper:
********************************** \ |:| noMore has returned ([],0)                       :3_2:UnDeeper:
********************************* \ |:| some has returned (["an NDB"],0)                   :3_2:UnDeeper:
******************************** \ |:| deeper has returned (["an NDB"],1)                   :3_2:UnDeeper:
******************************* \ |:| some has returned (["it is","an NDB"],1)               :3_2:UnDeeper:
****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
***************************** \ slAKA base has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
**************************** \ $*| has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional akapart                                       :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / PAKA/akapart                                         :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
************************************ / Aka Token                                        :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional typically                                     :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / typically                                            :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :3_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :3_2:UnDeeper:
*************************** \ slAKA has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["it is","an NDB"],1)                          :3_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["it is","an NDB"],1)                       :3_2:UnDeeper:
************************ / undeepers                                                                :3_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
************************* / sameLine: success!                                                       :3_3:UnDeeper:
************************ \ undeepers has returned ()                                                  :3_3:UnDeeper:
*********************** \ pRelPred has returned RPMT ["it is","an NDB"]                                :3_3:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_3:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                :3_3:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_3:UnDeeper:
******************** / binary(Or)                                                                         :3_3:UnDeeper:
******************** / binary(And)                                                                        :3_3:UnDeeper:
******************** / binary(SetLess)                                                                    :3_3:UnDeeper:
******************** / binary(SetPlus)                                                                    :3_3:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])              :3_4:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                           :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
*************** / binary(And)                                                                                    :3_4:UnDeeper:
*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                              :3_4:UnDeeper:
************** / myindented: consuming UnDeeper                                                                   :3_4:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :3_1:Unless:
************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_1:Unless:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
********** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                              :3_1:Unless:
********** / binary(Or)                                                                                        :3_1:Unless:
********** / binary(And)                                                                                       :3_1:Unless:
********** / binary(SetLess)                                                                                   :3_1:Unless:
********** / binary(SetPlus)                                                                                   :3_1:Unless:
********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / term p                                                                                             :3_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :3_2:GoDeeper:
************ / $*|                                                                                            :3_2:GoDeeper:
************* / |:| some                                                                                     :3_2:GoDeeper:
************** / |:| base parser                                                                            :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :3_2:GoDeeper:
************ / |:| some                                                                                       :3_2:GoDeeper:
************* / |:| base parser                                                                              :3_2:GoDeeper:
************** / pNumAsText                                                                                 :3_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :3_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :3_2:GoDeeper:
************* / someIndentation                                                                              :3_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :3_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :3_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :3_3:GoDeeper:
*************** / term p                                                                                     :3_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :3_3:GoDeeper:
***************** / $*|                                                                                    :3_3:GoDeeper:
****************** / |:| some                                                                             :3_3:GoDeeper:
******************* / |:| base parser                                                                    :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :3_3:GoDeeper:
***************** / |:| some                                                                               :3_3:GoDeeper:
****************** / |:| base parser                                                                      :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :3_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :3_3:GoDeeper:
****************** / someIndentation                                                                      :3_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :3_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :3_3:Other "you:
******************* / manyIndentation/leaf?                                                               :3_3:Other "you:
******************** / term p                                                                            :3_3:Other "you:
********************* / term p/1a:label directly above                                                  :3_3:Other "you:
********************** / $*|                                                                           :3_3:Other "you:
*********************** / |:| some                                                                    :3_3:Other "you:
************************ / |:| base parser                                                           :3_3:Other "you:
************************ \ |:| base parser has returned ("you are a Public Agency",0)               :4_2:UnDeeper:
************************ / |:| deeper                                                               :4_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :4_2:UnDeeper:
************************ / |:| noMore                                                               :4_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :4_2:UnDeeper:
*********************** \ |:| some has returned (["you are a Public Agency"],0)                      :4_2:UnDeeper:
*********************** / pNumAsText                                                                 :4_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :3_3:Other "you:
********************** / |:| some                                                                      :3_3:Other "you:
*********************** / |:| base parser                                                             :3_3:Other "you:
*********************** \ |:| base parser has returned ("you are a Public Agency",0)                 :4_2:UnDeeper:
*********************** / |:| deeper                                                                 :4_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :4_2:UnDeeper:
*********************** / |:| noMore                                                                 :4_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :4_2:UnDeeper:
********************** \ |:| some has returned (["you are a Public Agency"],0)                        :4_2:UnDeeper:
********************** / undeepers                                                                    :4_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :4_2:UnDeeper:
*********************** / sameLine: success!                                                         :4_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :4_2:UnDeeper:
********************** / matching EOL                                                                 :4_2:UnDeeper:
********************* / term p/notLabelTerm                                                             :3_3:Other "you:
********************** / term p/2:someIndentation expr p                                               :3_3:Other "you:
*********************** / someIndentation                                                             :3_3:Other "you:
************************ / myindented: consuming GoDeeper                                            :3_3:Other "you:
********************** / term p/3:plain p                                                              :3_3:Other "you:
*********************** / pRelPred                                                                    :3_3:Other "you:
************************ / slRelPred                                                                 :3_3:Other "you:
************************* / nested simpleHorn                                                       :3_3:Other "you:
************************** / |^|                                                                   :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |^| deeps                                                            :4_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper]                        :4_1:Party:
************************* / RPConstraint                                                            :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPBoolStructR                                                           :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPMT                                                                    :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slAKA                                                               :3_3:Other "you:
**************************** / $*|                                                               :3_3:Other "you:
***************************** / slAKA base                                                      :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / |:| some                                                    :3_3:Other "you:
******************************** / |:| base parser                                           :3_3:Other "you:
******************************** \ |:| base parser has returned ("you are a Public Agency",0) :4_2:UnDeeper:
******************************** / |:| deeper                                               :4_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :4_2:UnDeeper:
******************************** / |:| noMore                                               :4_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :4_2:UnDeeper:
******************************* \ |:| some has returned (["you are a Public Agency"],0)      :4_2:UnDeeper:
****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
***************************** \ slAKA base has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
**************************** \ $*| has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / PAKA/akapart                                         :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
************************************ / Aka Token                                        :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / typically                                            :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :4_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :4_2:UnDeeper:
*************************** \ slAKA has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["you are a Public Agency"],0)              :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* / sameLine: success!                                                     :4_2:UnDeeper:
************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
*********************** \ pRelPred has returned RPMT ["you are a Public Agency"]                     :4_2:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_2:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])     :4_2:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_2:UnDeeper:
******************** / binary(Or)                                                                       :4_2:UnDeeper:
******************** / binary(And)                                                                      :4_2:UnDeeper:
******************** / binary(SetLess)                                                                  :4_2:UnDeeper:
******************** / binary(SetPlus)                                                                  :4_2:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])       :4_2:UnDeeper:
******************* / myindented: consuming UnDeeper                                                     :4_2:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_3:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_3:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                :4_3:UnDeeper:
*************** / binary(Or)                                                                                   :4_3:UnDeeper:
*************** / binary(And)                                                                                  :4_3:UnDeeper:
*************** / binary(SetLess)                                                                              :4_3:UnDeeper:
*************** / binary(SetPlus)                                                                              :4_3:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                   :4_3:UnDeeper:
************** / myindented: consuming UnDeeper                                                                 :4_3:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :4_1:Party:
************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_1:Party:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                     :4_1:Party:
********** / binary(Or)                                                                                        :4_1:Party:
********** / binary(And)                                                                                       :4_1:Party:
********** / binary(SetLess)                                                                                   :4_1:Party:
********** / binary(SetPlus)                                                                                   :4_1:Party:
********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pTemporal/eventually                                                                                    :4_1:Party:
******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pTemporal/vaguely                                                                                       :4_1:Party:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / |:| some                                                                                :4_2:Other "You":
***************** / |:| base parser                                                                       :4_2:Other "You":
***************** \ |:| base parser has returned ("You",0)                                                 :5_2:UnDeeper:
***************** / |:| deeper                                                                             :5_2:UnDeeper:
****************** / |:| some GoDeeper                                                                    :5_2:UnDeeper:
***************** / |:| noMore                                                                             :5_2:UnDeeper:
***************** \ |:| noMore has returned ([],0)                                                         :5_2:UnDeeper:
**************** \ |:| some has returned (["You"],0)                                                        :5_2:UnDeeper:
*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional akapart                                                                     :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional akapart has returned (Nothing,0)                                            :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional typically                                                                   :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional typically has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* / pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* / sameLine: success!                                                                             :5_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pTemporal/eventually                                                                                    :5_1:Must:
******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pTemporal/vaguely                                                                                       :5_1:Must:
******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / |:| some                                                                                   :5_2:GoDeeper:
*************** / |:| base parser                                                                          :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :5_2:GoDeeper:
************* / |:| some                                                                                     :5_2:GoDeeper:
************** / |:| base parser                                                                            :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :5_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :5_3:GoDeeper:
**************** / term p                                                                                   :5_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :5_3:GoDeeper:
****************** / $*|                                                                                  :5_3:GoDeeper:
******************* / |:| some                                                                           :5_3:GoDeeper:
******************** / |:| base parser                                                                  :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :5_3:GoDeeper:
****************** / |:| some                                                                             :5_3:GoDeeper:
******************* / |:| base parser                                                                    :5_3:GoDeeper:
******************** / pNumAsText                                                                       :5_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :5_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :5_3:GoDeeper:
******************* / someIndentation                                                                    :5_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :5_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :5_3:Before:
******************** / manyIndentation/leaf?                                                             :5_3:Before:
********************* / term p                                                                          :5_3:Before:
********************** / term p/1a:label directly above                                                :5_3:Before:
*********************** / $*|                                                                         :5_3:Before:
************************ / |:| some                                                                  :5_3:Before:
************************* / |:| base parser                                                         :5_3:Before:
************************** / pNumAsText                                                            :5_3:Before:
********************** / term p/b:label to the left of line below, with EOL                            :5_3:Before:
*********************** / |:| some                                                                    :5_3:Before:
************************ / |:| base parser                                                           :5_3:Before:
************************* / pNumAsText                                                              :5_3:Before:
********************** / term p/notLabelTerm                                                           :5_3:Before:
*********************** / term p/2:someIndentation expr p                                             :5_3:Before:
************************ / someIndentation                                                           :5_3:Before:
************************* / myindented: consuming GoDeeper                                          :5_3:Before:
*********************** / term p/3:plain p                                                            :5_3:Before:
************************ / pParamText                                                                :5_3:Before:
************************* / pParamText(flat) first line: pKeyValues                                 :5_3:Before:
************************** / pKeyValuesAka                                                         :5_3:Before:
*************************** / slAKA                                                               :5_3:Before:
**************************** / $*|                                                               :5_3:Before:
***************************** / slAKA base                                                      :5_3:Before:
****************************** / slKeyValues                                                   :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / |:| some                                                  :5_3:Before:
********************************* / |:| base parser                                         :5_3:Before:
********************************** / pNumAsText                                            :5_3:Before:
******************** / manyIndentation/deeper; calling someIndentation                                   :5_3:Before:
********************* / someIndentation                                                                 :5_3:Before:
********************** / myindented: consuming GoDeeper                                                :5_3:Before:
****************** / term p/3:plain p                                                                     :5_3:GoDeeper:
******************* / pParamText                                                                         :5_3:GoDeeper:
******************** / pParamText(flat) first line: pKeyValues                                          :5_3:GoDeeper:
********************* / pKeyValuesAka                                                                  :5_3:GoDeeper:
********************** / slAKA                                                                        :5_3:GoDeeper:
*********************** / $*|                                                                        :5_3:GoDeeper:
************************ / slAKA base                                                               :5_3:GoDeeper:
************************* / slKeyValues                                                            :5_3:GoDeeper:
************************** / $*|                                                                  :5_3:GoDeeper:
*************************** / |:| some                                                           :5_3:GoDeeper:
**************************** / |:| base parser                                                  :5_3:GoDeeper:
***************************** / pNumAsText                                                     :5_3:GoDeeper:
*************** / manyIndentation/deeper; calling someIndentation                                            :5_3:GoDeeper:
**************** / someIndentation                                                                          :5_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :5_3:GoDeeper:
***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :5_3:Before:
***************** / manyIndentation/leaf?                                                                   :5_3:Before:
****************** / term p                                                                                :5_3:Before:
******************* / term p/1a:label directly above                                                      :5_3:Before:
******************** / $*|                                                                               :5_3:Before:
********************* / |:| some                                                                        :5_3:Before:
********************** / |:| base parser                                                               :5_3:Before:
*********************** / pNumAsText                                                                  :5_3:Before:
******************* / term p/b:label to the left of line below, with EOL                                  :5_3:Before:
******************** / |:| some                                                                          :5_3:Before:
********************* / |:| base parser                                                                 :5_3:Before:
********************** / pNumAsText                                                                    :5_3:Before:
******************* / term p/notLabelTerm                                                                 :5_3:Before:
******************** / term p/2:someIndentation expr p                                                   :5_3:Before:
********************* / someIndentation                                                                 :5_3:Before:
********************** / myindented: consuming GoDeeper                                                :5_3:Before:
******************** / term p/3:plain p                                                                  :5_3:Before:
********************* / pParamText                                                                      :5_3:Before:
********************** / pParamText(flat) first line: pKeyValues                                       :5_3:Before:
*********************** / pKeyValuesAka                                                               :5_3:Before:
************************ / slAKA                                                                     :5_3:Before:
************************* / $*|                                                                     :5_3:Before:
************************** / slAKA base                                                            :5_3:Before:
*************************** / slKeyValues                                                         :5_3:Before:
**************************** / $*|                                                               :5_3:Before:
***************************** / |:| some                                                        :5_3:Before:
****************************** / |:| base parser                                               :5_3:Before:
******************************* / pNumAsText                                                  :5_3:Before:
***************** / manyIndentation/deeper; calling someIndentation                                         :5_3:Before:
****************** / someIndentation                                                                       :5_3:Before:
******************* / myindented: consuming GoDeeper                                                      :5_3:Before:
************* / term p/3:plain p                                                                             :5_2:GoDeeper:
************** / pParamText                                                                                 :5_2:GoDeeper:
*************** / pParamText(flat) first line: pKeyValues                                                  :5_2:GoDeeper:
**************** / pKeyValuesAka                                                                          :5_2:GoDeeper:
***************** / slAKA                                                                                :5_2:GoDeeper:
****************** / $*|                                                                                :5_2:GoDeeper:
******************* / slAKA base                                                                       :5_2:GoDeeper:
******************** / slKeyValues                                                                    :5_2:GoDeeper:
********************* / $*|                                                                          :5_2:GoDeeper:
********************** / |:| some                                                                   :5_2:GoDeeper:
*********************** / |:| base parser                                                          :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / $>>                                                                                                        :1_2:GoDeeper:
******* / $>>/recurse                                                                                              :1_2:GoDeeper:
******** / $>>                                                                                                     :1_2:Other "Noti:
********* / $>>/recurse                                                                                           :1_2:Other "Noti:
********* / $>>/base                                                                                              :1_2:Other "Noti:
********** / $>>/base got "Notify Individuals"                                                                    :2_2:UnDeeper:
********* \ $>>/base has returned ("Notify Individuals",0)                                                         :2_2:UnDeeper:
******** \ $>> has returned ("Notify Individuals",0)                                                                :2_2:UnDeeper:
******* \ $>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
****** \ $>> has returned ("Notify Individuals",1)                                                                    :2_2:UnDeeper:
***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / $>>                                                                                                          :2_2:UnDeeper:
******* / $>>/recurse                                                                                                :2_2:UnDeeper:
******* / $>>/base                                                                                                   :2_2:UnDeeper:
******** / $>>/base got Nothing                                                                                     :2_2:UnDeeper:
******* \ $>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
****** \ $>> has returned (Nothing,0)                                                                                 :2_2:UnDeeper:
***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** / sameLine: success!                                                                                        :2_1:If:
***** \ undeepers has returned ()                                                                                   :2_1:If:
**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / $>>                                                                                                        :1_2:GoDeeper:
******* / $>>/recurse                                                                                              :1_2:GoDeeper:
******** / $>>                                                                                                     :1_2:Other "Noti:
********* / $>>/recurse                                                                                           :1_2:Other "Noti:
********* / $>>/base                                                                                              :1_2:Other "Noti:
********** / $>>/base got "Notify Individuals"                                                                    :2_2:UnDeeper:
********* \ $>>/base has returned ("Notify Individuals",0)                                                         :2_2:UnDeeper:
******** \ $>> has returned ("Notify Individuals",0)                                                                :2_2:UnDeeper:
******* \ $>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
****** \ $>> has returned ("Notify Individuals",1)                                                                    :2_2:UnDeeper:
***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / $>>                                                                                                          :2_2:UnDeeper:
******* / $>>/recurse                                                                                                :2_2:UnDeeper:
******* / $>>/base                                                                                                   :2_2:UnDeeper:
******** / $>>/base got Nothing                                                                                     :2_2:UnDeeper:
******* \ $>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
****** \ $>> has returned (Nothing,0)                                                                                 :2_2:UnDeeper:
***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** / sameLine: success!                                                                                        :2_1:If:
***** \ undeepers has returned ()                                                                                   :2_1:If:
**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / |:| some                                                                                      :2_1:If:
************* / |:| base parser                                                                             :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / $>>                                                                                                        :1_2:GoDeeper:
******* / $>>/recurse                                                                                              :1_2:GoDeeper:
******** / $>>                                                                                                     :1_2:Other "Noti:
********* / $>>/recurse                                                                                           :1_2:Other "Noti:
********* / $>>/base                                                                                              :1_2:Other "Noti:
********** / $>>/base got "Notify Individuals"                                                                    :2_2:UnDeeper:
********* \ $>>/base has returned ("Notify Individuals",0)                                                         :2_2:UnDeeper:
******** \ $>> has returned ("Notify Individuals",0)                                                                :2_2:UnDeeper:
******* \ $>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
****** \ $>> has returned ("Notify Individuals",1)                                                                    :2_2:UnDeeper:
***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / $>>                                                                                                          :2_2:UnDeeper:
******* / $>>/recurse                                                                                                :2_2:UnDeeper:
******* / $>>/base                                                                                                   :2_2:UnDeeper:
******** / $>>/base got Nothing                                                                                     :2_2:UnDeeper:
******* \ $>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
****** \ $>> has returned (Nothing,0)                                                                                 :2_2:UnDeeper:
***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** / sameLine: success!                                                                                        :2_1:If:
***** \ undeepers has returned ()                                                                                   :2_1:If:
**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pExpect                                                                                                       :2_1:If:
*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / $>>                                                                                                      :1_2:GoDeeper:
******** / $>>/recurse                                                                                            :1_2:GoDeeper:
********* / $>>                                                                                                   :1_2:Other "Noti:
********** / $>>/recurse                                                                                         :1_2:Other "Noti:
********** / $>>/base                                                                                            :1_2:Other "Noti:
*********** / $>>/base got "Notify Individuals"                                                                  :2_2:UnDeeper:
********** \ $>>/base has returned ("Notify Individuals",0)                                                       :2_2:UnDeeper:
********* \ $>> has returned ("Notify Individuals",0)                                                              :2_2:UnDeeper:
******** \ $>>/recurse has returned ("Notify Individuals",1)                                                        :2_2:UnDeeper:
******* \ $>> has returned ("Notify Individuals",1)                                                                  :2_2:UnDeeper:
****** \ |>| calling $>> has returned ("Notify Individuals",1)                                                        :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / $>>                                                                                                        :2_2:UnDeeper:
******** / $>>/recurse                                                                                              :2_2:UnDeeper:
******** / $>>/base                                                                                                 :2_2:UnDeeper:
********* / $>>/base got Nothing                                                                                   :2_2:UnDeeper:
******** \ $>>/base has returned (Nothing,0)                                                                        :2_2:UnDeeper:
******* \ $>> has returned (Nothing,0)                                                                               :2_2:UnDeeper:
****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* / sameLine: success!                                                                                      :2_1:If:
****** \ undeepers has returned ()                                                                                 :2_1:If:
***** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                     :2_1:If:
**** \ pSrcRef has returned (Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / term p                                                                                                 :2_2:GoDeeper:
********* / term p/1a:label directly above                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / |:| some                                                                                         :2_2:GoDeeper:
************ / |:| base parser                                                                                :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                   :2_2:GoDeeper:
********** / |:| some                                                                                           :2_2:GoDeeper:
*********** / |:| base parser                                                                                  :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
********* / term p/notLabelTerm                                                                                  :2_2:GoDeeper:
********** / term p/2:someIndentation expr p                                                                    :2_2:GoDeeper:
*********** / someIndentation                                                                                  :2_2:GoDeeper:
************ / myindented: consuming GoDeeper                                                                 :2_2:GoDeeper:
************ \ myindented: consuming GoDeeper has returned GoDeeper                                             :2_3:GoDeeper:
************ / manyIndentation/leaf?                                                                            :2_3:GoDeeper:
************* / term p                                                                                         :2_3:GoDeeper:
************** / term p/1a:label directly above                                                               :2_3:GoDeeper:
*************** / $*|                                                                                        :2_3:GoDeeper:
**************** / |:| some                                                                                 :2_3:GoDeeper:
***************** / |:| base parser                                                                        :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
************** / term p/b:label to the left of line below, with EOL                                           :2_3:GoDeeper:
*************** / |:| some                                                                                   :2_3:GoDeeper:
**************** / |:| base parser                                                                          :2_3:GoDeeper:
***************** / pNumAsText                                                                             :2_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :2_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :2_3:GoDeeper:
**************** / someIndentation                                                                          :2_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :2_3:GoDeeper:
***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_3:Other "it i:
***************** / manyIndentation/leaf?                                                                   :2_3:Other "it i:
****************** / term p                                                                                :2_3:Other "it i:
******************* / term p/1a:label directly above                                                      :2_3:Other "it i:
******************** / $*|                                                                               :2_3:Other "it i:
********************* / |:| some                                                                        :2_3:Other "it i:
********************** / |:| base parser                                                               :2_3:Other "it i:
********************** \ |:| base parser has returned ("it is",0)                                       :2_4:GoDeeper:
********************** / |:| deeper                                                                     :2_4:GoDeeper:
*********************** / |:| some GoDeeper                                                            :2_4:GoDeeper:
*********************** \ |:| some GoDeeper has returned [GoDeeper]                                     :2_4:Other "an N:
*********************** / |:| some                                                                      :2_4:Other "an N:
************************ / |:| base parser                                                             :2_4:Other "an N:
************************ \ |:| base parser has returned ("an NDB",0)                                :3_2:UnDeeper:
************************ / |:| deeper                                                               :3_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :3_2:UnDeeper:
************************ / |:| noMore                                                               :3_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :3_2:UnDeeper:
*********************** \ |:| some has returned (["an NDB"],0)                                       :3_2:UnDeeper:
********************** \ |:| deeper has returned (["an NDB"],1)                                       :3_2:UnDeeper:
********************* \ |:| some has returned (["it is","an NDB"],1)                                   :3_2:UnDeeper:
********************* / pNumAsText                                                                     :3_2:UnDeeper:
******************* / term p/b:label to the left of line below, with EOL                                  :2_3:Other "it i:
******************** / |:| some                                                                          :2_3:Other "it i:
********************* / |:| base parser                                                                 :2_3:Other "it i:
********************* \ |:| base parser has returned ("it is",0)                                         :2_4:GoDeeper:
********************* / |:| deeper                                                                       :2_4:GoDeeper:
********************** / |:| some GoDeeper                                                              :2_4:GoDeeper:
********************** \ |:| some GoDeeper has returned [GoDeeper]                                       :2_4:Other "an N:
********************** / |:| some                                                                        :2_4:Other "an N:
*********************** / |:| base parser                                                               :2_4:Other "an N:
*********************** \ |:| base parser has returned ("an NDB",0)                                  :3_2:UnDeeper:
*********************** / |:| deeper                                                                 :3_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :3_2:UnDeeper:
*********************** / |:| noMore                                                                 :3_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :3_2:UnDeeper:
********************** \ |:| some has returned (["an NDB"],0)                                         :3_2:UnDeeper:
********************* \ |:| deeper has returned (["an NDB"],1)                                         :3_2:UnDeeper:
******************** \ |:| some has returned (["it is","an NDB"],1)                                     :3_2:UnDeeper:
******************** / undeepers                                                                        :3_2:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers         :3_2:UnDeeper:
********************* / sameLine: success!                                                               :3_3:UnDeeper:
******************** \ undeepers has returned ()                                                          :3_3:UnDeeper:
******************** / matching EOL                                                                       :3_3:UnDeeper:
******************* / term p/notLabelTerm                                                                 :2_3:Other "it i:
******************** / term p/2:someIndentation expr p                                                   :2_3:Other "it i:
********************* / someIndentation                                                                 :2_3:Other "it i:
********************** / myindented: consuming GoDeeper                                                :2_3:Other "it i:
******************** / term p/3:plain p                                                                  :2_3:Other "it i:
********************* / pRelPred                                                                        :2_3:Other "it i:
********************** / slRelPred                                                                     :2_3:Other "it i:
*********************** / nested simpleHorn                                                           :2_3:Other "it i:
************************ / |^|                                                                       :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
************************ \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]                   :3_1:Unless:
*********************** / RPConstraint                                                                :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / $>>                                                                    :3_2:UnDeeper:
************************** / $>>/recurse                                                          :3_2:UnDeeper:
************************** / $>>/base                                                             :3_2:UnDeeper:
*********************** / RPBoolStructR                                                               :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / $>>                                                                    :3_2:UnDeeper:
************************** / $>>/recurse                                                          :3_2:UnDeeper:
************************** / $>>/base                                                             :3_2:UnDeeper:
*********************** / RPMT                                                                        :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slAKA                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA base                                                          :2_3:Other "it i:
**************************** / slMultiTerm                                                       :2_3:Other "it i:
***************************** / |:| some                                                        :2_3:Other "it i:
****************************** / |:| base parser                                               :2_3:Other "it i:
****************************** \ |:| base parser has returned ("it is",0)                       :2_4:GoDeeper:
****************************** / |:| deeper                                                     :2_4:GoDeeper:
******************************* / |:| some GoDeeper                                            :2_4:GoDeeper:
******************************* \ |:| some GoDeeper has returned [GoDeeper]                     :2_4:Other "an N:
******************************* / |:| some                                                      :2_4:Other "an N:
******************************** / |:| base parser                                             :2_4:Other "an N:
******************************** \ |:| base parser has returned ("an NDB",0)                :3_2:UnDeeper:
******************************** / |:| deeper                                               :3_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :3_2:UnDeeper:
******************************** / |:| noMore                                               :3_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :3_2:UnDeeper:
******************************* \ |:| some has returned (["an NDB"],0)                       :3_2:UnDeeper:
****************************** \ |:| deeper has returned (["an NDB"],1)                       :3_2:UnDeeper:
***************************** \ |:| some has returned (["it is","an NDB"],1)                   :3_2:UnDeeper:
**************************** \ slMultiTerm has returned (["it is","an NDB"],1)                  :3_2:UnDeeper:
*************************** \ slAKA base has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>>                                                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>                                                          :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / PAKA/akapart                                             :3_2:UnDeeper:
********************************* / $>|                                                    :3_2:UnDeeper:
********************************** / Aka Token                                            :3_2:UnDeeper:
***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** / |>>/base got Nothing                                             :3_2:UnDeeper:
*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
************************** \ |>> has returned (Nothing,0)                                         :3_2:UnDeeper:
************************** / |>>                                                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>                                                          :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / typically                                                :3_2:UnDeeper:
********************************* / $>|                                                    :3_2:UnDeeper:
***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** / |>>/base got Nothing                                             :3_2:UnDeeper:
*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
************************** \ |>> has returned (Nothing,0)                                         :3_2:UnDeeper:
************************** / slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** / pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
************************* \ slAKA has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
*********************** \ RPMT has returned (RPMT ["it is","an NDB"],1)                              :3_2:UnDeeper:
********************** \ slRelPred has returned (RPMT ["it is","an NDB"],1)                           :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************* \ pRelPred has returned RPMT ["it is","an NDB"]                                    :3_3:UnDeeper:
******************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                     :3_3:UnDeeper:
******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                    :3_3:UnDeeper:
****************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
****************** / binary(And)                                                                            :3_3:UnDeeper:
****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_3:UnDeeper:
***************** / myindented: consuming UnDeeper                                                           :3_3:UnDeeper:
***************** \ myindented: consuming UnDeeper has returned UnDeeper                                       :3_4:UnDeeper:
**************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                                :3_4:UnDeeper:
*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_4:UnDeeper:
************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                                :3_4:UnDeeper:
************* \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                               :3_4:UnDeeper:
************* / binary(Or)                                                                                         :3_4:UnDeeper:
************* / binary(And)                                                                                        :3_4:UnDeeper:
************* / binary(SetLess)                                                                                    :3_4:UnDeeper:
************* / binary(SetPlus)                                                                                    :3_4:UnDeeper:
************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                                  :3_4:UnDeeper:
************ / myindented: consuming UnDeeper                                                                       :3_4:UnDeeper:
************ \ myindented: consuming UnDeeper has returned UnDeeper                                          :3_1:Unless:
*********** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_1:Unless:
********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                     :3_1:Unless:
********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_1:Unless:
******** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                                  :3_1:Unless:
******** / binary(Or)                                                                                            :3_1:Unless:
******** / binary(And)                                                                                           :3_1:Unless:
******** / binary(SetLess)                                                                                       :3_1:Unless:
******** / binary(SetPlus)                                                                                       :3_1:Unless:
******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / $>>                                                                                                          :1_2:GoDeeper:
****** / $>>/recurse                                                                                                :1_2:GoDeeper:
******* / $>>                                                                                                       :1_2:Other "Noti:
******** / $>>/recurse                                                                                             :1_2:Other "Noti:
******** / $>>/base                                                                                                :1_2:Other "Noti:
********* / $>>/base got "Notify Individuals"                                                                      :2_2:UnDeeper:
******** \ $>>/base has returned ("Notify Individuals",0)                                                           :2_2:UnDeeper:
******* \ $>> has returned ("Notify Individuals",0)                                                                  :2_2:UnDeeper:
****** \ $>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
***** \ $>> has returned ("Notify Individuals",1)                                                                      :2_2:UnDeeper:
**** \ |>| calling $>> has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / $>>                                                                                                            :2_2:UnDeeper:
****** / $>>/recurse                                                                                                  :2_2:UnDeeper:
****** / $>>/base                                                                                                     :2_2:UnDeeper:
******* / $>>/base got Nothing                                                                                       :2_2:UnDeeper:
****** \ $>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
***** \ $>> has returned (Nothing,0)                                                                                   :2_2:UnDeeper:
**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** / sameLine: success!                                                                                          :2_1:If:
**** \ undeepers has returned ()                                                                                     :2_1:If:
*** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                         :2_1:If:
** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:If:
** / pRule                                                                                                             :2_1:If:
*** / pRegRule                                                                                                        :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / term p                                                                                             :2_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / |:| some                                                                                     :2_2:GoDeeper:
************** / |:| base parser                                                                            :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :2_2:GoDeeper:
************ / |:| some                                                                                       :2_2:GoDeeper:
************* / |:| base parser                                                                              :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :2_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :2_2:GoDeeper:
************* / someIndentation                                                                              :2_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :2_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :2_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / |:| some                                                                             :2_3:GoDeeper:
******************* / |:| base parser                                                                    :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / |:| some                                                                               :2_3:GoDeeper:
****************** / |:| base parser                                                                      :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / term p                                                                            :2_3:Other "it i:
********************* / term p/1a:label directly above                                                  :2_3:Other "it i:
********************** / $*|                                                                           :2_3:Other "it i:
*********************** / |:| some                                                                    :2_3:Other "it i:
************************ / |:| base parser                                                           :2_3:Other "it i:
************************ \ |:| base parser has returned ("it is",0)                                   :2_4:GoDeeper:
************************ / |:| deeper                                                                 :2_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :2_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :2_4:Other "an N:
************************* / |:| some                                                                  :2_4:Other "an N:
************************** / |:| base parser                                                         :2_4:Other "an N:
************************** \ |:| base parser has returned ("an NDB",0)                            :3_2:UnDeeper:
************************** / |:| deeper                                                           :3_2:UnDeeper:
*************************** / |:| some GoDeeper                                                  :3_2:UnDeeper:
************************** / |:| noMore                                                           :3_2:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                       :3_2:UnDeeper:
************************* \ |:| some has returned (["an NDB"],0)                                   :3_2:UnDeeper:
************************ \ |:| deeper has returned (["an NDB"],1)                                   :3_2:UnDeeper:
*********************** \ |:| some has returned (["it is","an NDB"],1)                               :3_2:UnDeeper:
*********************** / pNumAsText                                                                 :3_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :2_3:Other "it i:
********************** / |:| some                                                                      :2_3:Other "it i:
*********************** / |:| base parser                                                             :2_3:Other "it i:
*********************** \ |:| base parser has returned ("it is",0)                                     :2_4:GoDeeper:
*********************** / |:| deeper                                                                   :2_4:GoDeeper:
************************ / |:| some GoDeeper                                                          :2_4:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper]                                   :2_4:Other "an N:
************************ / |:| some                                                                    :2_4:Other "an N:
************************* / |:| base parser                                                           :2_4:Other "an N:
************************* \ |:| base parser has returned ("an NDB",0)                              :3_2:UnDeeper:
************************* / |:| deeper                                                             :3_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :3_2:UnDeeper:
************************* / |:| noMore                                                             :3_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :3_2:UnDeeper:
************************ \ |:| some has returned (["an NDB"],0)                                     :3_2:UnDeeper:
*********************** \ |:| deeper has returned (["an NDB"],1)                                     :3_2:UnDeeper:
********************** \ |:| some has returned (["it is","an NDB"],1)                                 :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************** / matching EOL                                                                   :3_3:UnDeeper:
********************* / term p/notLabelTerm                                                             :2_3:Other "it i:
********************** / term p/2:someIndentation expr p                                               :2_3:Other "it i:
*********************** / someIndentation                                                             :2_3:Other "it i:
************************ / myindented: consuming GoDeeper                                            :2_3:Other "it i:
********************** / term p/3:plain p                                                              :2_3:Other "it i:
*********************** / pRelPred                                                                    :2_3:Other "it i:
************************ / slRelPred                                                                 :2_3:Other "it i:
************************* / nested simpleHorn                                                       :2_3:Other "it i:
************************** / |^|                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |^| deeps                                                            :3_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]               :3_1:Unless:
************************* / RPConstraint                                                            :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPBoolStructR                                                           :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPMT                                                                    :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA                                                               :2_3:Other "it i:
**************************** / $*|                                                               :2_3:Other "it i:
***************************** / slAKA base                                                      :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / |:| some                                                    :2_3:Other "it i:
******************************** / |:| base parser                                           :2_3:Other "it i:
******************************** \ |:| base parser has returned ("it is",0)                   :2_4:GoDeeper:
******************************** / |:| deeper                                                 :2_4:GoDeeper:
********************************* / |:| some GoDeeper                                        :2_4:GoDeeper:
********************************* \ |:| some GoDeeper has returned [GoDeeper]                 :2_4:Other "an N:
********************************* / |:| some                                                  :2_4:Other "an N:
********************************** / |:| base parser                                         :2_4:Other "an N:
********************************** \ |:| base parser has returned ("an NDB",0)            :3_2:UnDeeper:
********************************** / |:| deeper                                           :3_2:UnDeeper:
*********************************** / |:| some GoDeeper                                  :3_2:UnDeeper:
********************************** / |:| noMore                                           :3_2:UnDeeper:
********************************** \ |:| noMore has returned ([],0)                       :3_2:UnDeeper:
********************************* \ |:| some has returned (["an NDB"],0)                   :3_2:UnDeeper:
******************************** \ |:| deeper has returned (["an NDB"],1)                   :3_2:UnDeeper:
******************************* \ |:| some has returned (["it is","an NDB"],1)               :3_2:UnDeeper:
****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
***************************** \ slAKA base has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
**************************** \ $*| has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional akapart                                       :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / PAKA/akapart                                         :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
************************************ / Aka Token                                        :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional typically                                     :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / typically                                            :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :3_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :3_2:UnDeeper:
*************************** \ slAKA has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["it is","an NDB"],1)                          :3_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["it is","an NDB"],1)                       :3_2:UnDeeper:
************************ / undeepers                                                                :3_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
************************* / sameLine: success!                                                       :3_3:UnDeeper:
************************ \ undeepers has returned ()                                                  :3_3:UnDeeper:
*********************** \ pRelPred has returned RPMT ["it is","an NDB"]                                :3_3:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_3:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                :3_3:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_3:UnDeeper:
******************** / binary(Or)                                                                         :3_3:UnDeeper:
******************** / binary(And)                                                                        :3_3:UnDeeper:
******************** / binary(SetLess)                                                                    :3_3:UnDeeper:
******************** / binary(SetPlus)                                                                    :3_3:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])              :3_4:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                           :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
*************** / binary(And)                                                                                    :3_4:UnDeeper:
*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                              :3_4:UnDeeper:
************** / myindented: consuming UnDeeper                                                                   :3_4:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :3_1:Unless:
************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_1:Unless:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
********** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                              :3_1:Unless:
********** / binary(Or)                                                                                        :3_1:Unless:
********** / binary(And)                                                                                       :3_1:Unless:
********** / binary(SetLess)                                                                                   :3_1:Unless:
********** / binary(SetPlus)                                                                                   :3_1:Unless:
********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / term p                                                                                             :3_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :3_2:GoDeeper:
************ / $*|                                                                                            :3_2:GoDeeper:
************* / |:| some                                                                                     :3_2:GoDeeper:
************** / |:| base parser                                                                            :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :3_2:GoDeeper:
************ / |:| some                                                                                       :3_2:GoDeeper:
************* / |:| base parser                                                                              :3_2:GoDeeper:
************** / pNumAsText                                                                                 :3_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :3_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :3_2:GoDeeper:
************* / someIndentation                                                                              :3_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :3_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :3_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :3_3:GoDeeper:
*************** / term p                                                                                     :3_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :3_3:GoDeeper:
***************** / $*|                                                                                    :3_3:GoDeeper:
****************** / |:| some                                                                             :3_3:GoDeeper:
******************* / |:| base parser                                                                    :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :3_3:GoDeeper:
***************** / |:| some                                                                               :3_3:GoDeeper:
****************** / |:| base parser                                                                      :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :3_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :3_3:GoDeeper:
****************** / someIndentation                                                                      :3_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :3_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :3_3:Other "you:
******************* / manyIndentation/leaf?                                                               :3_3:Other "you:
******************** / term p                                                                            :3_3:Other "you:
********************* / term p/1a:label directly above                                                  :3_3:Other "you:
********************** / $*|                                                                           :3_3:Other "you:
*********************** / |:| some                                                                    :3_3:Other "you:
************************ / |:| base parser                                                           :3_3:Other "you:
************************ \ |:| base parser has returned ("you are a Public Agency",0)               :4_2:UnDeeper:
************************ / |:| deeper                                                               :4_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :4_2:UnDeeper:
************************ / |:| noMore                                                               :4_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :4_2:UnDeeper:
*********************** \ |:| some has returned (["you are a Public Agency"],0)                      :4_2:UnDeeper:
*********************** / pNumAsText                                                                 :4_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :3_3:Other "you:
********************** / |:| some                                                                      :3_3:Other "you:
*********************** / |:| base parser                                                             :3_3:Other "you:
*********************** \ |:| base parser has returned ("you are a Public Agency",0)                 :4_2:UnDeeper:
*********************** / |:| deeper                                                                 :4_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :4_2:UnDeeper:
*********************** / |:| noMore                                                                 :4_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :4_2:UnDeeper:
********************** \ |:| some has returned (["you are a Public Agency"],0)                        :4_2:UnDeeper:
********************** / undeepers                                                                    :4_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :4_2:UnDeeper:
*********************** / sameLine: success!                                                         :4_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :4_2:UnDeeper:
********************** / matching EOL                                                                 :4_2:UnDeeper:
********************* / term p/notLabelTerm                                                             :3_3:Other "you:
********************** / term p/2:someIndentation expr p                                               :3_3:Other "you:
*********************** / someIndentation                                                             :3_3:Other "you:
************************ / myindented: consuming GoDeeper                                            :3_3:Other "you:
********************** / term p/3:plain p                                                              :3_3:Other "you:
*********************** / pRelPred                                                                    :3_3:Other "you:
************************ / slRelPred                                                                 :3_3:Other "you:
************************* / nested simpleHorn                                                       :3_3:Other "you:
************************** / |^|                                                                   :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |^| deeps                                                            :4_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper]                        :4_1:Party:
************************* / RPConstraint                                                            :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPBoolStructR                                                           :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPMT                                                                    :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slAKA                                                               :3_3:Other "you:
**************************** / $*|                                                               :3_3:Other "you:
***************************** / slAKA base                                                      :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / |:| some                                                    :3_3:Other "you:
******************************** / |:| base parser                                           :3_3:Other "you:
******************************** \ |:| base parser has returned ("you are a Public Agency",0) :4_2:UnDeeper:
******************************** / |:| deeper                                               :4_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :4_2:UnDeeper:
******************************** / |:| noMore                                               :4_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :4_2:UnDeeper:
******************************* \ |:| some has returned (["you are a Public Agency"],0)      :4_2:UnDeeper:
****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
***************************** \ slAKA base has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
**************************** \ $*| has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / PAKA/akapart                                         :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
************************************ / Aka Token                                        :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / typically                                            :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :4_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :4_2:UnDeeper:
*************************** \ slAKA has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["you are a Public Agency"],0)              :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* / sameLine: success!                                                     :4_2:UnDeeper:
************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
*********************** \ pRelPred has returned RPMT ["you are a Public Agency"]                     :4_2:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_2:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])     :4_2:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_2:UnDeeper:
******************** / binary(Or)                                                                       :4_2:UnDeeper:
******************** / binary(And)                                                                      :4_2:UnDeeper:
******************** / binary(SetLess)                                                                  :4_2:UnDeeper:
******************** / binary(SetPlus)                                                                  :4_2:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])       :4_2:UnDeeper:
******************* / myindented: consuming UnDeeper                                                     :4_2:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_3:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_3:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                :4_3:UnDeeper:
*************** / binary(Or)                                                                                   :4_3:UnDeeper:
*************** / binary(And)                                                                                  :4_3:UnDeeper:
*************** / binary(SetLess)                                                                              :4_3:UnDeeper:
*************** / binary(SetPlus)                                                                              :4_3:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                   :4_3:UnDeeper:
************** / myindented: consuming UnDeeper                                                                 :4_3:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :4_1:Party:
************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_1:Party:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                     :4_1:Party:
********** / binary(Or)                                                                                        :4_1:Party:
********** / binary(And)                                                                                       :4_1:Party:
********** / binary(SetLess)                                                                                   :4_1:Party:
********** / binary(SetPlus)                                                                                   :4_1:Party:
********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / |:| some                                                                                :4_2:Other "You":
***************** / |:| base parser                                                                       :4_2:Other "You":
***************** \ |:| base parser has returned ("You",0)                                                 :5_2:UnDeeper:
***************** / |:| deeper                                                                             :5_2:UnDeeper:
****************** / |:| some GoDeeper                                                                    :5_2:UnDeeper:
***************** / |:| noMore                                                                             :5_2:UnDeeper:
***************** \ |:| noMore has returned ([],0)                                                         :5_2:UnDeeper:
**************** \ |:| some has returned (["You"],0)                                                        :5_2:UnDeeper:
*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional akapart                                                                     :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional akapart has returned (Nothing,0)                                            :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional typically                                                                   :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional typically has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* / pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* / sameLine: success!                                                                             :5_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / $>>                                                                                                  :5_2:GoDeeper:
********** / $>>/recurse                                                                                        :5_2:GoDeeper:
*********** / $>>                                                                                                :5_3:GoDeeper:
************ / $>>/recurse                                                                                      :5_3:GoDeeper:
************* / $>>                                                                                             :5_3:Before:
************** / $>>/recurse                                                                                   :5_3:Before:
************** / $>>/base                                                                                      :5_3:Before:
*************** / pTemporal/eventually                                                                        :5_3:Before:
*************** / pTemporal/specifically                                                                      :5_3:Before:
**************** / $>|                                                                                       :5_3:Before:
**************** \ $>| has returned Before                                                                    :5_4:GoDeeper:
**************** / |>>                                                                                        :5_4:GoDeeper:
***************** / |>>/recurse                                                                              :5_4:GoDeeper:
****************** / |>>                                                                                     :5_4:TNumber 3:
******************* / |>>/recurse                                                                           :5_4:TNumber 3:
******************* / |>>/base                                                                              :5_4:TNumber 3:
******************** / |>>/base got Just 3                                                                  :5_5:GoDeeper:
******************* \ |>>/base has returned (Just 3,0)                                                       :5_5:GoDeeper:
****************** \ |>> has returned (Just 3,0)                                                              :5_5:GoDeeper:
***************** \ |>>/recurse has returned (Just 3,1)                                                        :5_5:GoDeeper:
**************** \ |>> has returned (Just 3,1)                                                                  :5_5:GoDeeper:
**************** / |>| calling $>>                                                                              :5_5:GoDeeper:
***************** / $>>                                                                                        :5_5:GoDeeper:
****************** / $>>/recurse                                                                              :5_5:GoDeeper:
******************* / $>>                                                                                     :5_5:Other "days:
******************** / $>>/recurse                                                                           :5_5:Other "days:
******************** / $>>/base                                                                              :5_5:Other "days:
********************* / $>>/base got "days"                                                            :6_2:UnDeeper:
******************** \ $>>/base has returned ("days",0)                                                 :6_2:UnDeeper:
******************* \ $>> has returned ("days",0)                                                        :6_2:UnDeeper:
****************** \ $>>/recurse has returned ("days",1)                                                  :6_2:UnDeeper:
***************** \ $>> has returned ("days",1)                                                            :6_2:UnDeeper:
**************** \ |>| calling $>> has returned ("days",1)                                                  :6_2:UnDeeper:
**************** / undeepers                                                                                :6_2:UnDeeper:
***************** / sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                 :6_2:UnDeeper:
***************** / sameLine: success!                                                                         :6_4:UnDeeper:
**************** \ undeepers has returned ()                                                                    :6_4:UnDeeper:
*************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")          :6_4:UnDeeper:
*************** / $>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                          :6_4:UnDeeper:
************** \ $>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)               :6_4:UnDeeper:
************* \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                      :6_4:UnDeeper:
************ \ $>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                :6_4:UnDeeper:
*********** \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                          :6_4:UnDeeper:
********** \ $>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
********* \ $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                              :6_4:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* / sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* / sameLine: success!                                                                                  :6_1:Do:
******** \ undeepers has returned ()                                                                             :6_1:Do:
******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
******* / pDoAction/Do                                                                                            :6_1:Do:
******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / |:| some                                                                                   :6_2:GoDeeper:
*************** / |:| base parser                                                                          :6_2:GoDeeper:
**************** / pNumAsText                                                                             :6_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :6_2:GoDeeper:
************* / |:| some                                                                                     :6_2:GoDeeper:
************** / |:| base parser                                                                            :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :6_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :6_3:GoDeeper:
**************** / term p                                                                                   :6_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :6_3:GoDeeper:
****************** / $*|                                                                                  :6_3:GoDeeper:
******************* / |:| some                                                                           :6_3:GoDeeper:
******************** / |:| base parser                                                                  :6_3:GoDeeper:
********************* / pNumAsText                                                                     :6_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :6_3:GoDeeper:
****************** / |:| some                                                                             :6_3:GoDeeper:
******************* / |:| base parser                                                                    :6_3:GoDeeper:
******************** / pNumAsText                                                                       :6_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :6_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :6_3:GoDeeper:
******************* / someIndentation                                                                    :6_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :6_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :6_3:Other "NOTI:
******************** / manyIndentation/leaf?                                                             :6_3:Other "NOTI:
********************* / term p                                                                          :6_3:Other "NOTI:
********************** / term p/1a:label directly above                                                :6_3:Other "NOTI:
*********************** / $*|                                                                         :6_3:Other "NOTI:
************************ / |:| some                                                                  :6_3:Other "NOTI:
************************* / |:| base parser                                                         :6_3:Other "NOTI:
************************* \ |:| base parser has returned ("NOTIFY",0)                                :6_4:GoDeeper:
************************* / |:| deeper                                                               :6_4:GoDeeper:
************************** / |:| some GoDeeper                                                      :6_4:GoDeeper:
************************** \ |:| some GoDeeper has returned [GoDeeper]                               :6_4:Other "each:
************************** / |:| some                                                                :6_4:Other "each:
*************************** / |:| base parser                                                       :6_4:Other "each:
*************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0)  :7_4:UnDeeper:
*************************** / |:| deeper                                                             :7_4:UnDeeper:
**************************** / |:| some GoDeeper                                                    :7_4:UnDeeper:
*************************** / |:| noMore                                                             :7_4:UnDeeper:
*************************** \ |:| noMore has returned ([],0)                                         :7_4:UnDeeper:
************************** \ |:| some has returned (["each of the Notifiable Individuals"],0)         :7_4:UnDeeper:
************************* \ |:| deeper has returned (["each of the Notifiable Individuals"],1)         :7_4:UnDeeper:
************************ \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1)    :7_4:UnDeeper:
************************ / pNumAsText                                                                   :7_4:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :6_3:Other "NOTI:
*********************** / |:| some                                                                    :6_3:Other "NOTI:
************************ / |:| base parser                                                           :6_3:Other "NOTI:
************************ \ |:| base parser has returned ("NOTIFY",0)                                  :6_4:GoDeeper:
************************ / |:| deeper                                                                 :6_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :6_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :6_4:Other "each:
************************* / |:| some                                                                  :6_4:Other "each:
************************** / |:| base parser                                                         :6_4:Other "each:
************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0)    :7_4:UnDeeper:
************************** / |:| deeper                                                               :7_4:UnDeeper:
*************************** / |:| some GoDeeper                                                      :7_4:UnDeeper:
************************** / |:| noMore                                                               :7_4:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                           :7_4:UnDeeper:
************************* \ |:| some has returned (["each of the Notifiable Individuals"],0)           :7_4:UnDeeper:
************************ \ |:| deeper has returned (["each of the Notifiable Individuals"],1)           :7_4:UnDeeper:
*********************** \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1)      :7_4:UnDeeper:
*********************** / undeepers                                                                      :7_4:UnDeeper:
************************ / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :7_4:UnDeeper:
************************ / sameLine: success!                                                        :7_3:Other "in":
*********************** \ undeepers has returned ()                                                   :7_3:Other "in":
*********************** / matching EOL                                                                :7_3:Other "in":
********************** / term p/notLabelTerm                                                           :6_3:Other "NOTI:
*********************** / term p/2:someIndentation expr p                                             :6_3:Other "NOTI:
************************ / someIndentation                                                           :6_3:Other "NOTI:
************************* / myindented: consuming GoDeeper                                          :6_3:Other "NOTI:
*********************** / term p/3:plain p                                                            :6_3:Other "NOTI:
************************ / pParamText                                                                :6_3:Other "NOTI:
************************* / pParamText(flat) first line: pKeyValues                                 :6_3:Other "NOTI:
************************** / pKeyValuesAka                                                         :6_3:Other "NOTI:
*************************** / slAKA                                                               :6_3:Other "NOTI:
**************************** / $*|                                                               :6_3:Other "NOTI:
***************************** / slAKA base                                                      :6_3:Other "NOTI:
****************************** / slKeyValues                                                   :6_3:Other "NOTI:
******************************* / $*|                                                         :6_3:Other "NOTI:
******************************** / |:| some                                                  :6_3:Other "NOTI:
********************************* / |:| base parser                                         :6_3:Other "NOTI:
********************************* \ |:| base parser has returned ("NOTIFY",0)                :6_4:GoDeeper:
********************************* / |:| deeper                                               :6_4:GoDeeper:
********************************** / |:| some GoDeeper                                      :6_4:GoDeeper:
********************************** \ |:| some GoDeeper has returned [GoDeeper]               :6_4:Other "each:
********************************** / |:| some                                                :6_4:Other "each:
*********************************** / |:| base parser                                       :6_4:Other "each:
*********************************** \ |:| base parser has returned ("each of the Notifiable Individuals",0) :7_4:UnDeeper:
*********************************** / |:| deeper                                             :7_4:UnDeeper:
************************************ / |:| some GoDeeper                                    :7_4:UnDeeper:
*********************************** / |:| noMore                                             :7_4:UnDeeper:
*********************************** \ |:| noMore has returned ([],0)                         :7_4:UnDeeper:
********************************** \ |:| some has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
********************************* \ |:| deeper has returned (["each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************** \ |:| some has returned (["NOTIFY","each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************* \ $*| has returned (["NOTIFY","each of the Notifiable Individuals"],1) :7_4:UnDeeper:
******************************* / |>>                                                            :7_4:UnDeeper:
******************************** / |>>/recurse                                                  :7_4:UnDeeper:
******************************** / |>>/base                                                     :7_4:UnDeeper:
********************************* / |?| optional something                                     :7_4:UnDeeper:
********************************** / |>>                                                      :7_4:UnDeeper:
*********************************** / |>>/recurse                                            :7_4:UnDeeper:
*********************************** / |>>/base                                               :7_4:UnDeeper:
************************************ / slTypeSig                                            :7_4:UnDeeper:
************************************* / $>|                                                :7_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :7_4:UnDeeper:
********************************* / |>>/base got Nothing                                       :7_4:UnDeeper:
******************************** \ |>>/base has returned (Nothing,0)                            :7_4:UnDeeper:
******************************* \ |>> has returned (Nothing,0)                                   :7_4:UnDeeper:
****************************** \ slKeyValues has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
***************************** \ slAKA base has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
**************************** \ $*| has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
**************************** / |>>                                                                  :7_4:UnDeeper:
***************************** / |>>/recurse                                                        :7_4:UnDeeper:
***************************** / |>>/base                                                           :7_4:UnDeeper:
****************************** / slAKA optional akapart                                           :7_4:UnDeeper:
******************************* / |?| optional something                                         :7_4:UnDeeper:
******************************** / |>>                                                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / PAKA/akapart                                             :7_4:UnDeeper:
*********************************** / $>|                                                    :7_4:UnDeeper:
************************************ / Aka Token                                            :7_4:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)                :7_4:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)                  :7_4:UnDeeper:
****************************** / |>>/base got Nothing                                             :7_4:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                                  :7_4:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                         :7_4:UnDeeper:
**************************** / |>>                                                                  :7_4:UnDeeper:
***************************** / |>>/recurse                                                        :7_4:UnDeeper:
***************************** / |>>/base                                                           :7_4:UnDeeper:
****************************** / slAKA optional typically                                         :7_4:UnDeeper:
******************************* / |?| optional something                                         :7_4:UnDeeper:
******************************** / |>>                                                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / typically                                                :7_4:UnDeeper:
*********************************** / $>|                                                    :7_4:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)                :7_4:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)                :7_4:UnDeeper:
****************************** / |>>/base got Nothing                                             :7_4:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                                  :7_4:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                         :7_4:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...       :7_4:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                          :7_4:UnDeeper:
*************************** \ slAKA has returned (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing),1) :7_4:UnDeeper:
*************************** / undeepers                                                              :7_4:UnDeeper:
**************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :7_4:UnDeeper:
**************************** / sameLine: success!                                                :7_3:Other "in":
*************************** \ undeepers has returned ()                                           :7_3:Other "in":
************************** \ pKeyValuesAka has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :7_3:Other "in":
************************* \ pParamText(flat) first line: pKeyValues has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :7_3:Other "in":
************************* / pParamText(flat) subsequent lines: sameMany pKeyValues                  :7_3:Other "in":
************************** / manyIndentation/leaf?                                                 :7_3:Other "in":
*************************** / sameMany                                                            :7_3:Other "in":
**************************** / pKeyValuesAka                                                     :7_3:Other "in":
***************************** / slAKA                                                           :7_3:Other "in":
****************************** / $*|                                                           :7_3:Other "in":
******************************* / slAKA base                                                  :7_3:Other "in":
******************************** / slKeyValues                                               :7_3:Other "in":
********************************* / $*|                                                     :7_3:Other "in":
********************************** / |:| some                                              :7_3:Other "in":
*********************************** / |:| base parser                                     :7_3:Other "in":
*********************************** \ |:| base parser has returned ("in",0)                :7_4:GoDeeper:
*********************************** / |:| deeper                                           :7_4:GoDeeper:
************************************ / |:| some GoDeeper                                  :7_4:GoDeeper:
************************************ \ |:| some GoDeeper has returned [GoDeeper]           :7_4:Other "any:
************************************ / |:| some                                            :7_4:Other "any:
************************************* / |:| base parser                                   :7_4:Other "any:
************************************* \ |:| base parser has returned ("any manner that is reasonable in the circumstances",0) :8_4:UnDeeper:
************************************* / |:| deeper                                         :8_4:UnDeeper:
************************************** / |:| some GoDeeper                                :8_4:UnDeeper:
************************************* / |:| noMore                                         :8_4:UnDeeper:
************************************* \ |:| noMore has returned ([],0)                     :8_4:UnDeeper:
************************************ \ |:| some has returned (["any manner that is reasonable in the circumstances"],0) :8_4:UnDeeper:
*********************************** \ |:| deeper has returned (["any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************** \ |:| some has returned (["in","any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************* \ $*| has returned (["in","any manner that is reasonable in the circumstances"],1) :8_4:UnDeeper:
********************************* / |>>                                                        :8_4:UnDeeper:
********************************** / |>>/recurse                                              :8_4:UnDeeper:
********************************** / |>>/base                                                 :8_4:UnDeeper:
*********************************** / |?| optional something                                 :8_4:UnDeeper:
************************************ / |>>                                                  :8_4:UnDeeper:
************************************* / |>>/recurse                                        :8_4:UnDeeper:
************************************* / |>>/base                                           :8_4:UnDeeper:
************************************** / slTypeSig                                        :8_4:UnDeeper:
*************************************** / $>|                                            :8_4:UnDeeper:
*********************************** \ |?| optional something has returned (Nothing,0)        :8_4:UnDeeper:
*********************************** / |>>/base got Nothing                                   :8_4:UnDeeper:
********************************** \ |>>/base has returned (Nothing,0)                        :8_4:UnDeeper:
********************************* \ |>> has returned (Nothing,0)                               :8_4:UnDeeper:
******************************** \ slKeyValues has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
******************************* \ slAKA base has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
****************************** \ $*| has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
****************************** / |>>                                                              :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / slAKA optional akapart                                       :8_4:UnDeeper:
********************************* / |?| optional something                                     :8_4:UnDeeper:
********************************** / |>>                                                      :8_4:UnDeeper:
*********************************** / |>>/recurse                                            :8_4:UnDeeper:
*********************************** / |>>/base                                               :8_4:UnDeeper:
************************************ / PAKA/akapart                                         :8_4:UnDeeper:
************************************* / $>|                                                :8_4:UnDeeper:
************************************** / Aka Token                                        :8_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :8_4:UnDeeper:
******************************** \ slAKA optional akapart has returned (Nothing,0)              :8_4:UnDeeper:
******************************** / |>>/base got Nothing                                         :8_4:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                              :8_4:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                     :8_4:UnDeeper:
****************************** / |>>                                                              :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / slAKA optional typically                                     :8_4:UnDeeper:
********************************* / |?| optional something                                     :8_4:UnDeeper:
********************************** / |>>                                                      :8_4:UnDeeper:
*********************************** / |>>/recurse                                            :8_4:UnDeeper:
*********************************** / |>>/base                                               :8_4:UnDeeper:
************************************ / typically                                            :8_4:UnDeeper:
************************************* / $>|                                                :8_4:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)            :8_4:UnDeeper:
******************************** \ slAKA optional typically has returned (Nothing,0)            :8_4:UnDeeper:
******************************** / |>>/base got Nothing                                         :8_4:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                              :8_4:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                     :8_4:UnDeeper:
****************************** / slAKA: proceeding after base and entityalias are retrieved ...   :8_4:UnDeeper:
****************************** / pAKA: entityalias = Nothing                                      :8_4:UnDeeper:
***************************** \ slAKA has returned (("in" :| ["any manner that is reasonable in the circumstances"],Nothing),1) :8_4:UnDeeper:
***************************** / undeepers                                                          :8_4:UnDeeper:
****************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :8_4:UnDeeper:
****************************** / sameLine: success!                                            :8_3:Other "with:
***************************** \ undeepers has returned ()                                       :8_3:Other "with:
**************************** \ pKeyValuesAka has returned ("in" :| ["any manner that is reasonable in the circumstances"],Nothing) :8_3:Other "with:
**************************** / pKeyValuesAka                                                     :8_3:Other "with:
***************************** / slAKA                                                           :8_3:Other "with:
****************************** / $*|                                                           :8_3:Other "with:
******************************* / slAKA base                                                  :8_3:Other "with:
******************************** / slKeyValues                                               :8_3:Other "with:
********************************* / $*|                                                     :8_3:Other "with:
********************************** / |:| some                                              :8_3:Other "with:
*********************************** / |:| base parser                                     :8_3:Other "with:
*********************************** \ |:| base parser has returned ("with",0)              :8_4:GoDeeper:
*********************************** / |:| deeper                                           :8_4:GoDeeper:
************************************ / |:| some GoDeeper                                  :8_4:GoDeeper:
************************************ \ |:| some GoDeeper has returned [GoDeeper]           :8_4:Other "a me:
************************************ / |:| some                                            :8_4:Other "a me:
************************************* / |:| base parser                                   :8_4:Other "a me:
************************************* \ |:| base parser has returned ("a message obeying a certain format",0) :9_2:UnDeeper:
************************************* / |:| deeper                                     :9_2:UnDeeper:
************************************** / |:| some GoDeeper                            :9_2:UnDeeper:
************************************* / |:| noMore                                     :9_2:UnDeeper:
************************************* \ |:| noMore has returned ([],0)                 :9_2:UnDeeper:
************************************ \ |:| some has returned (["a message obeying a certain format"],0) :9_2:UnDeeper:
*********************************** \ |:| deeper has returned (["a message obeying a certain format"],1) :9_2:UnDeeper:
********************************** \ |:| some has returned (["with","a message obeying a certain format"],1) :9_2:UnDeeper:
********************************* \ $*| has returned (["with","a message obeying a certain format"],1) :9_2:UnDeeper:
********************************* / |>>                                                    :9_2:UnDeeper:
********************************** / |>>/recurse                                          :9_2:UnDeeper:
********************************** / |>>/base                                             :9_2:UnDeeper:
*********************************** / |?| optional something                             :9_2:UnDeeper:
************************************ / |>>                                              :9_2:UnDeeper:
************************************* / |>>/recurse                                    :9_2:UnDeeper:
************************************* / |>>/base                                       :9_2:UnDeeper:
************************************** / slTypeSig                                    :9_2:UnDeeper:
*************************************** / $>|                                        :9_2:UnDeeper:
*********************************** \ |?| optional something has returned (Nothing,0)    :9_2:UnDeeper:
*********************************** / |>>/base got Nothing                               :9_2:UnDeeper:
********************************** \ |>>/base has returned (Nothing,0)                    :9_2:UnDeeper:
********************************* \ |>> has returned (Nothing,0)                           :9_2:UnDeeper:
******************************** \ slKeyValues has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
******************************* \ slAKA base has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
****************************** \ $*| has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
****************************** / |>>                                                          :9_2:UnDeeper:
******************************* / |>>/recurse                                                :9_2:UnDeeper:
******************************* / |>>/base                                                   :9_2:UnDeeper:
******************************** / slAKA optional akapart                                   :9_2:UnDeeper:
********************************* / |?| optional something                                 :9_2:UnDeeper:
********************************** / |>>                                                  :9_2:UnDeeper:
*********************************** / |>>/recurse                                        :9_2:UnDeeper:
*********************************** / |>>/base                                           :9_2:UnDeeper:
************************************ / PAKA/akapart                                     :9_2:UnDeeper:
************************************* / $>|                                            :9_2:UnDeeper:
************************************** / Aka Token                                    :9_2:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)        :9_2:UnDeeper:
******************************** \ slAKA optional akapart has returned (Nothing,0)          :9_2:UnDeeper:
******************************** / |>>/base got Nothing                                     :9_2:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                          :9_2:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                 :9_2:UnDeeper:
****************************** / |>>                                                          :9_2:UnDeeper:
******************************* / |>>/recurse                                                :9_2:UnDeeper:
******************************* / |>>/base                                                   :9_2:UnDeeper:
******************************** / slAKA optional typically                                 :9_2:UnDeeper:
********************************* / |?| optional something                                 :9_2:UnDeeper:
********************************** / |>>                                                  :9_2:UnDeeper:
*********************************** / |>>/recurse                                        :9_2:UnDeeper:
*********************************** / |>>/base                                           :9_2:UnDeeper:
************************************ / typically                                        :9_2:UnDeeper:
************************************* / $>|                                            :9_2:UnDeeper:
********************************* \ |?| optional something has returned (Nothing,0)        :9_2:UnDeeper:
******************************** \ slAKA optional typically has returned (Nothing,0)        :9_2:UnDeeper:
******************************** / |>>/base got Nothing                                     :9_2:UnDeeper:
******************************* \ |>>/base has returned (Nothing,0)                          :9_2:UnDeeper:
****************************** \ |>> has returned (Nothing,0)                                 :9_2:UnDeeper:
****************************** / slAKA: proceeding after base and entityalias are retrieved ... :9_2:UnDeeper:
****************************** / pAKA: entityalias = Nothing                                  :9_2:UnDeeper:
***************************** \ slAKA has returned (("with" :| ["a message obeying a certain format"],Nothing),1) :9_2:UnDeeper:
***************************** / undeepers                                                      :9_2:UnDeeper:
****************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :9_2:UnDeeper:
****************************** / sameLine: success!                                             :9_3:UnDeeper:
***************************** \ undeepers has returned ()                                        :9_3:UnDeeper:
**************************** \ pKeyValuesAka has returned ("with" :| ["a message obeying a certain format"],Nothing) :9_3:UnDeeper:
**************************** / pKeyValuesAka                                                      :9_3:UnDeeper:
***************************** / slAKA                                                            :9_3:UnDeeper:
****************************** / $*|                                                            :9_3:UnDeeper:
******************************* / slAKA base                                                   :9_3:UnDeeper:
******************************** / slKeyValues                                                :9_3:UnDeeper:
********************************* / $*|                                                      :9_3:UnDeeper:
********************************** / |:| some                                               :9_3:UnDeeper:
*********************************** / |:| base parser                                      :9_3:UnDeeper:
************************************ / pNumAsText                                         :9_3:UnDeeper:
*************************** \ sameMany has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************** \ manyIndentation/leaf? has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************* \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
************************ \ pParamText has returned ("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)] :9_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************* \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
********************* / binary(Or)                                                                       :9_3:UnDeeper:
********************* / binary(And)                                                                      :9_3:UnDeeper:
********************* / binary(SetLess)                                                                  :9_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :9_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :9_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :9_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
**************** \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
**************** / binary(Or)                                                                                   :9_4:UnDeeper:
**************** / binary(And)                                                                                  :9_4:UnDeeper:
**************** / binary(SetLess)                                                                              :9_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :9_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :9_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :9_1:Where:
************** \ someIndentation has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
************ \ term p/notLabelTerm has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
*********** \ term p has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
*********** / binary(Or)                                                                                      :9_1:Where:
*********** / binary(And)                                                                                     :9_1:Where:
*********** / binary(SetLess)                                                                                 :9_1:Where:
*********** / binary(SetPlus)                                                                                 :9_1:Where:
********** \ expr pParamText has returned MyLeaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
********* \ dBoolStructP calling exprP has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******** \ pAction calling dBoolStructP has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******* \ pDoAction/pAction has returned Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]) :9_1:Where:
******* / WHERE                                                                                                   :9_1:Where:
******* \ WHERE has returned Where                                                                                 :9_2:GoDeeper:
******* / someIndentation                                                                                          :9_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :9_2:GoDeeper:
******** \ myindented: consuming GoDeeper has returned GoDeeper                                                     :9_3:GoDeeper:
******** / manyIndentation/leaf?                                                                                    :9_3:GoDeeper:
********* / pHornlike                                                                                              :9_3:GoDeeper:
********** / pSrcRef                                                                                              :9_3:GoDeeper:
*********** / pRuleLabel                                                                                         :9_3:GoDeeper:
************ / $>|                                                                                              :9_3:GoDeeper:
********** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing})) :9_3:GoDeeper:
********** / pHornlike / permute                                                                                  :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/uponLimb                                                                                 :9_3:GoDeeper:
************ / preambleParamText:[Upon]                                                                         :9_3:GoDeeper:
************* / $>|                                                                                            :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/givenLimb                                                                                :9_3:GoDeeper:
************ / preambleParamText:[Given]                                                                        :9_3:GoDeeper:
************* / $>|                                                                                            :9_3:GoDeeper:
*********** / whenCase                                                                                           :9_3:GoDeeper:
************ / whenMeansIf                                                                                      :9_3:GoDeeper:
************ / Otherwise                                                                                        :9_3:GoDeeper:
*********** / pHornlike/ambitious                                                                                :9_3:GoDeeper:
************ / $>|                                                                                              :9_3:GoDeeper:
*********** / pHornlike/someStructure                                                                            :9_3:GoDeeper:
************ / manyIndentation/leaf?                                                                            :9_3:GoDeeper:
************* / relPredNextlineWhen                                                                            :9_3:GoDeeper:
************** / pRelPred optIndentedTuple whenCase                                                           :9_3:GoDeeper:
*************** / optIndentedTuple                                                                           :9_3:GoDeeper:
**************** / optIndented                                                                              :9_3:GoDeeper:
***************** / pRelPred                                                                               :9_3:GoDeeper:
****************** / slRelPred                                                                            :9_3:GoDeeper:
******************* / nested simpleHorn                                                                  :9_3:GoDeeper:
******************** / |^|                                                                              :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPConstraint                                                                       :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPBoolStructR                                                                      :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
******************* / RPMT                                                                               :9_3:GoDeeper:
******************** / $*|                                                                              :9_3:GoDeeper:
********************* / slAKA                                                                          :9_3:GoDeeper:
********************** / $*|                                                                          :9_3:GoDeeper:
*********************** / slAKA base                                                                 :9_3:GoDeeper:
************************ / slMultiTerm                                                              :9_3:GoDeeper:
************************* / |:| some                                                               :9_3:GoDeeper:
************************** / |:| base parser                                                      :9_3:GoDeeper:
*************************** / pNumAsText                                                         :9_3:GoDeeper:
************* / relPredSamelineWhen                                                                            :9_3:GoDeeper:
************** / $*|                                                                                          :9_3:GoDeeper:
*************** / slRelPred                                                                                  :9_3:GoDeeper:
**************** / nested simpleHorn                                                                        :9_3:GoDeeper:
***************** / |^|                                                                                    :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPConstraint                                                                             :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPBoolStructR                                                                            :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slMultiTerm                                                                          :9_3:GoDeeper:
******************* / |:| some                                                                           :9_3:GoDeeper:
******************** / |:| base parser                                                                  :9_3:GoDeeper:
********************* / pNumAsText                                                                     :9_3:GoDeeper:
**************** / RPMT                                                                                     :9_3:GoDeeper:
***************** / $*|                                                                                    :9_3:GoDeeper:
****************** / slAKA                                                                                :9_3:GoDeeper:
******************* / $*|                                                                                :9_3:GoDeeper:
******************** / slAKA base                                                                       :9_3:GoDeeper:
********************* / slMultiTerm                                                                    :9_3:GoDeeper:
********************** / |:| some                                                                     :9_3:GoDeeper:
*********************** / |:| base parser                                                            :9_3:GoDeeper:
************************ / pNumAsText                                                               :9_3:GoDeeper:
************ / manyIndentation/deeper; calling someIndentation                                                  :9_3:GoDeeper:
************* / someIndentation                                                                                :9_3:GoDeeper:
************** / myindented: consuming GoDeeper                                                               :9_3:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :9_3:Other "the:
************** / manyIndentation/leaf?                                                                         :9_3:Other "the:
*************** / relPredNextlineWhen                                                                         :9_3:Other "the:
**************** / pRelPred optIndentedTuple whenCase                                                        :9_3:Other "the:
***************** / optIndentedTuple                                                                        :9_3:Other "the:
****************** / optIndented                                                                           :9_3:Other "the:
******************* / pRelPred                                                                            :9_3:Other "the:
******************** / slRelPred                                                                         :9_3:Other "the:
********************* / nested simpleHorn                                                               :9_3:Other "the:
********************** / |^|                                                                           :9_3:Other "the:
********************** / $*|                                                                           :9_3:Other "the:
*********************** / slMultiTerm                                                                 :9_3:Other "the:
************************ / |:| some                                                                  :9_3:Other "the:
************************* / |:| base parser                                                         :9_3:Other "the:
************************* \ |:| base parser has returned ("the Notifiable Individuals",0)            :10_3:UnDeeper:
************************* / |:| deeper                                                               :10_3:UnDeeper:
************************** / |:| some GoDeeper                                                      :10_3:UnDeeper:
************************* / |:| noMore                                                               :10_3:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                           :10_3:UnDeeper:
************************ \ |:| some has returned (["the Notifiable Individuals"],0)                   :10_3:UnDeeper:
*********************** \ slMultiTerm has returned (["the Notifiable Individuals"],0)                  :10_3:UnDeeper:
********************** \ $*| has returned (["the Notifiable Individuals"],0)                            :10_3:UnDeeper:
********************** / |^| deeps                                                                      :10_3:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper]                                           :10_2:Means:
********************** / pBSR                                                                         :10_3:GoDeeper:
*********************** / ppp inner                                                                  :10_3:GoDeeper:
************************ / term p                                                                   :10_3:GoDeeper:
************************* / term p/1a:label directly above                                         :10_3:GoDeeper:
************************** / $*|                                                                  :10_3:GoDeeper:
*************************** / |:| some                                                           :10_3:GoDeeper:
**************************** / |:| base parser                                                  :10_3:GoDeeper:
***************************** / pNumAsText                                                     :10_3:GoDeeper:
************************* / term p/b:label to the left of line below, with EOL                     :10_3:GoDeeper:
************************** / |:| some                                                             :10_3:GoDeeper:
*************************** / |:| base parser                                                    :10_3:GoDeeper:
**************************** / pNumAsText                                                       :10_3:GoDeeper:
************************* / term p/notLabelTerm                                                    :10_3:GoDeeper:
************************** / term p/2:someIndentation expr p                                      :10_3:GoDeeper:
*************************** / someIndentation                                                    :10_3:GoDeeper:
**************************** / myindented: consuming GoDeeper                                   :10_3:GoDeeper:
**************************** \ myindented: consuming GoDeeper has returned GoDeeper              :10_3:Other "the:
**************************** / manyIndentation/leaf?                                             :10_3:Other "the:
***************************** / term p                                                          :10_3:Other "the:
****************************** / term p/1a:label directly above                                :10_3:Other "the:
******************************* / $*|                                                         :10_3:Other "the:
******************************** / |:| some                                                  :10_3:Other "the:
********************************* / |:| base parser                                         :10_3:Other "the:
********************************* \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
********************************* / |:| deeper                                              :11_3:SetLess:
********************************** / |:| some GoDeeper                                     :11_3:SetLess:
********************************* / |:| noMore                                              :11_3:SetLess:
********************************* \ |:| noMore has returned ([],0)                          :11_3:SetLess:
******************************** \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
******************************** / pNumAsText                                                :11_3:SetLess:
****************************** / term p/b:label to the left of line below, with EOL            :10_3:Other "the:
******************************* / |:| some                                                    :10_3:Other "the:
******************************** / |:| base parser                                           :10_3:Other "the:
******************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
******************************** / |:| deeper                                                :11_3:SetLess:
********************************* / |:| some GoDeeper                                       :11_3:SetLess:
******************************** / |:| noMore                                                :11_3:SetLess:
******************************** \ |:| noMore has returned ([],0)                            :11_3:SetLess:
******************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
******************************* / undeepers                                                   :11_3:SetLess:
******************************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :11_3:SetLess:
******************************** / sameLine: success!                                        :11_3:SetLess:
******************************* \ undeepers has returned ()                                   :11_3:SetLess:
******************************* / matching EOL                                                :11_3:SetLess:
****************************** / term p/notLabelTerm                                           :10_3:Other "the:
******************************* / term p/2:someIndentation expr p                             :10_3:Other "the:
******************************** / someIndentation                                           :10_3:Other "the:
********************************* / myindented: consuming GoDeeper                          :10_3:Other "the:
******************************* / term p/3:plain p                                            :10_3:Other "the:
******************************** / pRelPred                                                  :10_3:Other "the:
********************************* / slRelPred                                               :10_3:Other "the:
********************************** / nested simpleHorn                                     :10_3:Other "the:
*********************************** / |^|                                                 :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |^| deeps                                           :11_3:SetLess:
*********************************** \ |^| deeps has returned []                           :11_3:SetLess:
********************************** / RPConstraint                                          :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |>| calling $>>                                     :11_3:SetLess:
************************************ / $>>                                               :11_3:SetLess:
************************************* / $>>/recurse                                     :11_3:SetLess:
************************************* / $>>/base                                        :11_3:SetLess:
********************************** / RPBoolStructR                                         :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slMultiTerm                                       :10_3:Other "the:
************************************* / |:| some                                        :10_3:Other "the:
************************************** / |:| base parser                               :10_3:Other "the:
************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
************************************** / |:| deeper                                    :11_3:SetLess:
*************************************** / |:| some GoDeeper                           :11_3:SetLess:
************************************** / |:| noMore                                    :11_3:SetLess:
************************************** \ |:| noMore has returned ([],0)                :11_3:SetLess:
************************************* \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************ \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** / |>| calling $>>                                     :11_3:SetLess:
************************************ / $>>                                               :11_3:SetLess:
************************************* / $>>/recurse                                     :11_3:SetLess:
************************************* / $>>/base                                        :11_3:SetLess:
********************************** / RPMT                                                  :10_3:Other "the:
*********************************** / $*|                                                 :10_3:Other "the:
************************************ / slAKA                                             :10_3:Other "the:
************************************* / $*|                                             :10_3:Other "the:
************************************** / slAKA base                                    :10_3:Other "the:
*************************************** / slMultiTerm                                 :10_3:Other "the:
**************************************** / |:| some                                  :10_3:Other "the:
***************************************** / |:| base parser                         :10_3:Other "the:
***************************************** \ |:| base parser has returned ("the set of individuals affected by the NDB",0) :11_3:SetLess:
***************************************** / |:| deeper                              :11_3:SetLess:
****************************************** / |:| some GoDeeper                     :11_3:SetLess:
***************************************** / |:| noMore                              :11_3:SetLess:
***************************************** \ |:| noMore has returned ([],0)          :11_3:SetLess:
**************************************** \ |:| some has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*************************************** \ slMultiTerm has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************** \ slAKA base has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************* \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
************************************* / |>>                                             :11_3:SetLess:
************************************** / |>>/recurse                                   :11_3:SetLess:
************************************** / |>>/base                                      :11_3:SetLess:
*************************************** / slAKA optional akapart                      :11_3:SetLess:
**************************************** / |?| optional something                    :11_3:SetLess:
***************************************** / |>>                                     :11_3:SetLess:
****************************************** / |>>/recurse                           :11_3:SetLess:
****************************************** / |>>/base                              :11_3:SetLess:
******************************************* / PAKA/akapart                        :11_3:SetLess:
******************************************** / $>|                               :11_3:SetLess:
********************************************* / Aka Token                       :11_3:SetLess:
**************************************** \ |?| optional something has returned (Nothing,0) :11_3:SetLess:
*************************************** \ slAKA optional akapart has returned (Nothing,0) :11_3:SetLess:
*************************************** / |>>/base got Nothing                        :11_3:SetLess:
************************************** \ |>>/base has returned (Nothing,0)             :11_3:SetLess:
************************************* \ |>> has returned (Nothing,0)                    :11_3:SetLess:
************************************* / |>>                                             :11_3:SetLess:
************************************** / |>>/recurse                                   :11_3:SetLess:
************************************** / |>>/base                                      :11_3:SetLess:
*************************************** / slAKA optional typically                    :11_3:SetLess:
**************************************** / |?| optional something                    :11_3:SetLess:
***************************************** / |>>                                     :11_3:SetLess:
****************************************** / |>>/recurse                           :11_3:SetLess:
****************************************** / |>>/base                              :11_3:SetLess:
******************************************* / typically                           :11_3:SetLess:
******************************************** / $>|                               :11_3:SetLess:
**************************************** \ |?| optional something has returned (Nothing,0) :11_3:SetLess:
*************************************** \ slAKA optional typically has returned (Nothing,0) :11_3:SetLess:
*************************************** / |>>/base got Nothing                        :11_3:SetLess:
************************************** \ |>>/base has returned (Nothing,0)             :11_3:SetLess:
************************************* \ |>> has returned (Nothing,0)                    :11_3:SetLess:
************************************* / slAKA: proceeding after base and entityalias are retrieved ... :11_3:SetLess:
************************************* / pAKA: entityalias = Nothing                     :11_3:SetLess:
************************************ \ slAKA has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
*********************************** \ $*| has returned (["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************** \ RPMT has returned (RPMT ["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************* \ slRelPred has returned (RPMT ["the set of individuals affected by the NDB"],0) :11_3:SetLess:
********************************* / undeepers                                               :11_3:SetLess:
********************************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :11_3:SetLess:
********************************** / sameLine: success!                                    :11_3:SetLess:
********************************* \ undeepers has returned ()                               :11_3:SetLess:
******************************** \ pRelPred has returned RPMT ["the set of individuals affected by the NDB"] :11_3:SetLess:
******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the set of individuals affected by the NDB"]) :11_3:SetLess:
***************************** / binary(Or)                                                      :11_3:SetLess:
***************************** / binary(And)                                                     :11_3:SetLess:
***************************** / binary(SetLess)                                                 :11_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :11_4:GoDeeper:
***************************** / term p                                                           :11_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :11_4:GoDeeper:
******************************* / $*|                                                          :11_4:GoDeeper:
******************************** / |:| some                                                   :11_4:GoDeeper:
********************************* / |:| base parser                                          :11_4:GoDeeper:
********************************** / pNumAsText                                             :11_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :11_4:GoDeeper:
******************************* / |:| some                                                     :11_4:GoDeeper:
******************************** / |:| base parser                                            :11_4:GoDeeper:
********************************* / pNumAsText                                               :11_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :11_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :11_4:GoDeeper:
******************************** / someIndentation                                            :11_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :11_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :11_4:Other "the:
********************************* / manyIndentation/leaf?                                     :11_4:Other "the:
********************************** / term p                                                  :11_4:Other "the:
*********************************** / term p/1a:label directly above                        :11_4:Other "the:
************************************ / $*|                                                 :11_4:Other "the:
************************************* / |:| some                                          :11_4:Other "the:
************************************** / |:| base parser                                 :11_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
************************************** / |:| deeper                                       :11_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :11_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :11_5:Other "Unl:
*************************************** / |:| some                                        :11_5:Other "Unl:
**************************************** / |:| base parser                               :11_5:Other "Unl:
**************************************** \ |:| base parser has returned ("Unlikely",0)  :12_4:UnDeeper:
**************************************** / |:| deeper                                   :12_4:UnDeeper:
***************************************** / |:| some GoDeeper                          :12_4:UnDeeper:
**************************************** / |:| noMore                                   :12_4:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)               :12_4:UnDeeper:
*************************************** \ |:| some has returned (["Unlikely"],0)         :12_4:UnDeeper:
************************************** \ |:| deeper has returned (["Unlikely"],1)         :12_4:UnDeeper:
************************************* \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************* / pNumAsText                                         :12_4:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :11_4:Other "the:
************************************ / |:| some                                            :11_4:Other "the:
************************************* / |:| base parser                                   :11_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
************************************* / |:| deeper                                         :11_5:GoDeeper:
************************************** / |:| some GoDeeper                                :11_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :11_5:Other "Unl:
************************************** / |:| some                                          :11_5:Other "Unl:
*************************************** / |:| base parser                                 :11_5:Other "Unl:
*************************************** \ |:| base parser has returned ("Unlikely",0)    :12_4:UnDeeper:
*************************************** / |:| deeper                                     :12_4:UnDeeper:
**************************************** / |:| some GoDeeper                            :12_4:UnDeeper:
*************************************** / |:| noMore                                     :12_4:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)                 :12_4:UnDeeper:
************************************** \ |:| some has returned (["Unlikely"],0)           :12_4:UnDeeper:
************************************* \ |:| deeper has returned (["Unlikely"],1)           :12_4:UnDeeper:
************************************ \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************ / undeepers                                            :12_4:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :12_4:UnDeeper:
************************************* / sameLine: success!                                   :12_5:UnDeeper:
************************************ \ undeepers has returned ()                              :12_5:UnDeeper:
************************************ / matching EOL                                           :12_5:UnDeeper:
*********************************** / term p/notLabelTerm                                   :11_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :11_4:Other "the:
************************************* / someIndentation                                   :11_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :11_4:Other "the:
************************************ / term p/3:plain p                                    :11_4:Other "the:
************************************* / pRelPred                                          :11_4:Other "the:
************************************** / slRelPred                                       :11_4:Other "the:
*************************************** / nested simpleHorn                             :11_4:Other "the:
**************************************** / |^|                                         :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |^| deeps                                    :12_4:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper] :12_3:SetLess:
*************************************** / RPConstraint                                  :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |>| calling $>>                              :12_4:UnDeeper:
***************************************** / $>>                                        :12_4:UnDeeper:
****************************************** / $>>/recurse                              :12_4:UnDeeper:
****************************************** / $>>/base                                 :12_4:UnDeeper:
*************************************** / RPBoolStructR                                 :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slMultiTerm                               :11_4:Other "the:
****************************************** / |:| some                                :11_4:Other "the:
******************************************* / |:| base parser                       :11_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
******************************************* / |:| deeper                             :11_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :11_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
******************************************** / |:| some                              :11_5:Other "Unl:
********************************************* / |:| base parser                     :11_5:Other "Unl:
********************************************* \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
********************************************* / |:| deeper                         :12_4:UnDeeper:
********************************************** / |:| some GoDeeper                :12_4:UnDeeper:
********************************************* / |:| noMore                         :12_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :12_4:UnDeeper:
******************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
******************************************* \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** / |>| calling $>>                              :12_4:UnDeeper:
***************************************** / $>>                                        :12_4:UnDeeper:
****************************************** / $>>/recurse                              :12_4:UnDeeper:
****************************************** / $>>/base                                 :12_4:UnDeeper:
*************************************** / RPMT                                          :11_4:Other "the:
**************************************** / $*|                                         :11_4:Other "the:
***************************************** / slAKA                                     :11_4:Other "the:
****************************************** / $*|                                     :11_4:Other "the:
******************************************* / slAKA base                            :11_4:Other "the:
******************************************** / slMultiTerm                         :11_4:Other "the:
********************************************* / |:| some                          :11_4:Other "the:
********************************************** / |:| base parser                 :11_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals who are deemed",0) :11_5:GoDeeper:
********************************************** / |:| deeper                       :11_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :11_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :11_5:Other "Unl:
*********************************************** / |:| some                        :11_5:Other "Unl:
************************************************ / |:| base parser               :11_5:Other "Unl:
************************************************ \ |:| base parser has returned ("Unlikely",0) :12_4:UnDeeper:
************************************************ / |:| deeper                   :12_4:UnDeeper:
************************************************* / |:| some GoDeeper          :12_4:UnDeeper:
************************************************ / |:| noMore                   :12_4:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :12_4:UnDeeper:
*********************************************** \ |:| some has returned (["Unlikely"],0) :12_4:UnDeeper:
********************************************** \ |:| deeper has returned (["Unlikely"],1) :12_4:UnDeeper:
********************************************* \ |:| some has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
****************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
****************************************** / |>>                                      :12_4:UnDeeper:
******************************************* / |>>/recurse                            :12_4:UnDeeper:
******************************************* / |>>/base                               :12_4:UnDeeper:
******************************************** / slAKA optional akapart               :12_4:UnDeeper:
********************************************* / |?| optional something             :12_4:UnDeeper:
********************************************** / |>>                              :12_4:UnDeeper:
*********************************************** / |>>/recurse                    :12_4:UnDeeper:
*********************************************** / |>>/base                       :12_4:UnDeeper:
************************************************ / PAKA/akapart                 :12_4:UnDeeper:
************************************************* / $>|                        :12_4:UnDeeper:
************************************************** / Aka Token                :12_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :12_4:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :12_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :12_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :12_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :12_4:UnDeeper:
****************************************** / |>>                                      :12_4:UnDeeper:
******************************************* / |>>/recurse                            :12_4:UnDeeper:
******************************************* / |>>/base                               :12_4:UnDeeper:
******************************************** / slAKA optional typically             :12_4:UnDeeper:
********************************************* / |?| optional something             :12_4:UnDeeper:
********************************************** / |>>                              :12_4:UnDeeper:
*********************************************** / |>>/recurse                    :12_4:UnDeeper:
*********************************************** / |>>/base                       :12_4:UnDeeper:
************************************************ / typically                    :12_4:UnDeeper:
************************************************* / $>|                        :12_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :12_4:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :12_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :12_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :12_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :12_4:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :12_4:UnDeeper:
****************************************** / pAKA: entityalias = Nothing              :12_4:UnDeeper:
***************************************** \ slAKA has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals who are deemed","Unlikely"],1) :12_4:UnDeeper:
************************************** / undeepers                                        :12_4:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :12_4:UnDeeper:
*************************************** / sameLine: success!                               :12_5:UnDeeper:
************************************** \ undeepers has returned ()                          :12_5:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals who are deemed","Unlikely"] :12_5:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************** / binary(Or)                                                 :12_5:UnDeeper:
********************************** / binary(And)                                                :12_5:UnDeeper:
********************************** / binary(SetLess)                                            :12_5:UnDeeper:
********************************** / binary(SetPlus)                                            :12_5:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_5:UnDeeper:
********************************* / myindented: consuming UnDeeper                               :12_5:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper    :12_3:SetLess:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals who are deemed","Unlikely"]) :12_3:SetLess:
***************************** / binary(Or)                                                      :12_3:SetLess:
***************************** / binary(And)                                                     :12_3:SetLess:
***************************** / binary(SetLess)                                                 :12_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :12_4:GoDeeper:
***************************** / term p                                                           :12_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :12_4:GoDeeper:
******************************* / $*|                                                          :12_4:GoDeeper:
******************************** / |:| some                                                   :12_4:GoDeeper:
********************************* / |:| base parser                                          :12_4:GoDeeper:
********************************** / pNumAsText                                             :12_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :12_4:GoDeeper:
******************************* / |:| some                                                     :12_4:GoDeeper:
******************************** / |:| base parser                                            :12_4:GoDeeper:
********************************* / pNumAsText                                               :12_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :12_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :12_4:GoDeeper:
******************************** / someIndentation                                            :12_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :12_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :12_4:Other "the:
********************************* / manyIndentation/leaf?                                     :12_4:Other "the:
********************************** / term p                                                  :12_4:Other "the:
*********************************** / term p/1a:label directly above                        :12_4:Other "the:
************************************ / $*|                                                 :12_4:Other "the:
************************************* / |:| some                                          :12_4:Other "the:
************************************** / |:| base parser                                 :12_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
************************************** / |:| deeper                                       :12_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :12_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :12_5:Other "the:
*************************************** / |:| some                                        :12_5:Other "the:
**************************************** / |:| base parser                               :12_5:Other "the:
**************************************** \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
**************************************** / |:| deeper                                   :13_4:UnDeeper:
***************************************** / |:| some GoDeeper                          :13_4:UnDeeper:
**************************************** / |:| noMore                                   :13_4:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)               :13_4:UnDeeper:
*************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
************************************** \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************* \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************* / pNumAsText                                         :13_4:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :12_4:Other "the:
************************************ / |:| some                                            :12_4:Other "the:
************************************* / |:| base parser                                   :12_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
************************************* / |:| deeper                                         :12_5:GoDeeper:
************************************** / |:| some GoDeeper                                :12_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :12_5:Other "the:
************************************** / |:| some                                          :12_5:Other "the:
*************************************** / |:| base parser                                 :12_5:Other "the:
*************************************** \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
*************************************** / |:| deeper                                     :13_4:UnDeeper:
**************************************** / |:| some GoDeeper                            :13_4:UnDeeper:
*************************************** / |:| noMore                                     :13_4:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)                 :13_4:UnDeeper:
************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************ \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************ / undeepers                                            :13_4:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :13_4:UnDeeper:
************************************* / sameLine: success!                                   :13_5:UnDeeper:
************************************ \ undeepers has returned ()                              :13_5:UnDeeper:
************************************ / matching EOL                                           :13_5:UnDeeper:
*********************************** / term p/notLabelTerm                                   :12_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :12_4:Other "the:
************************************* / someIndentation                                   :12_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :12_4:Other "the:
************************************ / term p/3:plain p                                    :12_4:Other "the:
************************************* / pRelPred                                          :12_4:Other "the:
************************************** / slRelPred                                       :12_4:Other "the:
*************************************** / nested simpleHorn                             :12_4:Other "the:
**************************************** / |^|                                         :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |^| deeps                                    :13_4:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper] :13_3:SetLess:
*************************************** / RPConstraint                                  :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |>| calling $>>                              :13_4:UnDeeper:
***************************************** / $>>                                        :13_4:UnDeeper:
****************************************** / $>>/recurse                              :13_4:UnDeeper:
****************************************** / $>>/base                                 :13_4:UnDeeper:
*************************************** / RPBoolStructR                                 :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slMultiTerm                               :12_4:Other "the:
****************************************** / |:| some                                :12_4:Other "the:
******************************************* / |:| base parser                       :12_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
******************************************* / |:| deeper                             :12_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :12_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
******************************************** / |:| some                              :12_5:Other "the:
********************************************* / |:| base parser                     :12_5:Other "the:
********************************************* \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
********************************************* / |:| deeper                         :13_4:UnDeeper:
********************************************** / |:| some GoDeeper                :13_4:UnDeeper:
********************************************* / |:| noMore                         :13_4:UnDeeper:
********************************************* \ |:| noMore has returned ([],0)     :13_4:UnDeeper:
******************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
******************************************* \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** / |>| calling $>>                              :13_4:UnDeeper:
***************************************** / $>>                                        :13_4:UnDeeper:
****************************************** / $>>/recurse                              :13_4:UnDeeper:
****************************************** / $>>/base                                 :13_4:UnDeeper:
*************************************** / RPMT                                          :12_4:Other "the:
**************************************** / $*|                                         :12_4:Other "the:
***************************************** / slAKA                                     :12_4:Other "the:
****************************************** / $*|                                     :12_4:Other "the:
******************************************* / slAKA base                            :12_4:Other "the:
******************************************** / slMultiTerm                         :12_4:Other "the:
********************************************* / |:| some                          :12_4:Other "the:
********************************************** / |:| base parser                 :12_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals on",0) :12_5:GoDeeper:
********************************************** / |:| deeper                       :12_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :12_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :12_5:Other "the:
*********************************************** / |:| some                        :12_5:Other "the:
************************************************ / |:| base parser               :12_5:Other "the:
************************************************ \ |:| base parser has returned ("the PDPC Exclusion List",0) :13_4:UnDeeper:
************************************************ / |:| deeper                   :13_4:UnDeeper:
************************************************* / |:| some GoDeeper          :13_4:UnDeeper:
************************************************ / |:| noMore                   :13_4:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :13_4:UnDeeper:
*********************************************** \ |:| some has returned (["the PDPC Exclusion List"],0) :13_4:UnDeeper:
********************************************** \ |:| deeper has returned (["the PDPC Exclusion List"],1) :13_4:UnDeeper:
********************************************* \ |:| some has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
****************************************** / |>>                                      :13_4:UnDeeper:
******************************************* / |>>/recurse                            :13_4:UnDeeper:
******************************************* / |>>/base                               :13_4:UnDeeper:
******************************************** / slAKA optional akapart               :13_4:UnDeeper:
********************************************* / |?| optional something             :13_4:UnDeeper:
********************************************** / |>>                              :13_4:UnDeeper:
*********************************************** / |>>/recurse                    :13_4:UnDeeper:
*********************************************** / |>>/base                       :13_4:UnDeeper:
************************************************ / PAKA/akapart                 :13_4:UnDeeper:
************************************************* / $>|                        :13_4:UnDeeper:
************************************************** / Aka Token                :13_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :13_4:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :13_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :13_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :13_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :13_4:UnDeeper:
****************************************** / |>>                                      :13_4:UnDeeper:
******************************************* / |>>/recurse                            :13_4:UnDeeper:
******************************************* / |>>/base                               :13_4:UnDeeper:
******************************************** / slAKA optional typically             :13_4:UnDeeper:
********************************************* / |?| optional something             :13_4:UnDeeper:
********************************************** / |>>                              :13_4:UnDeeper:
*********************************************** / |>>/recurse                    :13_4:UnDeeper:
*********************************************** / |>>/base                       :13_4:UnDeeper:
************************************************ / typically                    :13_4:UnDeeper:
************************************************* / $>|                        :13_4:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :13_4:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :13_4:UnDeeper:
******************************************** / |>>/base got Nothing                 :13_4:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)      :13_4:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)             :13_4:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :13_4:UnDeeper:
****************************************** / pAKA: entityalias = Nothing              :13_4:UnDeeper:
***************************************** \ slAKA has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals on","the PDPC Exclusion List"],1) :13_4:UnDeeper:
************************************** / undeepers                                        :13_4:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :13_4:UnDeeper:
*************************************** / sameLine: success!                               :13_5:UnDeeper:
************************************** \ undeepers has returned ()                          :13_5:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals on","the PDPC Exclusion List"] :13_5:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************** / binary(Or)                                                 :13_5:UnDeeper:
********************************** / binary(And)                                                :13_5:UnDeeper:
********************************** / binary(SetLess)                                            :13_5:UnDeeper:
********************************** / binary(SetPlus)                                            :13_5:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_5:UnDeeper:
********************************* / myindented: consuming UnDeeper                               :13_5:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper    :13_3:SetLess:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"]) :13_3:SetLess:
***************************** / binary(Or)                                                      :13_3:SetLess:
***************************** / binary(And)                                                     :13_3:SetLess:
***************************** / binary(SetLess)                                                 :13_3:SetLess:
***************************** \ binary(SetLess) has returned SetLess                             :13_4:GoDeeper:
***************************** / term p                                                           :13_4:GoDeeper:
****************************** / term p/1a:label directly above                                 :13_4:GoDeeper:
******************************* / $*|                                                          :13_4:GoDeeper:
******************************** / |:| some                                                   :13_4:GoDeeper:
********************************* / |:| base parser                                          :13_4:GoDeeper:
********************************** / pNumAsText                                             :13_4:GoDeeper:
****************************** / term p/b:label to the left of line below, with EOL             :13_4:GoDeeper:
******************************* / |:| some                                                     :13_4:GoDeeper:
******************************** / |:| base parser                                            :13_4:GoDeeper:
********************************* / pNumAsText                                               :13_4:GoDeeper:
****************************** / term p/notLabelTerm                                            :13_4:GoDeeper:
******************************* / term p/2:someIndentation expr p                              :13_4:GoDeeper:
******************************** / someIndentation                                            :13_4:GoDeeper:
********************************* / myindented: consuming GoDeeper                           :13_4:GoDeeper:
********************************* \ myindented: consuming GoDeeper has returned GoDeeper      :13_4:Other "the:
********************************* / manyIndentation/leaf?                                     :13_4:Other "the:
********************************** / term p                                                  :13_4:Other "the:
*********************************** / term p/1a:label directly above                        :13_4:Other "the:
************************************ / $*|                                                 :13_4:Other "the:
************************************* / |:| some                                          :13_4:Other "the:
************************************** / |:| base parser                                 :13_4:Other "the:
************************************** \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
************************************** / |:| deeper                                       :13_5:GoDeeper:
*************************************** / |:| some GoDeeper                              :13_5:GoDeeper:
*************************************** \ |:| some GoDeeper has returned [GoDeeper]       :13_5:Other "the:
*************************************** / |:| some                                        :13_5:Other "the:
**************************************** / |:| base parser                               :13_5:Other "the:
**************************************** \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
**************************************** / |:| deeper                               :1_2:UnDeeper:
***************************************** / |:| some GoDeeper                      :1_2:UnDeeper:
**************************************** / |:| noMore                               :1_2:UnDeeper:
**************************************** \ |:| noMore has returned ([],0)           :1_2:UnDeeper:
*************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
************************************** \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************* \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************* / pNumAsText                                     :1_2:UnDeeper:
*********************************** / term p/b:label to the left of line below, with EOL    :13_4:Other "the:
************************************ / |:| some                                            :13_4:Other "the:
************************************* / |:| base parser                                   :13_4:Other "the:
************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
************************************* / |:| deeper                                         :13_5:GoDeeper:
************************************** / |:| some GoDeeper                                :13_5:GoDeeper:
************************************** \ |:| some GoDeeper has returned [GoDeeper]         :13_5:Other "the:
************************************** / |:| some                                          :13_5:Other "the:
*************************************** / |:| base parser                                 :13_5:Other "the:
*************************************** \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
*************************************** / |:| deeper                                 :1_2:UnDeeper:
**************************************** / |:| some GoDeeper                        :1_2:UnDeeper:
*************************************** / |:| noMore                                 :1_2:UnDeeper:
*************************************** \ |:| noMore has returned ([],0)             :1_2:UnDeeper:
************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************ \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************ / undeepers                                        :1_2:UnDeeper:
************************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :1_2:UnDeeper:
************************************* / sameLine: success!                               :1_3:UnDeeper:
************************************ \ undeepers has returned ()                          :1_3:UnDeeper:
************************************ / matching EOL                                       :1_3:UnDeeper:
*********************************** / term p/notLabelTerm                                   :13_4:Other "the:
************************************ / term p/2:someIndentation expr p                     :13_4:Other "the:
************************************* / someIndentation                                   :13_4:Other "the:
************************************** / myindented: consuming GoDeeper                  :13_4:Other "the:
************************************ / term p/3:plain p                                    :13_4:Other "the:
************************************* / pRelPred                                          :13_4:Other "the:
************************************** / slRelPred                                       :13_4:Other "the:
*************************************** / nested simpleHorn                             :13_4:Other "the:
**************************************** / |^|                                         :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |^| deeps                                :1_2:UnDeeper:
**************************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper,UnDeeper] :EOF:
*************************************** / RPConstraint                                  :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |>| calling $>>                          :1_2:UnDeeper:
***************************************** / $>>                                    :1_2:UnDeeper:
****************************************** / $>>/recurse                          :1_2:UnDeeper:
****************************************** / $>>/base                             :1_2:UnDeeper:
*************************************** / RPBoolStructR                                 :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slMultiTerm                               :13_4:Other "the:
****************************************** / |:| some                                :13_4:Other "the:
******************************************* / |:| base parser                       :13_4:Other "the:
******************************************* \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
******************************************* / |:| deeper                             :13_5:GoDeeper:
******************************************** / |:| some GoDeeper                    :13_5:GoDeeper:
******************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
******************************************** / |:| some                              :13_5:Other "the:
********************************************* / |:| base parser                     :13_5:Other "the:
********************************************* \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
********************************************* / |:| deeper                     :1_2:UnDeeper:
********************************************** / |:| some GoDeeper            :1_2:UnDeeper:
********************************************* / |:| noMore                     :1_2:UnDeeper:
********************************************* \ |:| noMore has returned ([],0) :1_2:UnDeeper:
******************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
******************************************* \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
***************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** / |>| calling $>>                          :1_2:UnDeeper:
***************************************** / $>>                                    :1_2:UnDeeper:
****************************************** / $>>/recurse                          :1_2:UnDeeper:
****************************************** / $>>/base                             :1_2:UnDeeper:
*************************************** / RPMT                                          :13_4:Other "the:
**************************************** / $*|                                         :13_4:Other "the:
***************************************** / slAKA                                     :13_4:Other "the:
****************************************** / $*|                                     :13_4:Other "the:
******************************************* / slAKA base                            :13_4:Other "the:
******************************************** / slMultiTerm                         :13_4:Other "the:
********************************************* / |:| some                          :13_4:Other "the:
********************************************** / |:| base parser                 :13_4:Other "the:
********************************************** \ |:| base parser has returned ("the individuals on",0) :13_5:GoDeeper:
********************************************** / |:| deeper                       :13_5:GoDeeper:
*********************************************** / |:| some GoDeeper              :13_5:GoDeeper:
*********************************************** \ |:| some GoDeeper has returned [GoDeeper] :13_5:Other "the:
*********************************************** / |:| some                        :13_5:Other "the:
************************************************ / |:| base parser               :13_5:Other "the:
************************************************ \ |:| base parser has returned ("the LEA Exclusion List",0) :1_2:UnDeeper:
************************************************ / |:| deeper               :1_2:UnDeeper:
************************************************* / |:| some GoDeeper      :1_2:UnDeeper:
************************************************ / |:| noMore               :1_2:UnDeeper:
************************************************ \ |:| noMore has returned ([],0) :1_2:UnDeeper:
*********************************************** \ |:| some has returned (["the LEA Exclusion List"],0) :1_2:UnDeeper:
********************************************** \ |:| deeper has returned (["the LEA Exclusion List"],1) :1_2:UnDeeper:
********************************************* \ |:| some has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
******************************************** \ slMultiTerm has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
******************************************* \ slAKA base has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
****************************************** / |>>                                  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional akapart           :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>                          :1_2:UnDeeper:
*********************************************** / |>>/recurse                :1_2:UnDeeper:
*********************************************** / |>>/base                   :1_2:UnDeeper:
************************************************ / PAKA/akapart             :1_2:UnDeeper:
************************************************* / $>|                    :1_2:UnDeeper:
************************************************** / Aka Token            :1_2:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
******************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
******************************************** / |>>/base got Nothing             :1_2:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)         :1_2:UnDeeper:
****************************************** / |>>                                  :1_2:UnDeeper:
******************************************* / |>>/recurse                        :1_2:UnDeeper:
******************************************* / |>>/base                           :1_2:UnDeeper:
******************************************** / slAKA optional typically         :1_2:UnDeeper:
********************************************* / |?| optional something         :1_2:UnDeeper:
********************************************** / |>>                          :1_2:UnDeeper:
*********************************************** / |>>/recurse                :1_2:UnDeeper:
*********************************************** / |>>/base                   :1_2:UnDeeper:
************************************************ / typically                :1_2:UnDeeper:
************************************************* / $>|                    :1_2:UnDeeper:
********************************************* \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
******************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
******************************************** / |>>/base got Nothing             :1_2:UnDeeper:
******************************************* \ |>>/base has returned (Nothing,0)  :1_2:UnDeeper:
****************************************** \ |>> has returned (Nothing,0)         :1_2:UnDeeper:
****************************************** / slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
****************************************** / pAKA: entityalias = Nothing          :1_2:UnDeeper:
***************************************** \ slAKA has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
**************************************** \ $*| has returned (["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
*************************************** \ RPMT has returned (RPMT ["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************** \ slRelPred has returned (RPMT ["the individuals on","the LEA Exclusion List"],1) :1_2:UnDeeper:
************************************** / undeepers                                    :1_2:UnDeeper:
*************************************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :1_2:UnDeeper:
*************************************** / sameLine: success!                           :1_3:UnDeeper:
************************************** \ undeepers has returned ()                      :1_3:UnDeeper:
************************************* \ pRelPred has returned RPMT ["the individuals on","the LEA Exclusion List"] :1_3:UnDeeper:
************************************ \ term p/3:plain p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
*********************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************** / binary(Or)                                             :1_3:UnDeeper:
********************************** / binary(And)                                            :1_3:UnDeeper:
********************************** / binary(SetLess)                                        :1_3:UnDeeper:
********************************** / binary(SetPlus)                                        :1_3:UnDeeper:
********************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_3:UnDeeper:
********************************* / myindented: consuming UnDeeper                           :1_3:UnDeeper:
********************************* \ myindented: consuming UnDeeper has returned UnDeeper       :1_4:UnDeeper:
******************************** \ someIndentation has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
******************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
***************************** \ term p has returned MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]) :1_4:UnDeeper:
***************************** / binary(Or)                                                         :1_4:UnDeeper:
***************************** / binary(And)                                                        :1_4:UnDeeper:
***************************** / binary(SetLess)                                                    :1_4:UnDeeper:
***************************** / binary(SetPlus)                                                    :1_4:UnDeeper:
**************************** \ manyIndentation/leaf? has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :1_4:UnDeeper:
**************************** \ myindented: consuming UnDeeper has returned UnDeeper                   :1_5:UnDeeper:
*************************** \ someIndentation has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************** \ term p/2:someIndentation expr p has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************* \ term p/notLabelTerm has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************ \ term p has returned MyAll [MyLeaf (RPMT ["the set of individuals affected by the NDB"]),MyNot (MyLeaf (RPMT ["the individuals who are deemed","Unlikely"])),MyNot (MyLeaf (RPMT ["the individuals on","the PDPC Exclusion List"])),MyNot (MyLeaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
************************ / binary(Or)                                                                     :1_5:UnDeeper:
************************ / binary(And)                                                                    :1_5:UnDeeper:
************************ / binary(SetLess)                                                                :1_5:UnDeeper:
************************ / binary(SetPlus)                                                                :1_5:UnDeeper:
*********************** \ ppp inner has returned All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
********************** \ pBSR has returned All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))] :1_5:UnDeeper:
********************** / constructed simpleHorn; running tellIdFirst                                        :1_5:UnDeeper:
********************* \ nested simpleHorn has returned (RPMT ["the Notifiable Individuals"],-1)              :1_5:UnDeeper:
******************** \ slRelPred has returned (RPMT ["the Notifiable Individuals"],-1)                        :1_5:UnDeeper:
******************** / undeepers                                                                              :1_5:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers              :1_5:UnDeeper:
********************* / sameLine: success!                                                                   :1_5:UnDeeper:
******************** \ undeepers has returned ()                                                              :1_5:UnDeeper:
******************* \ pRelPred has returned RPMT ["the Notifiable Individuals"]                                :1_5:UnDeeper:
******************* / someIndentation                                                                          :1_5:UnDeeper:
******************** / myindented: consuming GoDeeper                                                         :1_5:UnDeeper:
****************** \ optIndented has returned (RPMT ["the Notifiable Individuals"],Nothing)                     :1_5:UnDeeper:
***************** \ optIndentedTuple has returned (RPMT ["the Notifiable Individuals"],Nothing)                  :1_5:UnDeeper:
**************** \ pRelPred optIndentedTuple whenCase has returned (RPMT ["the Notifiable Individuals"],Nothing)  :1_5:UnDeeper:
*************** \ relPredNextlineWhen has returned (RPMT ["the Notifiable Individuals"],Nothing)                   :1_5:UnDeeper:
************** \ manyIndentation/leaf? has returned (RPMT ["the Notifiable Individuals"],Nothing)                   :1_5:UnDeeper:
************** / myindented: consuming UnDeeper                                                                     :1_5:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :EOF:
************* \ someIndentation has returned (RPMT ["the Notifiable Individuals"],Nothing)                :EOF:
************ \ manyIndentation/deeper; calling someIndentation has returned (RPMT ["the Notifiable Individuals"],Nothing) :EOF:
*********** \ pHornlike/someStructure has returned (Nothing,["the Notifiable Individuals"],[HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}]) :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
********** \ pHornlike / permute has returned ((Nothing,["the Notifiable Individuals"],[HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}]),Nothing,Nothing,Nothing) :EOF:
********* \ pHornlike has returned Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing}), defaults = [], symtab = []} :EOF:
********* / pHornlike                                                                                         :EOF:
********** / pSrcRef                                                                                         :EOF:
*********** / pRuleLabel                                                                                    :EOF:
************ / $>|                                                                                         :EOF:
********** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 0, srccol = 0, version = Nothing})) :EOF:
********** / pHornlike / permute                                                                             :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/uponLimb                                                                            :EOF:
************ / preambleParamText:[Upon]                                                                    :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/givenLimb                                                                           :EOF:
************ / preambleParamText:[Given]                                                                   :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/givenLimb                                                                           :EOF:
************ / preambleParamText:[Given]                                                                   :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/uponLimb                                                                            :EOF:
************ / preambleParamText:[Upon]                                                                    :EOF:
************* / $>|                                                                                       :EOF:
*********** / whenCase                                                                                      :EOF:
************ / whenMeansIf                                                                                 :EOF:
************ / Otherwise                                                                                   :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
*********** / pHornlike/ambitious                                                                           :EOF:
************ / $>|                                                                                         :EOF:
*********** / pHornlike/someStructure                                                                       :EOF:
************ / manyIndentation/leaf?                                                                       :EOF:
************* / relPredNextlineWhen                                                                       :EOF:
************** / pRelPred optIndentedTuple whenCase                                                      :EOF:
*************** / optIndentedTuple                                                                      :EOF:
**************** / optIndented                                                                         :EOF:
***************** / pRelPred                                                                          :EOF:
****************** / slRelPred                                                                       :EOF:
******************* / nested simpleHorn                                                             :EOF:
******************** / |^|                                                                         :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPConstraint                                                                  :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPBoolStructR                                                                 :EOF:
******************** / $*|                                                                         :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
******************* / RPMT                                                                          :EOF:
******************** / $*|                                                                         :EOF:
********************* / slAKA                                                                     :EOF:
********************** / $*|                                                                     :EOF:
*********************** / slAKA base                                                            :EOF:
************************ / slMultiTerm                                                         :EOF:
************************* / |:| some                                                          :EOF:
************************** / |:| base parser                                                 :EOF:
*************************** / pNumAsText                                                    :EOF:
************* / relPredSamelineWhen                                                                       :EOF:
************** / $*|                                                                                     :EOF:
*************** / slRelPred                                                                             :EOF:
**************** / nested simpleHorn                                                                   :EOF:
***************** / |^|                                                                               :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPConstraint                                                                        :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPBoolStructR                                                                       :EOF:
***************** / $*|                                                                               :EOF:
****************** / slMultiTerm                                                                     :EOF:
******************* / |:| some                                                                      :EOF:
******************** / |:| base parser                                                             :EOF:
********************* / pNumAsText                                                                :EOF:
**************** / RPMT                                                                                :EOF:
***************** / $*|                                                                               :EOF:
****************** / slAKA                                                                           :EOF:
******************* / $*|                                                                           :EOF:
******************** / slAKA base                                                                  :EOF:
********************* / slMultiTerm                                                               :EOF:
********************** / |:| some                                                                :EOF:
*********************** / |:| base parser                                                       :EOF:
************************ / pNumAsText                                                          :EOF:
************ / manyIndentation/deeper; calling someIndentation                                             :EOF:
************* / someIndentation                                                                           :EOF:
************** / myindented: consuming GoDeeper                                                          :EOF:
******** \ manyIndentation/leaf? has returned [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing}), defaults = [], symtab = []}] :EOF:
******** / myindented: consuming UnDeeper                                                                      :EOF:
****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / term p                                                                                             :2_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / |:| some                                                                                     :2_2:GoDeeper:
************** / |:| base parser                                                                            :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :2_2:GoDeeper:
************ / |:| some                                                                                       :2_2:GoDeeper:
************* / |:| base parser                                                                              :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :2_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :2_2:GoDeeper:
************* / someIndentation                                                                              :2_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :2_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :2_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :2_3:GoDeeper:
***************** / $*|                                                                                    :2_3:GoDeeper:
****************** / |:| some                                                                             :2_3:GoDeeper:
******************* / |:| base parser                                                                    :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :2_3:GoDeeper:
***************** / |:| some                                                                               :2_3:GoDeeper:
****************** / |:| base parser                                                                      :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / term p                                                                            :2_3:Other "it i:
********************* / term p/1a:label directly above                                                  :2_3:Other "it i:
********************** / $*|                                                                           :2_3:Other "it i:
*********************** / |:| some                                                                    :2_3:Other "it i:
************************ / |:| base parser                                                           :2_3:Other "it i:
************************ \ |:| base parser has returned ("it is",0)                                   :2_4:GoDeeper:
************************ / |:| deeper                                                                 :2_4:GoDeeper:
************************* / |:| some GoDeeper                                                        :2_4:GoDeeper:
************************* \ |:| some GoDeeper has returned [GoDeeper]                                 :2_4:Other "an N:
************************* / |:| some                                                                  :2_4:Other "an N:
************************** / |:| base parser                                                         :2_4:Other "an N:
************************** \ |:| base parser has returned ("an NDB",0)                            :3_2:UnDeeper:
************************** / |:| deeper                                                           :3_2:UnDeeper:
*************************** / |:| some GoDeeper                                                  :3_2:UnDeeper:
************************** / |:| noMore                                                           :3_2:UnDeeper:
************************** \ |:| noMore has returned ([],0)                                       :3_2:UnDeeper:
************************* \ |:| some has returned (["an NDB"],0)                                   :3_2:UnDeeper:
************************ \ |:| deeper has returned (["an NDB"],1)                                   :3_2:UnDeeper:
*********************** \ |:| some has returned (["it is","an NDB"],1)                               :3_2:UnDeeper:
*********************** / pNumAsText                                                                 :3_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :2_3:Other "it i:
********************** / |:| some                                                                      :2_3:Other "it i:
*********************** / |:| base parser                                                             :2_3:Other "it i:
*********************** \ |:| base parser has returned ("it is",0)                                     :2_4:GoDeeper:
*********************** / |:| deeper                                                                   :2_4:GoDeeper:
************************ / |:| some GoDeeper                                                          :2_4:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper]                                   :2_4:Other "an N:
************************ / |:| some                                                                    :2_4:Other "an N:
************************* / |:| base parser                                                           :2_4:Other "an N:
************************* \ |:| base parser has returned ("an NDB",0)                              :3_2:UnDeeper:
************************* / |:| deeper                                                             :3_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :3_2:UnDeeper:
************************* / |:| noMore                                                             :3_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :3_2:UnDeeper:
************************ \ |:| some has returned (["an NDB"],0)                                     :3_2:UnDeeper:
*********************** \ |:| deeper has returned (["an NDB"],1)                                     :3_2:UnDeeper:
********************** \ |:| some has returned (["it is","an NDB"],1)                                 :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************** / matching EOL                                                                   :3_3:UnDeeper:
********************* / term p/notLabelTerm                                                             :2_3:Other "it i:
********************** / term p/2:someIndentation expr p                                               :2_3:Other "it i:
*********************** / someIndentation                                                             :2_3:Other "it i:
************************ / myindented: consuming GoDeeper                                            :2_3:Other "it i:
********************** / term p/3:plain p                                                              :2_3:Other "it i:
*********************** / pRelPred                                                                    :2_3:Other "it i:
************************ / slRelPred                                                                 :2_3:Other "it i:
************************* / nested simpleHorn                                                       :2_3:Other "it i:
************************** / |^|                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |^| deeps                                                            :3_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]               :3_1:Unless:
************************* / RPConstraint                                                            :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPBoolStructR                                                           :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slMultiTerm                                                         :2_3:Other "it i:
**************************** / |:| some                                                          :2_3:Other "it i:
***************************** / |:| base parser                                                 :2_3:Other "it i:
***************************** \ |:| base parser has returned ("it is",0)                         :2_4:GoDeeper:
***************************** / |:| deeper                                                       :2_4:GoDeeper:
****************************** / |:| some GoDeeper                                              :2_4:GoDeeper:
****************************** \ |:| some GoDeeper has returned [GoDeeper]                       :2_4:Other "an N:
****************************** / |:| some                                                        :2_4:Other "an N:
******************************* / |:| base parser                                               :2_4:Other "an N:
******************************* \ |:| base parser has returned ("an NDB",0)                  :3_2:UnDeeper:
******************************* / |:| deeper                                                 :3_2:UnDeeper:
******************************** / |:| some GoDeeper                                        :3_2:UnDeeper:
******************************* / |:| noMore                                                 :3_2:UnDeeper:
******************************* \ |:| noMore has returned ([],0)                             :3_2:UnDeeper:
****************************** \ |:| some has returned (["an NDB"],0)                         :3_2:UnDeeper:
***************************** \ |:| deeper has returned (["an NDB"],1)                         :3_2:UnDeeper:
**************************** \ |:| some has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
*************************** \ slMultiTerm has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>| calling $>>                                                      :3_2:UnDeeper:
*************************** / $>>                                                                :3_2:UnDeeper:
**************************** / $>>/recurse                                                      :3_2:UnDeeper:
**************************** / $>>/base                                                         :3_2:UnDeeper:
************************* / RPMT                                                                    :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA                                                               :2_3:Other "it i:
**************************** / $*|                                                               :2_3:Other "it i:
***************************** / slAKA base                                                      :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / |:| some                                                    :2_3:Other "it i:
******************************** / |:| base parser                                           :2_3:Other "it i:
******************************** \ |:| base parser has returned ("it is",0)                   :2_4:GoDeeper:
******************************** / |:| deeper                                                 :2_4:GoDeeper:
********************************* / |:| some GoDeeper                                        :2_4:GoDeeper:
********************************* \ |:| some GoDeeper has returned [GoDeeper]                 :2_4:Other "an N:
********************************* / |:| some                                                  :2_4:Other "an N:
********************************** / |:| base parser                                         :2_4:Other "an N:
********************************** \ |:| base parser has returned ("an NDB",0)            :3_2:UnDeeper:
********************************** / |:| deeper                                           :3_2:UnDeeper:
*********************************** / |:| some GoDeeper                                  :3_2:UnDeeper:
********************************** / |:| noMore                                           :3_2:UnDeeper:
********************************** \ |:| noMore has returned ([],0)                       :3_2:UnDeeper:
********************************* \ |:| some has returned (["an NDB"],0)                   :3_2:UnDeeper:
******************************** \ |:| deeper has returned (["an NDB"],1)                   :3_2:UnDeeper:
******************************* \ |:| some has returned (["it is","an NDB"],1)               :3_2:UnDeeper:
****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
***************************** \ slAKA base has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
**************************** \ $*| has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional akapart                                       :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / PAKA/akapart                                         :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
************************************ / Aka Token                                        :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / |>>                                                              :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / slAKA optional typically                                     :3_2:UnDeeper:
******************************* / |?| optional something                                     :3_2:UnDeeper:
******************************** / |>>                                                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / typically                                            :3_2:UnDeeper:
*********************************** / $>|                                                :3_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :3_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :3_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :3_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :3_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :3_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :3_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :3_2:UnDeeper:
*************************** \ slAKA has returned (["it is","an NDB"],1)                          :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["it is","an NDB"],1)                          :3_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["it is","an NDB"],1)                       :3_2:UnDeeper:
************************ / undeepers                                                                :3_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
************************* / sameLine: success!                                                       :3_3:UnDeeper:
************************ \ undeepers has returned ()                                                  :3_3:UnDeeper:
*********************** \ pRelPred has returned RPMT ["it is","an NDB"]                                :3_3:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_3:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                :3_3:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_3:UnDeeper:
******************** / binary(Or)                                                                         :3_3:UnDeeper:
******************** / binary(And)                                                                        :3_3:UnDeeper:
******************** / binary(SetLess)                                                                    :3_3:UnDeeper:
******************** / binary(SetPlus)                                                                    :3_3:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])              :3_4:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                           :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
*************** / binary(And)                                                                                    :3_4:UnDeeper:
*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                              :3_4:UnDeeper:
************** / myindented: consuming UnDeeper                                                                   :3_4:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :3_1:Unless:
************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                 :3_1:Unless:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_1:Unless:
********** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                              :3_1:Unless:
********** / binary(Or)                                                                                        :3_1:Unless:
********** / binary(And)                                                                                       :3_1:Unless:
********** / binary(SetLess)                                                                                   :3_1:Unless:
********** / binary(SetPlus)                                                                                   :3_1:Unless:
********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / term p                                                                                             :3_2:GoDeeper:
*********** / term p/1a:label directly above                                                                   :3_2:GoDeeper:
************ / $*|                                                                                            :3_2:GoDeeper:
************* / |:| some                                                                                     :3_2:GoDeeper:
************** / |:| base parser                                                                            :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
*********** / term p/b:label to the left of line below, with EOL                                               :3_2:GoDeeper:
************ / |:| some                                                                                       :3_2:GoDeeper:
************* / |:| base parser                                                                              :3_2:GoDeeper:
************** / pNumAsText                                                                                 :3_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :3_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :3_2:GoDeeper:
************* / someIndentation                                                                              :3_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :3_2:GoDeeper:
************** \ myindented: consuming GoDeeper has returned GoDeeper                                         :3_3:GoDeeper:
************** / manyIndentation/leaf?                                                                        :3_3:GoDeeper:
*************** / term p                                                                                     :3_3:GoDeeper:
**************** / term p/1a:label directly above                                                           :3_3:GoDeeper:
***************** / $*|                                                                                    :3_3:GoDeeper:
****************** / |:| some                                                                             :3_3:GoDeeper:
******************* / |:| base parser                                                                    :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
**************** / term p/b:label to the left of line below, with EOL                                       :3_3:GoDeeper:
***************** / |:| some                                                                               :3_3:GoDeeper:
****************** / |:| base parser                                                                      :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :3_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :3_3:GoDeeper:
****************** / someIndentation                                                                      :3_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :3_3:GoDeeper:
******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :3_3:Other "you:
******************* / manyIndentation/leaf?                                                               :3_3:Other "you:
******************** / term p                                                                            :3_3:Other "you:
********************* / term p/1a:label directly above                                                  :3_3:Other "you:
********************** / $*|                                                                           :3_3:Other "you:
*********************** / |:| some                                                                    :3_3:Other "you:
************************ / |:| base parser                                                           :3_3:Other "you:
************************ \ |:| base parser has returned ("you are a Public Agency",0)               :4_2:UnDeeper:
************************ / |:| deeper                                                               :4_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :4_2:UnDeeper:
************************ / |:| noMore                                                               :4_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :4_2:UnDeeper:
*********************** \ |:| some has returned (["you are a Public Agency"],0)                      :4_2:UnDeeper:
*********************** / pNumAsText                                                                 :4_2:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                              :3_3:Other "you:
********************** / |:| some                                                                      :3_3:Other "you:
*********************** / |:| base parser                                                             :3_3:Other "you:
*********************** \ |:| base parser has returned ("you are a Public Agency",0)                 :4_2:UnDeeper:
*********************** / |:| deeper                                                                 :4_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :4_2:UnDeeper:
*********************** / |:| noMore                                                                 :4_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :4_2:UnDeeper:
********************** \ |:| some has returned (["you are a Public Agency"],0)                        :4_2:UnDeeper:
********************** / undeepers                                                                    :4_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :4_2:UnDeeper:
*********************** / sameLine: success!                                                         :4_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :4_2:UnDeeper:
********************** / matching EOL                                                                 :4_2:UnDeeper:
********************* / term p/notLabelTerm                                                             :3_3:Other "you:
********************** / term p/2:someIndentation expr p                                               :3_3:Other "you:
*********************** / someIndentation                                                             :3_3:Other "you:
************************ / myindented: consuming GoDeeper                                            :3_3:Other "you:
********************** / term p/3:plain p                                                              :3_3:Other "you:
*********************** / pRelPred                                                                    :3_3:Other "you:
************************ / slRelPred                                                                 :3_3:Other "you:
************************* / nested simpleHorn                                                       :3_3:Other "you:
************************** / |^|                                                                   :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |^| deeps                                                            :4_2:UnDeeper:
************************** \ |^| deeps has returned [UnDeeper,UnDeeper]                        :4_1:Party:
************************* / RPConstraint                                                            :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPBoolStructR                                                           :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slMultiTerm                                                         :3_3:Other "you:
**************************** / |:| some                                                          :3_3:Other "you:
***************************** / |:| base parser                                                 :3_3:Other "you:
***************************** \ |:| base parser has returned ("you are a Public Agency",0)     :4_2:UnDeeper:
***************************** / |:| deeper                                                     :4_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :4_2:UnDeeper:
***************************** / |:| noMore                                                     :4_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :4_2:UnDeeper:
**************************** \ |:| some has returned (["you are a Public Agency"],0)            :4_2:UnDeeper:
*************************** \ slMultiTerm has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************** / |>| calling $>>                                                      :4_2:UnDeeper:
*************************** / $>>                                                                :4_2:UnDeeper:
**************************** / $>>/recurse                                                      :4_2:UnDeeper:
**************************** / $>>/base                                                         :4_2:UnDeeper:
************************* / RPMT                                                                    :3_3:Other "you:
************************** / $*|                                                                   :3_3:Other "you:
*************************** / slAKA                                                               :3_3:Other "you:
**************************** / $*|                                                               :3_3:Other "you:
***************************** / slAKA base                                                      :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / |:| some                                                    :3_3:Other "you:
******************************** / |:| base parser                                           :3_3:Other "you:
******************************** \ |:| base parser has returned ("you are a Public Agency",0) :4_2:UnDeeper:
******************************** / |:| deeper                                               :4_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :4_2:UnDeeper:
******************************** / |:| noMore                                               :4_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :4_2:UnDeeper:
******************************* \ |:| some has returned (["you are a Public Agency"],0)      :4_2:UnDeeper:
****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
***************************** \ slAKA base has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
**************************** \ $*| has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / PAKA/akapart                                         :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
************************************ / Aka Token                                        :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / |>>                                                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>                                                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / typically                                            :4_2:UnDeeper:
*********************************** / $>|                                                :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** / |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
**************************** \ |>> has returned (Nothing,0)                                     :4_2:UnDeeper:
**************************** / slAKA: proceeding after base and entityalias are retrieved ...   :4_2:UnDeeper:
**************************** / pAKA: entityalias = Nothing                                      :4_2:UnDeeper:
*************************** \ slAKA has returned (["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************** \ $*| has returned (["you are a Public Agency"],0)                     :4_2:UnDeeper:
************************* \ RPMT has returned (RPMT ["you are a Public Agency"],0)                 :4_2:UnDeeper:
************************ \ slRelPred has returned (RPMT ["you are a Public Agency"],0)              :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* / sameLine: success!                                                     :4_2:UnDeeper:
************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
*********************** \ pRelPred has returned RPMT ["you are a Public Agency"]                     :4_2:UnDeeper:
********************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_2:UnDeeper:
********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])     :4_2:UnDeeper:
******************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_2:UnDeeper:
******************** / binary(Or)                                                                       :4_2:UnDeeper:
******************** / binary(And)                                                                      :4_2:UnDeeper:
******************** / binary(SetLess)                                                                  :4_2:UnDeeper:
******************** / binary(SetPlus)                                                                  :4_2:UnDeeper:
******************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])       :4_2:UnDeeper:
******************* / myindented: consuming UnDeeper                                                     :4_2:UnDeeper:
******************* \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_3:UnDeeper:
****************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
***************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_3:UnDeeper:
**************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                :4_3:UnDeeper:
*************** / binary(Or)                                                                                   :4_3:UnDeeper:
*************** / binary(And)                                                                                  :4_3:UnDeeper:
*************** / binary(SetLess)                                                                              :4_3:UnDeeper:
*************** / binary(SetPlus)                                                                              :4_3:UnDeeper:
************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                   :4_3:UnDeeper:
************** / myindented: consuming UnDeeper                                                                 :4_3:UnDeeper:
************** \ myindented: consuming UnDeeper has returned UnDeeper                                      :4_1:Party:
************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
************ \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_1:Party:
*********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                      :4_1:Party:
********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                     :4_1:Party:
********** / binary(Or)                                                                                        :4_1:Party:
********** / binary(And)                                                                                       :4_1:Party:
********** / binary(SetLess)                                                                                   :4_1:Party:
********** / binary(SetPlus)                                                                                   :4_1:Party:
********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pTemporal/eventually                                                                                    :4_1:Party:
******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
******* / pTemporal/vaguely                                                                                       :4_1:Party:
******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / |:| some                                                                                :4_2:Other "You":
***************** / |:| base parser                                                                       :4_2:Other "You":
***************** \ |:| base parser has returned ("You",0)                                                 :5_2:UnDeeper:
***************** / |:| deeper                                                                             :5_2:UnDeeper:
****************** / |:| some GoDeeper                                                                    :5_2:UnDeeper:
***************** / |:| noMore                                                                             :5_2:UnDeeper:
***************** \ |:| noMore has returned ([],0)                                                         :5_2:UnDeeper:
**************** \ |:| some has returned (["You"],0)                                                        :5_2:UnDeeper:
*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional akapart                                                                     :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional akapart has returned (Nothing,0)                                            :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / |>>                                                                                            :5_2:UnDeeper:
************** / |>>/recurse                                                                                  :5_2:UnDeeper:
************** / |>>/base                                                                                     :5_2:UnDeeper:
*************** / slAKA optional typically                                                                   :5_2:UnDeeper:
**************** / |?| optional something                                                                   :5_2:UnDeeper:
***************** / |>>                                                                                    :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
**************** \ |?| optional something has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** \ slAKA optional typically has returned (Nothing,0)                                          :5_2:UnDeeper:
*************** / |>>/base got Nothing                                                                       :5_2:UnDeeper:
************** \ |>>/base has returned (Nothing,0)                                                            :5_2:UnDeeper:
************* \ |>> has returned (Nothing,0)                                                                   :5_2:UnDeeper:
************* / slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* / pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* / sameLine: success!                                                                             :5_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pTemporal/eventually                                                                                    :5_1:Must:
******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
******* / pTemporal/vaguely                                                                                       :5_1:Must:
******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / |:| some                                                                                   :5_2:GoDeeper:
*************** / |:| base parser                                                                          :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :5_2:GoDeeper:
************* / |:| some                                                                                     :5_2:GoDeeper:
************** / |:| base parser                                                                            :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :5_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :5_3:GoDeeper:
**************** / term p                                                                                   :5_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :5_3:GoDeeper:
****************** / $*|                                                                                  :5_3:GoDeeper:
******************* / |:| some                                                                           :5_3:GoDeeper:
******************** / |:| base parser                                                                  :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :5_3:GoDeeper:
****************** / |:| some                                                                             :5_3:GoDeeper:
******************* / |:| base parser                                                                    :5_3:GoDeeper:
******************** / pNumAsText                                                                       :5_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :5_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :5_3:GoDeeper:
******************* / someIndentation                                                                    :5_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :5_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :5_3:Before:
******************** / manyIndentation/leaf?                                                             :5_3:Before:
********************* / term p                                                                          :5_3:Before:
********************** / term p/1a:label directly above                                                :5_3:Before:
*********************** / $*|                                                                         :5_3:Before:
************************ / |:| some                                                                  :5_3:Before:
************************* / |:| base parser                                                         :5_3:Before:
************************** / pNumAsText                                                            :5_3:Before:
********************** / term p/b:label to the left of line below, with EOL                            :5_3:Before:
*********************** / |:| some                                                                    :5_3:Before:
************************ / |:| base parser                                                           :5_3:Before:
************************* / pNumAsText                                                              :5_3:Before:
********************** / term p/notLabelTerm                                                           :5_3:Before:
*********************** / term p/2:someIndentation expr p                                             :5_3:Before:
************************ / someIndentation                                                           :5_3:Before:
************************* / myindented: consuming GoDeeper                                          :5_3:Before:
*********************** / term p/3:plain p                                                            :5_3:Before:
************************ / pParamText                                                                :5_3:Before:
************************* / pParamText(flat) first line: pKeyValues                                 :5_3:Before:
************************** / pKeyValuesAka                                                         :5_3:Before:
*************************** / slAKA                                                               :5_3:Before:
**************************** / $*|                                                               :5_3:Before:
***************************** / slAKA base                                                      :5_3:Before:
****************************** / slKeyValues                                                   :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / |:| some                                                  :5_3:Before:
********************************* / |:| base parser                                         :5_3:Before:
********************************** / pNumAsText                                            :5_3:Before:
******************** / manyIndentation/deeper; calling someIndentation                                   :5_3:Before:
********************* / someIndentation                                                                 :5_3:Before:
********************** / myindented: consuming GoDeeper                                                :5_3:Before:
****************** / term p/3:plain p                                                                     :5_3:GoDeeper:
******************* / pParamText                                                                         :5_3:GoDeeper:
******************** / pParamText(flat) first line: pKeyValues                                          :5_3:GoDeeper:
********************* / pKeyValuesAka                                                                  :5_3:GoDeeper:
********************** / slAKA                                                                        :5_3:GoDeeper:
*********************** / $*|                                                                        :5_3:GoDeeper:
************************ / slAKA base                                                               :5_3:GoDeeper:
************************* / slKeyValues                                                            :5_3:GoDeeper:
************************** / $*|                                                                  :5_3:GoDeeper:
*************************** / |:| some                                                           :5_3:GoDeeper:
**************************** / |:| base parser                                                  :5_3:GoDeeper:
***************************** / pNumAsText                                                     :5_3:GoDeeper:
*************** / manyIndentation/deeper; calling someIndentation                                            :5_3:GoDeeper:
**************** / someIndentation                                                                          :5_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :5_3:GoDeeper:
***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :5_3:Before:
***************** / manyIndentation/leaf?                                                                   :5_3:Before:
****************** / term p                                                                                :5_3:Before:
******************* / term p/1a:label directly above                                                      :5_3:Before:
******************** / $*|                                                                               :5_3:Before:
********************* / |:| some                                                                        :5_3:Before:
********************** / |:| base parser                                                               :5_3:Before:
*********************** / pNumAsText                                                                  :5_3:Before:
******************* / term p/b:label to the left of line below, with EOL                                  :5_3:Before:
******************** / |:| some                                                                          :5_3:Before:
********************* / |:| base parser                                                                 :5_3:Before:
********************** / pNumAsText                                                                    :5_3:Before:
******************* / term p/notLabelTerm                                                                 :5_3:Before:
******************** / term p/2:someIndentation expr p                                                   :5_3:Before:
********************* / someIndentation                                                                 :5_3:Before:
********************** / myindented: consuming GoDeeper                                                :5_3:Before:
******************** / term p/3:plain p                                                                  :5_3:Before:
********************* / pParamText                                                                      :5_3:Before:
********************** / pParamText(flat) first line: pKeyValues                                       :5_3:Before:
*********************** / pKeyValuesAka                                                               :5_3:Before:
************************ / slAKA                                                                     :5_3:Before:
************************* / $*|                                                                     :5_3:Before:
************************** / slAKA base                                                            :5_3:Before:
*************************** / slKeyValues                                                         :5_3:Before:
**************************** / $*|                                                               :5_3:Before:
***************************** / |:| some                                                        :5_3:Before:
****************************** / |:| base parser                                               :5_3:Before:
******************************* / pNumAsText                                                  :5_3:Before:
***************** / manyIndentation/deeper; calling someIndentation                                         :5_3:Before:
****************** / someIndentation                                                                       :5_3:Before:
******************* / myindented: consuming GoDeeper                                                      :5_3:Before:
************* / term p/3:plain p                                                                             :5_2:GoDeeper:
************** / pParamText                                                                                 :5_2:GoDeeper:
*************** / pParamText(flat) first line: pKeyValues                                                  :5_2:GoDeeper:
**************** / pKeyValuesAka                                                                          :5_2:GoDeeper:
***************** / slAKA                                                                                :5_2:GoDeeper:
****************** / $*|                                                                                :5_2:GoDeeper:
******************* / slAKA base                                                                       :5_2:GoDeeper:
******************** / slKeyValues                                                                    :5_2:GoDeeper:
********************* / $*|                                                                          :5_2:GoDeeper:
********************** / |:| some                                                                   :5_2:GoDeeper:
*********************** / |:| base parser                                                          :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
*** / pTypeDefinition                                                                                                 :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
*** / pConstitutiveRule                                                                                               :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / |:| some                                                                                      :2_1:If:
************* / |:| base parser                                                                             :2_1:If:
************** / pNumAsText                                                                                :2_1:If:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
*** / pScenarioRule                                                                                                   :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
**** / pExpect                                                                                                       :2_1:If:
*** / pHornlike                                                                                                       :2_1:If:
**** / pSrcRef                                                                                                       :2_1:If:
***** / pRuleLabel                                                                                                  :2_1:If:
****** / $>|                                                                                                       :2_1:If:
**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / term p                                                                                                 :2_2:GoDeeper:
********* / term p/1a:label directly above                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / |:| some                                                                                         :2_2:GoDeeper:
************ / |:| base parser                                                                                :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                   :2_2:GoDeeper:
********** / |:| some                                                                                           :2_2:GoDeeper:
*********** / |:| base parser                                                                                  :2_2:GoDeeper:
************ / pNumAsText                                                                                     :2_2:GoDeeper:
********* / term p/notLabelTerm                                                                                  :2_2:GoDeeper:
********** / term p/2:someIndentation expr p                                                                    :2_2:GoDeeper:
*********** / someIndentation                                                                                  :2_2:GoDeeper:
************ / myindented: consuming GoDeeper                                                                 :2_2:GoDeeper:
************ \ myindented: consuming GoDeeper has returned GoDeeper                                             :2_3:GoDeeper:
************ / manyIndentation/leaf?                                                                            :2_3:GoDeeper:
************* / term p                                                                                         :2_3:GoDeeper:
************** / term p/1a:label directly above                                                               :2_3:GoDeeper:
*************** / $*|                                                                                        :2_3:GoDeeper:
**************** / |:| some                                                                                 :2_3:GoDeeper:
***************** / |:| base parser                                                                        :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
************** / term p/b:label to the left of line below, with EOL                                           :2_3:GoDeeper:
*************** / |:| some                                                                                   :2_3:GoDeeper:
**************** / |:| base parser                                                                          :2_3:GoDeeper:
***************** / pNumAsText                                                                             :2_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :2_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :2_3:GoDeeper:
**************** / someIndentation                                                                          :2_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :2_3:GoDeeper:
***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_3:Other "it i:
***************** / manyIndentation/leaf?                                                                   :2_3:Other "it i:
****************** / term p                                                                                :2_3:Other "it i:
******************* / term p/1a:label directly above                                                      :2_3:Other "it i:
******************** / $*|                                                                               :2_3:Other "it i:
********************* / |:| some                                                                        :2_3:Other "it i:
********************** / |:| base parser                                                               :2_3:Other "it i:
********************** \ |:| base parser has returned ("it is",0)                                       :2_4:GoDeeper:
********************** / |:| deeper                                                                     :2_4:GoDeeper:
*********************** / |:| some GoDeeper                                                            :2_4:GoDeeper:
*********************** \ |:| some GoDeeper has returned [GoDeeper]                                     :2_4:Other "an N:
*********************** / |:| some                                                                      :2_4:Other "an N:
************************ / |:| base parser                                                             :2_4:Other "an N:
************************ \ |:| base parser has returned ("an NDB",0)                                :3_2:UnDeeper:
************************ / |:| deeper                                                               :3_2:UnDeeper:
************************* / |:| some GoDeeper                                                      :3_2:UnDeeper:
************************ / |:| noMore                                                               :3_2:UnDeeper:
************************ \ |:| noMore has returned ([],0)                                           :3_2:UnDeeper:
*********************** \ |:| some has returned (["an NDB"],0)                                       :3_2:UnDeeper:
********************** \ |:| deeper has returned (["an NDB"],1)                                       :3_2:UnDeeper:
********************* \ |:| some has returned (["it is","an NDB"],1)                                   :3_2:UnDeeper:
********************* / pNumAsText                                                                     :3_2:UnDeeper:
******************* / term p/b:label to the left of line below, with EOL                                  :2_3:Other "it i:
******************** / |:| some                                                                          :2_3:Other "it i:
********************* / |:| base parser                                                                 :2_3:Other "it i:
********************* \ |:| base parser has returned ("it is",0)                                         :2_4:GoDeeper:
********************* / |:| deeper                                                                       :2_4:GoDeeper:
********************** / |:| some GoDeeper                                                              :2_4:GoDeeper:
********************** \ |:| some GoDeeper has returned [GoDeeper]                                       :2_4:Other "an N:
********************** / |:| some                                                                        :2_4:Other "an N:
*********************** / |:| base parser                                                               :2_4:Other "an N:
*********************** \ |:| base parser has returned ("an NDB",0)                                  :3_2:UnDeeper:
*********************** / |:| deeper                                                                 :3_2:UnDeeper:
************************ / |:| some GoDeeper                                                        :3_2:UnDeeper:
*********************** / |:| noMore                                                                 :3_2:UnDeeper:
*********************** \ |:| noMore has returned ([],0)                                             :3_2:UnDeeper:
********************** \ |:| some has returned (["an NDB"],0)                                         :3_2:UnDeeper:
********************* \ |:| deeper has returned (["an NDB"],1)                                         :3_2:UnDeeper:
******************** \ |:| some has returned (["it is","an NDB"],1)                                     :3_2:UnDeeper:
******************** / undeepers                                                                        :3_2:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers         :3_2:UnDeeper:
********************* / sameLine: success!                                                               :3_3:UnDeeper:
******************** \ undeepers has returned ()                                                          :3_3:UnDeeper:
******************** / matching EOL                                                                       :3_3:UnDeeper:
******************* / term p/notLabelTerm                                                                 :2_3:Other "it i:
******************** / term p/2:someIndentation expr p                                                   :2_3:Other "it i:
********************* / someIndentation                                                                 :2_3:Other "it i:
********************** / myindented: consuming GoDeeper                                                :2_3:Other "it i:
******************** / term p/3:plain p                                                                  :2_3:Other "it i:
********************* / pRelPred                                                                        :2_3:Other "it i:
********************** / slRelPred                                                                     :2_3:Other "it i:
*********************** / nested simpleHorn                                                           :2_3:Other "it i:
************************ / |^|                                                                       :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
************************ \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper]                   :3_1:Unless:
*********************** / RPConstraint                                                                :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / $>>                                                                    :3_2:UnDeeper:
************************** / $>>/recurse                                                          :3_2:UnDeeper:
************************** / $>>/base                                                             :3_2:UnDeeper:
*********************** / RPBoolStructR                                                               :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slMultiTerm                                                             :2_3:Other "it i:
************************** / |:| some                                                              :2_3:Other "it i:
*************************** / |:| base parser                                                     :2_3:Other "it i:
*************************** \ |:| base parser has returned ("it is",0)                             :2_4:GoDeeper:
*************************** / |:| deeper                                                           :2_4:GoDeeper:
**************************** / |:| some GoDeeper                                                  :2_4:GoDeeper:
**************************** \ |:| some GoDeeper has returned [GoDeeper]                           :2_4:Other "an N:
**************************** / |:| some                                                            :2_4:Other "an N:
***************************** / |:| base parser                                                   :2_4:Other "an N:
***************************** \ |:| base parser has returned ("an NDB",0)                      :3_2:UnDeeper:
***************************** / |:| deeper                                                     :3_2:UnDeeper:
****************************** / |:| some GoDeeper                                            :3_2:UnDeeper:
***************************** / |:| noMore                                                     :3_2:UnDeeper:
***************************** \ |:| noMore has returned ([],0)                                 :3_2:UnDeeper:
**************************** \ |:| some has returned (["an NDB"],0)                             :3_2:UnDeeper:
*************************** \ |:| deeper has returned (["an NDB"],1)                             :3_2:UnDeeper:
************************** \ |:| some has returned (["it is","an NDB"],1)                         :3_2:UnDeeper:
************************* \ slMultiTerm has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / $>>                                                                    :3_2:UnDeeper:
************************** / $>>/recurse                                                          :3_2:UnDeeper:
************************** / $>>/base                                                             :3_2:UnDeeper:
*********************** / RPMT                                                                        :2_3:Other "it i:
************************ / $*|                                                                       :2_3:Other "it i:
************************* / slAKA                                                                   :2_3:Other "it i:
************************** / $*|                                                                   :2_3:Other "it i:
*************************** / slAKA base                                                          :2_3:Other "it i:
**************************** / slMultiTerm                                                       :2_3:Other "it i:
***************************** / |:| some                                                        :2_3:Other "it i:
****************************** / |:| base parser                                               :2_3:Other "it i:
****************************** \ |:| base parser has returned ("it is",0)                       :2_4:GoDeeper:
****************************** / |:| deeper                                                     :2_4:GoDeeper:
******************************* / |:| some GoDeeper                                            :2_4:GoDeeper:
******************************* \ |:| some GoDeeper has returned [GoDeeper]                     :2_4:Other "an N:
******************************* / |:| some                                                      :2_4:Other "an N:
******************************** / |:| base parser                                             :2_4:Other "an N:
******************************** \ |:| base parser has returned ("an NDB",0)                :3_2:UnDeeper:
******************************** / |:| deeper                                               :3_2:UnDeeper:
********************************* / |:| some GoDeeper                                      :3_2:UnDeeper:
******************************** / |:| noMore                                               :3_2:UnDeeper:
******************************** \ |:| noMore has returned ([],0)                           :3_2:UnDeeper:
******************************* \ |:| some has returned (["an NDB"],0)                       :3_2:UnDeeper:
****************************** \ |:| deeper has returned (["an NDB"],1)                       :3_2:UnDeeper:
***************************** \ |:| some has returned (["it is","an NDB"],1)                   :3_2:UnDeeper:
**************************** \ slMultiTerm has returned (["it is","an NDB"],1)                  :3_2:UnDeeper:
*************************** \ slAKA base has returned (["it is","an NDB"],1)                     :3_2:UnDeeper:
************************** \ $*| has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************** / |>>                                                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>                                                          :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / PAKA/akapart                                             :3_2:UnDeeper:
********************************* / $>|                                                    :3_2:UnDeeper:
********************************** / Aka Token                                            :3_2:UnDeeper:
***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** / |>>/base got Nothing                                             :3_2:UnDeeper:
*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
************************** \ |>> has returned (Nothing,0)                                         :3_2:UnDeeper:
************************** / |>>                                                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>                                                          :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / typically                                                :3_2:UnDeeper:
********************************* / $>|                                                    :3_2:UnDeeper:
***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** / |>>/base got Nothing                                             :3_2:UnDeeper:
*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
************************** \ |>> has returned (Nothing,0)                                         :3_2:UnDeeper:
************************** / slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** / pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
************************* \ slAKA has returned (["it is","an NDB"],1)                              :3_2:UnDeeper:
************************ \ $*| has returned (["it is","an NDB"],1)                                  :3_2:UnDeeper:
*********************** \ RPMT has returned (RPMT ["it is","an NDB"],1)                              :3_2:UnDeeper:
********************** \ slRelPred has returned (RPMT ["it is","an NDB"],1)                           :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** / sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers     :3_2:UnDeeper:
*********************** / sameLine: success!                                                           :3_3:UnDeeper:
********************** \ undeepers has returned ()                                                      :3_3:UnDeeper:
********************* \ pRelPred has returned RPMT ["it is","an NDB"]                                    :3_3:UnDeeper:
******************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])                     :3_3:UnDeeper:
******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                    :3_3:UnDeeper:
****************** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
****************** / binary(And)                                                                            :3_3:UnDeeper:
****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_3:UnDeeper:
***************** / myindented: consuming UnDeeper                                                           :3_3:UnDeeper:
***************** \ myindented: consuming UnDeeper has returned UnDeeper                                       :3_4:UnDeeper:
**************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                                :3_4:UnDeeper:
*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                  :3_4:UnDeeper:
************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                                :3_4:UnDeeper:
************* \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                               :3_4:UnDeeper:
************* / binary(Or)                                                                                         :3_4:UnDeeper:
************* / binary(And)                                                                                        :3_4:UnDeeper:
************* / binary(SetLess)                                                                                    :3_4:UnDeeper:
************* / binary(SetPlus)                                                                                    :3_4:UnDeeper:
************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                                  :3_4:UnDeeper:
************ / myindented: consuming UnDeeper                                                                       :3_4:UnDeeper:
************ \ myindented: consuming UnDeeper has returned UnDeeper                                          :3_1:Unless:
*********** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_1:Unless:
********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                     :3_1:Unless:
********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_1:Unless:
******** \ term p has returned MyLeaf (RPMT ["it is","an NDB"])                                                  :3_1:Unless:
******** / binary(Or)                                                                                            :3_1:Unless:
******** / binary(And)                                                                                           :3_1:Unless:
******** / binary(SetLess)                                                                                       :3_1:Unless:
******** / binary(SetPlus)                                                                                       :3_1:Unless:
******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** / |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / |:| some                                                                        :3_1:Unless:
******************** / |:| base parser                                                               :3_1:Unless:
********************* / pNumAsText                                                                  :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** / |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / |:| some                                                                                    :3_1:Unless:
************** / |:| base parser                                                                           :3_1:Unless:
*************** / pNumAsText                                                                              :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / |:| some                                                                              :3_1:Unless:
***************** / |:| base parser                                                                     :3_1:Unless:
****************** / pNumAsText                                                                        :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
*** / pRuleLabel                                                                                                      :2_1:If:
**** / $>|                                                                                                           :2_1:If:
*** / pRule: unwrapping indentation and recursing                                                                     :2_1:If:
**** / myindented: consuming GoDeeper                                                                                :2_1:If:
* final
:PROPERTIES:
:VISIBILITY: all
:END:


PDPA
  pdpadbno-7 FAILED [1]

Failures:

  test/Spec.hs:120:3: 
  1) PDPA pdpadbno-7
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Nothing, lest = Nothing, rlabel = Just ("\167",2,"Notify Individuals"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Just (All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))])}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 9, version = Nothing}), defaults = [], symtab = []}], defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected If
       expecting end of input
       §§                                                 Notify Individuals                                                                                                                                                                                         
       ✳ IF                                               TRUE                                               it is                                              an NDB                                                                                               
       UNLESS                                             FALSE                                              you are a Public Agency                                                                                                                                 
       PARTY                                              You                                                                                                                                                                                                        
       MUST                                                                                                  WITHIN                                             3                                                  days                                              
       ➔                                                                                                     NOTIFY                                             each of the Notifiable Individuals                                                                   
                                                                                                             in                                                 any manner that is reasonable in the circumstances                                                   
                                                                                                             with                                               a message obeying a certain format                                                                   
       WHERE                                                                                                 the Notifiable Individuals                                                                                                                              
                                                          MEANS                                              the set of individuals affected by the NDB                                                                                                              
                                                                                                             LESS                                               the individuals who are deemed                     Unlikely                                          
                                                                                                             LESS                                               the individuals on                                 the PDPC Exclusion List                           
                                                                                                             LESS                                               the individuals on                                 the LEA Exclusion List                            
                                                                                                                                                                                                                                                                     
       

  To rerun use: --match "/PDPA/pdpadbno-7/"

Randomized with seed 87818319

Finished in 0.0833 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

