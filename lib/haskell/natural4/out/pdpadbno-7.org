* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-7/)

* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Notify Individuals",UnDeeper,If,GoDeeper,GoDeeper,Other "it is",GoDeeper,Other "an NDB",UnDeeper,UnDeeper,UnDeeper,Unless,GoDeeper,GoDeeper,Other "you are a Public Agency",UnDeeper,UnDeeper,Party,GoDeeper,Other "You",UnDeeper,Must,GoDeeper,GoDeeper,Before,GoDeeper,TNumber 3,GoDeeper,Other "days",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Do,GoDeeper,GoDeeper,Other "NOTIFY",GoDeeper,Other "each of the Notifiable Individuals",UnDeeper,Other "in",GoDeeper,Other "any manner that is reasonable in the circumstances",UnDeeper,Other "with",GoDeeper,Other "a message obeying a certain format",UnDeeper,UnDeeper,UnDeeper,Where,GoDeeper,Other "the Notifiable Individuals",Means,GoDeeper,Other "the set of individuals affected by the NDB",SetLess,GoDeeper,Other "the individuals who are deemed",GoDeeper,Other "Unlikely",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the PDPC Exclusion List",UnDeeper,UnDeeper,SetLess,GoDeeper,Other "the individuals on",GoDeeper,Other "the LEA Exclusion List",UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected If
someDeep first part calls base directly> expecting Other text

someDeep> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected If
someDeep> expecting Other text

pRegRuleSugary> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected If
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected Unless
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Party
nested simpleHorn> expecting Means or UnDeeper

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Party
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Party
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Party
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Party
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Party
preambleBoolStructR [Unless]> expecting Unless

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: Party GoDeeper Other "You" UnDeeper Must <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Party
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Having

preambleParamText:[Having]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Party
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Given

preambleParamText:[Given]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Party
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Upon

preambleParamText:[Upon]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Party
preambleParamText:[Upon]> expecting Upon

******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting May, Must, or Shant

pDT> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=19:
pDT> unexpected Party
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "You" UnDeeper
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pActor [Every,Party,TokAll]> MATCH (COK): Party GoDeeper Other "You" UnDeeper
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected Must
preambleBoolStructR [Who,Which,Whose]> expecting Which, Who, or Whose

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Which, Who, or Whose

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (COK): Must
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                          :5_3:GoDeeper:
*********** / |>>/recurse                                                                                         :5_3:Before:
|>>/recurse> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected Before
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Before:
************ / pTemporal/eventually                                                                              :5_3:Before:
pTemporal/eventually> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected Before
pTemporal/eventually> expecting Eventually

************ / pTemporal/specifically                                                                            :5_3:Before:
************* / $>|                                                                                             :5_3:Before:
$>|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$>|> MATCH (COK): Before
$>|> VALUE: (Before,[])

************* \ $>| has returned Before                                                                          :5_4:GoDeeper:
************* / |>>/recurse                                                                                      :5_4:GoDeeper:
************** / |>>/recurse                                                                                     :5_4:TNumber 3:
|>>/recurse> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected TNumber 3
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :5_4:TNumber 3:
*************** > |>>/base got Just 3                                                                            :5_5:GoDeeper:
|>>/base> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/base> MATCH (COK): TNumber 3
|>>/base> VALUE: ((Just 3,0),[])

************** \ |>>/base has returned (Just 3,0)                                                                 :5_5:GoDeeper:
|>>/recurse> IN: GoDeeper TNumber 3 GoDeeper Other "days" <…>
|>>/recurse> MATCH (COK): GoDeeper TNumber 3
|>>/recurse> VALUE: ((Just 3,1),[])

************* \ |>>/recurse has returned (Just 3,1)                                                                :5_5:GoDeeper:
************* / |>| calling $>>                                                                                    :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "days:
|>>/recurse> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "days"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                        :5_5:Other "days:
**************** > |>>/base got "days"                                                                      :6_2:UnDeeper:
|>>/base> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/base> MATCH (COK): Other "days"
|>>/base> VALUE: (("days",0),[])

*************** \ |>>/base has returned ("days",0)                                                           :6_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Other "days"
|>>/recurse> VALUE: (("days",1),[])

************** \ |>>/recurse has returned ("days",1)                                                          :6_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "days"
|>| calling $>>> VALUE: (("days",1),[])

************* \ |>| calling $>> has returned ("days",1)                                                        :6_2:UnDeeper:
************* / undeepers                                                                                      :6_2:UnDeeper:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                       :6_2:UnDeeper:
************** > sameLine: success!                                                                               :6_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Do G <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                          :6_4:UnDeeper:
pTemporal/specifically> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************ \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")                :6_4:UnDeeper:
************ > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                                :6_4:UnDeeper:
|>>/base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

*********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                     :6_4:UnDeeper:
|>>/recurse> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> MATCH (COK): GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                    :6_4:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                      :6_4:UnDeeper:
|>| calling $>>> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:Do:
undeepers> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:Do:
pDT> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> MATCH (COK): Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=35:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=35:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=35:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=35:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :6_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :6_3:GoDeeper:
***************** / expression                                                                             :6_3:GoDeeper:
****************** / labelPrefix                                                                          :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=37:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "NOTI:
********************** / manyIndentation/leaf?                                                         :6_3:Other "NOTI:
*********************** / expression                                                                  :6_3:Other "NOTI:
************************ / labelPrefix                                                               :6_3:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************ \ labelPrefix has returned "NOTIFY"                                          :6_4:GoDeeper:
************************ / term p                                                                     :6_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :6_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :6_4:GoDeeper:
*************************** / someIndentation                                                      :6_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :6_4:Other "each:
**************************** / manyIndentation/leaf?                                               :6_4:Other "each:
***************************** / expression                                                        :6_4:Other "each:
****************************** / labelPrefix                                                     :6_4:Other "each:
labelPrefix> IN: Other "each of the Notifiable Individual <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :6_4:Other "each:
******************************* / term p/notLabelTerm                                           :6_4:Other "each:
******************************** / term p/2:someIndentation expr p                             :6_4:Other "each:
********************************* / someIndentation                                           :6_4:Other "each:
********************************** / myindented: consuming GoDeeper                          :6_4:Other "each:
myindented: consuming GoDeeper> IN: Other "each of the Notifiable Individual <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "each of the Notifiable Individual <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "each of the Notifiable Individuals"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "each of the Notifiable Individual <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :6_4:Other "each:
********************************* / pParamText                                                :6_4:Other "each:
********************************** / pParamText(flat) first line: pKeyValues                 :6_4:Other "each:
*********************************** / pKeyValuesAka                                         :6_4:Other "each:
************************************ / slAKA                                               :6_4:Other "each:
************************************* / $*|                                               :6_4:Other "each:
************************************** / slAKA base                                      :6_4:Other "each:
*************************************** / slKeyValues                                   :6_4:Other "each:
**************************************** / $*|                                         :6_4:Other "each:
***************************************** / someSL                                    :6_4:Other "each:
someSL> IN: Other "each of the Notifiable Individual <…>
someSL> MATCH (COK): Other "each of the Notifiable Individual <…>
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

***************************************** \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

**************************************** \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / |?| optional something                     :7_4:UnDeeper:
****************************************** / |>>/recurse                              :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                 :7_4:UnDeeper:
******************************************* / slTypeSig                              :7_4:UnDeeper:
******************************************** / $>|                                  :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
***************************************** > |>>/base got Nothing                       :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************************** \ |>>/base has returned (Nothing,0)            :7_4:UnDeeper:
slKeyValues> IN: Other "each of the Notifiable Individual <…>
slKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*************************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: Other "each of the Notifiable Individual <…>
slAKA base> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional akapart                           :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / PAKA/akapart                               :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
******************************************* / Aka Token                              :7_4:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0)  :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional typically                         :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / typically                                  :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
************************************* > pAKA: entityalias = Nothing                        :7_4:UnDeeper:
slAKA> IN: Other "each of the Notifiable Individual <…>
slAKA> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************ \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************ / undeepers                                            :7_4:UnDeeper:
************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
************************************* > sameLine: success!                                 :7_4:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************ \ undeepers has returned ()                            :7_4:UnDeeper:
pKeyValuesAka> IN: Other "each of the Notifiable Individual <…>
pKeyValuesAka> MATCH (COK): Other "each of the Notifiable Individual <…>
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

*********************************** \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

********************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
********************************** / pParamText(flat) subsequent lines: sameMany pKeyValues   :7_4:UnDeeper:
*********************************** / manyIndentation/leaf?                                  :7_4:UnDeeper:
************************************ / sameMany                                             :7_4:UnDeeper:
************************************* / pKeyValuesAka                                      :7_4:UnDeeper:
************************************** / slAKA                                            :7_4:UnDeeper:
*************************************** / $*|                                            :7_4:UnDeeper:
**************************************** / slAKA base                                   :7_4:UnDeeper:
***************************************** / slKeyValues                                :7_4:UnDeeper:
****************************************** / $*|                                      :7_4:UnDeeper:
******************************************* / someSL                                 :7_4:UnDeeper:
******************************************** / pNumAsText                           :7_4:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************ \ sameMany has returned []                             :7_4:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************************** \ manyIndentation/leaf? has returned []                  :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: Other "each of the Notifiable Individual <…>
pParamText> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

********************************* \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: Other "each of the Notifiable Individual <…>
term p/3:plain p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: Other "each of the Notifiable Individual <…>
term p/notLabelTerm> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: Other "each of the Notifiable Individual <…>
term p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

****************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
****************************** / binary(Or)                                                       :7_4:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                      :7_4:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                                  :7_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                                  :7_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "each of the Notifiable Individual <…>
expression> MATCH (COK): Other "each of the Notifiable Individual <…>
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

***************************** \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> MATCH (COK): Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper              :7_3:Other "in":
someIndentation> IN: GoDeeper Other "each of the Notifiable I <…>
someIndentation> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: GoDeeper Other "each of the Notifiable I <…>
term p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
************************ / binary(Or)                                                                :7_3:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

************************ / binary(And)                                                               :7_3:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected Other "in"
binary(And)> expecting And

************************ / binary(SetLess)                                                           :7_3:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                           :7_3:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

*********************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
********************** / myindented: consuming UnDeeper                                                :7_3:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "any manner th <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

******************** / term p/3:plain p                                                                 :6_3:GoDeeper:
********************* / pParamText                                                                     :6_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :6_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :6_3:GoDeeper:
************************ / slAKA                                                                    :6_3:GoDeeper:
************************* / $*|                                                                    :6_3:GoDeeper:
************************** / slAKA base                                                           :6_3:GoDeeper:
*************************** / slKeyValues                                                        :6_3:GoDeeper:
**************************** / $*|                                                              :6_3:GoDeeper:
***************************** / someSL                                                         :6_3:GoDeeper:
****************************** / pNumAsText                                                   :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=37:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=37:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=37:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=37:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=37:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected Other "in"
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=42:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :6_3:Other "NOTI:
****************** / manyIndentation/leaf?                                                                 :6_3:Other "NOTI:
******************* / expression                                                                          :6_3:Other "NOTI:
******************** / labelPrefix                                                                       :6_3:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

******************** \ labelPrefix has returned "NOTIFY"                                                  :6_4:GoDeeper:
******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "each:
************************ / manyIndentation/leaf?                                                       :6_4:Other "each:
************************* / expression                                                                :6_4:Other "each:
************************** / labelPrefix                                                             :6_4:Other "each:
labelPrefix> IN: Other "each of the Notifiable Individual <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

************************** / term p                                                                  :6_4:Other "each:
*************************** / term p/notLabelTerm                                                   :6_4:Other "each:
**************************** / term p/2:someIndentation expr p                                     :6_4:Other "each:
***************************** / someIndentation                                                   :6_4:Other "each:
****************************** / myindented: consuming GoDeeper                                  :6_4:Other "each:
myindented: consuming GoDeeper> IN: Other "each of the Notifiable Individual <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "each of the Notifiable Individual <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "each of the Notifiable Individuals"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "each of the Notifiable Individual <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :6_4:Other "each:
***************************** / pParamText                                                        :6_4:Other "each:
****************************** / pParamText(flat) first line: pKeyValues                         :6_4:Other "each:
******************************* / pKeyValuesAka                                                 :6_4:Other "each:
******************************** / slAKA                                                       :6_4:Other "each:
********************************* / $*|                                                       :6_4:Other "each:
********************************** / slAKA base                                              :6_4:Other "each:
*********************************** / slKeyValues                                           :6_4:Other "each:
************************************ / $*|                                                 :6_4:Other "each:
************************************* / someSL                                            :6_4:Other "each:
someSL> IN: Other "each of the Notifiable Individual <…>
someSL> MATCH (COK): Other "each of the Notifiable Individual <…>
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************* \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************ \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / |?| optional something                             :7_4:UnDeeper:
************************************** / |>>/recurse                                      :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                         :7_4:UnDeeper:
*************************************** / slTypeSig                                      :7_4:UnDeeper:
**************************************** / $>|                                          :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)    :7_4:UnDeeper:
************************************* > |>>/base got Nothing                               :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :7_4:UnDeeper:
slKeyValues> IN: Other "each of the Notifiable Individual <…>
slKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*********************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: Other "each of the Notifiable Individual <…>
slAKA base> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional akapart                                   :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / PAKA/akapart                                       :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
*************************************** / Aka Token                                      :7_4:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)          :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional typically                                 :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / typically                                          :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)        :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
********************************* > pAKA: entityalias = Nothing                                :7_4:UnDeeper:
slAKA> IN: Other "each of the Notifiable Individual <…>
slAKA> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

******************************** \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
******************************** / undeepers                                                    :7_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
********************************* > sameLine: success!                                         :7_4:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :7_4:UnDeeper:
pKeyValuesAka> IN: Other "each of the Notifiable Individual <…>
pKeyValuesAka> MATCH (COK): Other "each of the Notifiable Individual <…>
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

******************************* \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

****************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
****************************** / pParamText(flat) subsequent lines: sameMany pKeyValues           :7_4:UnDeeper:
******************************* / manyIndentation/leaf?                                          :7_4:UnDeeper:
******************************** / sameMany                                                     :7_4:UnDeeper:
********************************* / pKeyValuesAka                                              :7_4:UnDeeper:
********************************** / slAKA                                                    :7_4:UnDeeper:
*********************************** / $*|                                                    :7_4:UnDeeper:
************************************ / slAKA base                                           :7_4:UnDeeper:
************************************* / slKeyValues                                        :7_4:UnDeeper:
************************************** / $*|                                              :7_4:UnDeeper:
*************************************** / someSL                                         :7_4:UnDeeper:
**************************************** / pNumAsText                                   :7_4:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************************** \ sameMany has returned []                                     :7_4:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************************* \ manyIndentation/leaf? has returned []                          :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: Other "each of the Notifiable Individual <…>
pParamText> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

***************************** \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: Other "each of the Notifiable Individual <…>
term p/3:plain p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: Other "each of the Notifiable Individual <…>
term p/notLabelTerm> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: Other "each of the Notifiable Individual <…>
term p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************** / binary(Or)                                                               :7_4:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************** / binary(And)                                                              :7_4:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************** / binary(SetLess)                                                          :7_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************** / binary(SetPlus)                                                          :7_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "each of the Notifiable Individual <…>
expression> MATCH (COK): Other "each of the Notifiable Individual <…>
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> MATCH (COK): Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************ / myindented: consuming UnDeeper                                               :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented: consuming UnDeeper has returned UnDeeper                      :7_3:Other "in":
someIndentation> IN: GoDeeper Other "each of the Notifiable I <…>
someIndentation> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*********************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: GoDeeper Other "each of the Notifiable I <…>
term p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
******************** / binary(Or)                                                                        :7_3:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

******************** / binary(And)                                                                       :7_3:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected Other "in"
binary(And)> expecting And

******************** / binary(SetLess)                                                                   :7_3:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                   :7_3:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

******************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

****************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
****************** / myindented: consuming UnDeeper                                                        :7_3:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "any manner th <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=42:
manyIndentation/deeper; calling someIndentation> unexpected Other "in"
manyIndentation/deeper; calling someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

someIndentation> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=36:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=36:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=36:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

expression> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected Other "in"
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=42:
expr pParamText> unexpected Other "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=42:
dBoolStructP calling exprP> unexpected Other "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=42:
pAction calling dBoolStructP> unexpected Other "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=42:
pDoAction/pAction> unexpected Other "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=42:
regulative permutation with deontic-temporal> unexpected Other "in"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected Unless
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Party
nested simpleHorn> expecting Means or UnDeeper

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Party
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Party
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Party
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Party
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Party
preambleBoolStructR [Unless]> expecting Unless

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: Party GoDeeper Other "You" UnDeeper Must <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Party
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Having

preambleParamText:[Having]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Party
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Given

preambleParamText:[Given]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Party
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Upon

preambleParamText:[Upon]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Party
preambleParamText:[Upon]> expecting Upon

******* / pTemporal/eventually                                                                                    :4_1:Party:
pTemporal/eventually> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected Party
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected Party
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :4_1:Party:
pTemporal/vaguely> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected Party
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "You" UnDeeper
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pActor [Every,Party,TokAll]> MATCH (COK): Party GoDeeper Other "You" UnDeeper
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected Must
preambleBoolStructR [Who,Which,Whose]> expecting Which, Who, or Whose

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Which, Who, or Whose

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / pTemporal/eventually                                                                                    :5_1:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=23:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=23:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :5_1:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=23:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :5_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :5_3:GoDeeper:
***************** / expression                                                                             :5_3:GoDeeper:
****************** / labelPrefix                                                                          :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Before:
********************** / manyIndentation/leaf?                                                         :5_3:Before:
*********************** / expression                                                                  :5_3:Before:
************************ / labelPrefix                                                               :5_3:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************ / term p                                                                    :5_3:Before:
************************* / term p/notLabelTerm                                                     :5_3:Before:
************************** / term p/2:someIndentation expr p                                       :5_3:Before:
*************************** / someIndentation                                                     :5_3:Before:
**************************** / myindented: consuming GoDeeper                                    :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :5_3:Before:
*************************** / pParamText                                                          :5_3:Before:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Before:
***************************** / pKeyValuesAka                                                   :5_3:Before:
****************************** / slAKA                                                         :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / slAKA base                                                :5_3:Before:
********************************* / slKeyValues                                             :5_3:Before:
********************************** / $*|                                                   :5_3:Before:
*********************************** / someSL                                              :5_3:Before:
************************************ / pNumAsText                                        :5_3:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

********************** / manyIndentation/deeper; calling someIndentation                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

******************** / term p/3:plain p                                                                 :5_3:GoDeeper:
********************* / pParamText                                                                     :5_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :5_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :5_3:GoDeeper:
************************ / slAKA                                                                    :5_3:GoDeeper:
************************* / $*|                                                                    :5_3:GoDeeper:
************************** / slAKA base                                                           :5_3:GoDeeper:
*************************** / slKeyValues                                                        :5_3:GoDeeper:
**************************** / $*|                                                              :5_3:GoDeeper:
***************************** / someSL                                                         :5_3:GoDeeper:
****************************** / pNumAsText                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=25:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=25:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=25:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=25:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :5_3:Before:
****************** / manyIndentation/leaf?                                                                 :5_3:Before:
******************* / expression                                                                          :5_3:Before:
******************** / labelPrefix                                                                       :5_3:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

******************** / term p                                                                            :5_3:Before:
********************* / term p/notLabelTerm                                                             :5_3:Before:
********************** / term p/2:someIndentation expr p                                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                              :5_3:Before:
*********************** / pParamText                                                                  :5_3:Before:
************************ / pParamText(flat) first line: pKeyValues                                   :5_3:Before:
************************* / pKeyValuesAka                                                           :5_3:Before:
************************** / slAKA                                                                 :5_3:Before:
*************************** / $*|                                                                 :5_3:Before:
**************************** / slAKA base                                                        :5_3:Before:
***************************** / slKeyValues                                                     :5_3:Before:
****************************** / $*|                                                           :5_3:Before:
******************************* / someSL                                                      :5_3:Before:
******************************** / pNumAsText                                                :5_3:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                       :5_3:Before:
******************* / someIndentation                                                                     :5_3:Before:
******************** / myindented: consuming GoDeeper                                                    :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=24:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=24:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=24:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=24:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=26:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=26:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=26:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=26:
pDA> unexpected Before
pDA> expecting expression

regulative permutation with deontic-action> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=26:
regulative permutation with deontic-action> unexpected Before
regulative permutation with deontic-action> expecting GoDeeper, Which, Who, Whose, or expression

permutationsReg> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=42:
permutationsReg> unexpected Other "in"
permutationsReg> expecting expression

pRegRuleNormal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=42:
pRegRuleNormal> unexpected Other "in"
pRegRuleNormal> expecting expression

pRegRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> ERROR:
pRegRule> offset=42:
pRegRule> unexpected Other "in"
pRegRule> expecting expression

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected If
pTypeDefinition> expecting Define, Given, or Upon

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting number

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting other text or number

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting other text or number

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting other text or number

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting other text or number

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting other text or number

pAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected If
pAKA> expecting other text or number

pMultiTermAka> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected If
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected If
calling myindented pNameParens> expecting GoDeeper or other text or number

pConstitutiveRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected If
pConstitutiveRule> expecting GoDeeper or other text or number

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

***** \ |>| calling $>> has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected If
pExpect> expecting Expect

pScenarioRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected If
pScenarioRule> expecting Expect or Given

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :1_2:Other "Noti:
********* > |>>/base got "Notify Individuals"                                                                      :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******** \ |>>/base has returned ("Notify Individuals",0)                                                           :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

******* \ |>>/recurse has returned ("Notify Individuals",1)                                                          :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

****** \ |>| calling $>> has returned ("Notify Individuals",1)                                                        :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                     :2_1:If:
pSrcRef> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> VALUE: ((Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> VALUE: (Just (Leaf (RPMT ["it is","an NDB"])),[])

***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected Unless
pHornlike/uponLimb> expecting Upon

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected Unless
pHornlike/givenLimb> expecting Given

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected Unless
pHornlike/givenLimb> expecting Given

***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected Unless
pHornlike/uponLimb> expecting Upon

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

pHornlike / permute> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> ERROR:
pHornlike / permute> offset=13:
pHornlike / permute> unexpected Unless
pHornlike / permute> expecting And, Decide, Define, Given, GoDeeper, Or, SetLess, SetPlus, Upon, or other text or number

pHornlike> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> ERROR:
pHornlike> offset=13:
pHornlike> unexpected Unless
pHornlike> expecting And, Decide, Define, Given, GoDeeper, Or, SetLess, SetPlus, Upon, or other text or number

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify Individuals"
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: Other "Notify Individuals" UnDeeper If G <…>
|>>/base> MATCH (COK): Other "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify Individuals" UnDe <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify Individuals"
|>| calling $>>> VALUE: (("Notify Individuals",1),[])

**** \ |>| calling $>> has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:If:
undeepers> IN: UnDeeper If GoDeeper GoDeeper Other "it  <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:If:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

*** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                         :2_1:If:
pRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify Individuals"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:If:
** / pRule                                                                                                             :2_1:If:
*** / pRegRule                                                                                                        :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected If
someDeep first part calls base directly> expecting Other text

someDeep> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected If
someDeep> expecting Other text

pRegRuleSugary> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected If
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected Unless
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Party
nested simpleHorn> expecting Means or UnDeeper

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Party
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Party
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Party
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Party
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Party
preambleBoolStructR [Unless]> expecting Unless

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: Party GoDeeper Other "You" UnDeeper Must <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Party
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Having

preambleParamText:[Having]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Party
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Given

preambleParamText:[Given]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Party
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Upon

preambleParamText:[Upon]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Party
preambleParamText:[Upon]> expecting Upon

******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting May, Must, or Shant

pDT> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=19:
pDT> unexpected Party
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "You" UnDeeper
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pActor [Every,Party,TokAll]> MATCH (COK): Party GoDeeper Other "You" UnDeeper
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected Must
preambleBoolStructR [Who,Which,Whose]> expecting Which, Who, or Whose

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Which, Who, or Whose

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (COK): Must
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                          :5_3:GoDeeper:
*********** / |>>/recurse                                                                                         :5_3:Before:
|>>/recurse> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected Before
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                            :5_3:Before:
************ / pTemporal/eventually                                                                              :5_3:Before:
pTemporal/eventually> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected Before
pTemporal/eventually> expecting Eventually

************ / pTemporal/specifically                                                                            :5_3:Before:
************* / $>|                                                                                             :5_3:Before:
$>|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$>|> MATCH (COK): Before
$>|> VALUE: (Before,[])

************* \ $>| has returned Before                                                                          :5_4:GoDeeper:
************* / |>>/recurse                                                                                      :5_4:GoDeeper:
************** / |>>/recurse                                                                                     :5_4:TNumber 3:
|>>/recurse> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected TNumber 3
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :5_4:TNumber 3:
*************** > |>>/base got Just 3                                                                            :5_5:GoDeeper:
|>>/base> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/base> MATCH (COK): TNumber 3
|>>/base> VALUE: ((Just 3,0),[])

************** \ |>>/base has returned (Just 3,0)                                                                 :5_5:GoDeeper:
|>>/recurse> IN: GoDeeper TNumber 3 GoDeeper Other "days" <…>
|>>/recurse> MATCH (COK): GoDeeper TNumber 3
|>>/recurse> VALUE: ((Just 3,1),[])

************* \ |>>/recurse has returned (Just 3,1)                                                                :5_5:GoDeeper:
************* / |>| calling $>>                                                                                    :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "days:
|>>/recurse> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected Other "days"
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                        :5_5:Other "days:
**************** > |>>/base got "days"                                                                      :6_2:UnDeeper:
|>>/base> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/base> MATCH (COK): Other "days"
|>>/base> VALUE: (("days",0),[])

*************** \ |>>/base has returned ("days",0)                                                           :6_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Other "days"
|>>/recurse> VALUE: (("days",1),[])

************** \ |>>/recurse has returned ("days",1)                                                          :6_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "days"
|>| calling $>>> VALUE: (("days",1),[])

************* \ |>| calling $>> has returned ("days",1)                                                        :6_2:UnDeeper:
************* / undeepers                                                                                      :6_2:UnDeeper:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                       :6_2:UnDeeper:
************** > sameLine: success!                                                                               :6_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Do G <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                          :6_4:UnDeeper:
pTemporal/specifically> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************ \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")                :6_4:UnDeeper:
************ > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                                :6_4:UnDeeper:
|>>/base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

*********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                     :6_4:UnDeeper:
|>>/recurse> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> MATCH (COK): GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                    :6_4:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                      :6_4:UnDeeper:
|>| calling $>>> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:Do:
undeepers> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:Do:
pDT> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> MATCH (COK): Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=35:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=35:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=35:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=35:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :6_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :6_3:GoDeeper:
***************** / expression                                                                             :6_3:GoDeeper:
****************** / labelPrefix                                                                          :6_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=37:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "NOTI:
********************** / manyIndentation/leaf?                                                         :6_3:Other "NOTI:
*********************** / expression                                                                  :6_3:Other "NOTI:
************************ / labelPrefix                                                               :6_3:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************ \ labelPrefix has returned "NOTIFY"                                          :6_4:GoDeeper:
************************ / term p                                                                     :6_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :6_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :6_4:GoDeeper:
*************************** / someIndentation                                                      :6_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :6_4:Other "each:
**************************** / manyIndentation/leaf?                                               :6_4:Other "each:
***************************** / expression                                                        :6_4:Other "each:
****************************** / labelPrefix                                                     :6_4:Other "each:
labelPrefix> IN: Other "each of the Notifiable Individual <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :6_4:Other "each:
******************************* / term p/notLabelTerm                                           :6_4:Other "each:
******************************** / term p/2:someIndentation expr p                             :6_4:Other "each:
********************************* / someIndentation                                           :6_4:Other "each:
********************************** / myindented: consuming GoDeeper                          :6_4:Other "each:
myindented: consuming GoDeeper> IN: Other "each of the Notifiable Individual <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "each of the Notifiable Individual <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "each of the Notifiable Individuals"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "each of the Notifiable Individual <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :6_4:Other "each:
********************************* / pParamText                                                :6_4:Other "each:
********************************** / pParamText(flat) first line: pKeyValues                 :6_4:Other "each:
*********************************** / pKeyValuesAka                                         :6_4:Other "each:
************************************ / slAKA                                               :6_4:Other "each:
************************************* / $*|                                               :6_4:Other "each:
************************************** / slAKA base                                      :6_4:Other "each:
*************************************** / slKeyValues                                   :6_4:Other "each:
**************************************** / $*|                                         :6_4:Other "each:
***************************************** / someSL                                    :6_4:Other "each:
someSL> IN: Other "each of the Notifiable Individual <…>
someSL> MATCH (COK): Other "each of the Notifiable Individual <…>
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

***************************************** \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

**************************************** \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / |?| optional something                     :7_4:UnDeeper:
****************************************** / |>>/recurse                              :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                 :7_4:UnDeeper:
******************************************* / slTypeSig                              :7_4:UnDeeper:
******************************************** / $>|                                  :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
***************************************** > |>>/base got Nothing                       :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************************** \ |>>/base has returned (Nothing,0)            :7_4:UnDeeper:
slKeyValues> IN: Other "each of the Notifiable Individual <…>
slKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*************************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: Other "each of the Notifiable Individual <…>
slAKA base> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional akapart                           :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / PAKA/akapart                               :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
******************************************* / Aka Token                              :7_4:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0)  :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* / |>>/recurse                                        :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                           :7_4:UnDeeper:
************************************** / slAKA optional typically                         :7_4:UnDeeper:
*************************************** / |?| optional something                         :7_4:UnDeeper:
**************************************** / |>>/recurse                                  :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                     :7_4:UnDeeper:
***************************************** / typically                                  :7_4:UnDeeper:
****************************************** / $>|                                      :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************** > |>>/base got Nothing                             :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)                  :7_4:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
************************************* > pAKA: entityalias = Nothing                        :7_4:UnDeeper:
slAKA> IN: Other "each of the Notifiable Individual <…>
slAKA> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

************************************ \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
************************************ / undeepers                                            :7_4:UnDeeper:
************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
************************************* > sameLine: success!                                 :7_4:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************ \ undeepers has returned ()                            :7_4:UnDeeper:
pKeyValuesAka> IN: Other "each of the Notifiable Individual <…>
pKeyValuesAka> MATCH (COK): Other "each of the Notifiable Individual <…>
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

*********************************** \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

********************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
********************************** / pParamText(flat) subsequent lines: sameMany pKeyValues   :7_4:UnDeeper:
*********************************** / manyIndentation/leaf?                                  :7_4:UnDeeper:
************************************ / sameMany                                             :7_4:UnDeeper:
************************************* / pKeyValuesAka                                      :7_4:UnDeeper:
************************************** / slAKA                                            :7_4:UnDeeper:
*************************************** / $*|                                            :7_4:UnDeeper:
**************************************** / slAKA base                                   :7_4:UnDeeper:
***************************************** / slKeyValues                                :7_4:UnDeeper:
****************************************** / $*|                                      :7_4:UnDeeper:
******************************************* / someSL                                 :7_4:UnDeeper:
******************************************** / pNumAsText                           :7_4:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************ \ sameMany has returned []                             :7_4:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************************** \ manyIndentation/leaf? has returned []                  :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: Other "each of the Notifiable Individual <…>
pParamText> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

********************************* \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: Other "each of the Notifiable Individual <…>
term p/3:plain p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: Other "each of the Notifiable Individual <…>
term p/notLabelTerm> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: Other "each of the Notifiable Individual <…>
term p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

****************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
****************************** / binary(Or)                                                       :7_4:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                      :7_4:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                                  :7_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                                  :7_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "each of the Notifiable Individual <…>
expression> MATCH (COK): Other "each of the Notifiable Individual <…>
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

***************************** \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> MATCH (COK): Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
**************************** / myindented: consuming UnDeeper                                       :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper              :7_3:Other "in":
someIndentation> IN: GoDeeper Other "each of the Notifiable I <…>
someIndentation> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: GoDeeper Other "each of the Notifiable I <…>
term p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
************************ / binary(Or)                                                                :7_3:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

************************ / binary(And)                                                               :7_3:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected Other "in"
binary(And)> expecting And

************************ / binary(SetLess)                                                           :7_3:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                           :7_3:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

*********************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
********************** / myindented: consuming UnDeeper                                                :7_3:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "any manner th <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

******************** / term p/3:plain p                                                                 :6_3:GoDeeper:
********************* / pParamText                                                                     :6_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :6_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :6_3:GoDeeper:
************************ / slAKA                                                                    :6_3:GoDeeper:
************************* / $*|                                                                    :6_3:GoDeeper:
************************** / slAKA base                                                           :6_3:GoDeeper:
*************************** / slKeyValues                                                        :6_3:GoDeeper:
**************************** / $*|                                                              :6_3:GoDeeper:
***************************** / someSL                                                         :6_3:GoDeeper:
****************************** / pNumAsText                                                   :6_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=37:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=37:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=37:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=37:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=37:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected Other "in"
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=42:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :6_3:Other "NOTI:
****************** / manyIndentation/leaf?                                                                 :6_3:Other "NOTI:
******************* / expression                                                                          :6_3:Other "NOTI:
******************** / labelPrefix                                                                       :6_3:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

******************** \ labelPrefix has returned "NOTIFY"                                                  :6_4:GoDeeper:
******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "each of the Notifiable I <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "each:
************************ / manyIndentation/leaf?                                                       :6_4:Other "each:
************************* / expression                                                                :6_4:Other "each:
************************** / labelPrefix                                                             :6_4:Other "each:
labelPrefix> IN: Other "each of the Notifiable Individual <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

************************** / term p                                                                  :6_4:Other "each:
*************************** / term p/notLabelTerm                                                   :6_4:Other "each:
**************************** / term p/2:someIndentation expr p                                     :6_4:Other "each:
***************************** / someIndentation                                                   :6_4:Other "each:
****************************** / myindented: consuming GoDeeper                                  :6_4:Other "each:
myindented: consuming GoDeeper> IN: Other "each of the Notifiable Individual <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "each of the Notifiable Individuals"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "each of the Notifiable Individual <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "each of the Notifiable Individuals"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "each of the Notifiable Individual <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "each of the Notifiable Individuals"
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :6_4:Other "each:
***************************** / pParamText                                                        :6_4:Other "each:
****************************** / pParamText(flat) first line: pKeyValues                         :6_4:Other "each:
******************************* / pKeyValuesAka                                                 :6_4:Other "each:
******************************** / slAKA                                                       :6_4:Other "each:
********************************* / $*|                                                       :6_4:Other "each:
********************************** / slAKA base                                              :6_4:Other "each:
*********************************** / slKeyValues                                           :6_4:Other "each:
************************************ / $*|                                                 :6_4:Other "each:
************************************* / someSL                                            :6_4:Other "each:
someSL> IN: Other "each of the Notifiable Individual <…>
someSL> MATCH (COK): Other "each of the Notifiable Individual <…>
someSL> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************* \ someSL has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((["each of the Notifiable Individuals"],0),[])

************************************ \ $*| has returned (["each of the Notifiable Individuals"],0) :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / |?| optional something                             :7_4:UnDeeper:
************************************** / |>>/recurse                                      :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                         :7_4:UnDeeper:
*************************************** / slTypeSig                                      :7_4:UnDeeper:
**************************************** / $>|                                          :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)    :7_4:UnDeeper:
************************************* > |>>/base got Nothing                               :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :7_4:UnDeeper:
slKeyValues> IN: Other "each of the Notifiable Individual <…>
slKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
slKeyValues> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

*********************************** \ slKeyValues has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
slAKA base> IN: Other "each of the Notifiable Individual <…>
slAKA base> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA base> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************** \ slAKA base has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
$*|> IN: Other "each of the Notifiable Individual <…>
$*|> MATCH (COK): Other "each of the Notifiable Individual <…>
$*|> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

********************************* \ $*| has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional akapart                                   :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / PAKA/akapart                                       :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
*************************************** / Aka Token                                      :7_4:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)          :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* / |>>/recurse                                                :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                   :7_4:UnDeeper:
********************************** / slAKA optional typically                                 :7_4:UnDeeper:
*********************************** / |?| optional something                                 :7_4:UnDeeper:
************************************ / |>>/recurse                                          :7_4:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                             :7_4:UnDeeper:
************************************* / typically                                          :7_4:UnDeeper:
************************************** / $>|                                              :7_4:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)        :7_4:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)        :7_4:UnDeeper:
********************************** > |>>/base got Nothing                                     :7_4:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                          :7_4:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
********************************* > pAKA: entityalias = Nothing                                :7_4:UnDeeper:
slAKA> IN: Other "each of the Notifiable Individual <…>
slAKA> MATCH (COK): Other "each of the Notifiable Individual <…>
slAKA> VALUE: ((("each of the Notifiable Individuals" :| [],Nothing),0),[])

******************************** \ slAKA has returned (("each of the Notifiable Individuals" :| [],Nothing),0) :7_4:UnDeeper:
******************************** / undeepers                                                    :7_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
********************************* > sameLine: success!                                         :7_4:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :7_4:UnDeeper:
pKeyValuesAka> IN: Other "each of the Notifiable Individual <…>
pKeyValuesAka> MATCH (COK): Other "each of the Notifiable Individual <…>
pKeyValuesAka> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

******************************* \ pKeyValuesAka has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText(flat) first line: pKeyValues> VALUE: (("each of the Notifiable Individuals" :| [],Nothing),[])

****************************** \ pParamText(flat) first line: pKeyValues has returned ("each of the Notifiable Individuals" :| [],Nothing) :7_4:UnDeeper:
****************************** / pParamText(flat) subsequent lines: sameMany pKeyValues           :7_4:UnDeeper:
******************************* / manyIndentation/leaf?                                          :7_4:UnDeeper:
******************************** / sameMany                                                     :7_4:UnDeeper:
********************************* / pKeyValuesAka                                              :7_4:UnDeeper:
********************************** / slAKA                                                    :7_4:UnDeeper:
*********************************** / $*|                                                    :7_4:UnDeeper:
************************************ / slAKA base                                           :7_4:UnDeeper:
************************************* / slKeyValues                                        :7_4:UnDeeper:
************************************** / $*|                                              :7_4:UnDeeper:
*************************************** / someSL                                         :7_4:UnDeeper:
**************************************** / pNumAsText                                   :7_4:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************************** \ sameMany has returned []                                     :7_4:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************************* \ manyIndentation/leaf? has returned []                          :7_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_4:UnDeeper:
pParamText> IN: Other "each of the Notifiable Individual <…>
pParamText> MATCH (COK): Other "each of the Notifiable Individual <…>
pParamText> VALUE: (("each of the Notifiable Individuals" :| [],Nothing) :| [],[])

***************************** \ pParamText has returned ("each of the Notifiable Individuals" :| [],Nothing) :| [] :7_4:UnDeeper:
term p/3:plain p> IN: Other "each of the Notifiable Individual <…>
term p/3:plain p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/3:plain p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

**************************** \ term p/3:plain p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p/notLabelTerm> IN: Other "each of the Notifiable Individual <…>
term p/notLabelTerm> MATCH (COK): Other "each of the Notifiable Individual <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
term p> IN: Other "each of the Notifiable Individual <…>
term p> MATCH (COK): Other "each of the Notifiable Individual <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************** / binary(Or)                                                               :7_4:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************** / binary(And)                                                              :7_4:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************** / binary(SetLess)                                                          :7_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************** / binary(SetPlus)                                                          :7_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "each of the Notifiable Individual <…>
expression> MATCH (COK): Other "each of the Notifiable Individual <…>
expression> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************* \ expression has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
manyIndentation/leaf?> IN: Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> MATCH (COK): Other "each of the Notifiable Individual <…>
manyIndentation/leaf?> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_4:UnDeeper:
************************ / myindented: consuming UnDeeper                                               :7_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "any  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented: consuming UnDeeper has returned UnDeeper                      :7_3:Other "in":
someIndentation> IN: GoDeeper Other "each of the Notifiable I <…>
someIndentation> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
someIndentation> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

*********************** \ someIndentation has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p/notLabelTerm> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

********************* \ term p/notLabelTerm has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
term p> IN: GoDeeper Other "each of the Notifiable I <…>
term p> MATCH (COK): GoDeeper Other "each of the Notifiable I <…>
term p> VALUE: (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []),[])

******************** \ term p has returned MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| []) :7_3:Other "in":
******************** / binary(Or)                                                                        :7_3:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

******************** / binary(And)                                                                       :7_3:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected Other "in"
binary(And)> expecting And

******************** / binary(SetLess)                                                                   :7_3:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                   :7_3:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "any manner th <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

******************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "each of t <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])),[])

****************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("each of the Notifiable Individuals" :| [],Nothing) :| [])) :7_3:Other "in":
****************** / myindented: consuming UnDeeper                                                        :7_3:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "any manner th <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=42:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=42:
manyIndentation/deeper; calling someIndentation> unexpected Other "in"
manyIndentation/deeper; calling someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

someIndentation> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=42:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=42:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=36:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=36:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=36:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=42:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=42:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

expression> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=42:
expression> unexpected Other "in"
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=42:
expr pParamText> unexpected Other "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=42:
dBoolStructP calling exprP> unexpected Other "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=42:
pAction calling dBoolStructP> unexpected Other "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=42:
pDoAction/pAction> unexpected Other "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=42:
regulative permutation with deontic-temporal> unexpected Other "in"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected If
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / expression                                                                               :2_3:GoDeeper:
***************** / labelPrefix                                                                            :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Other "it i:
********************* / manyIndentation/leaf?                                                           :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / labelPrefix                                                                 :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

*********************** \ labelPrefix has returned "it is"                                             :2_4:GoDeeper:
*********************** / term p                                                                       :2_4:GoDeeper:
************************ / term p/notLabelTerm                                                        :2_4:GoDeeper:
************************* / term p/2:someIndentation expr p                                          :2_4:GoDeeper:
************************** / someIndentation                                                        :2_4:GoDeeper:
*************************** / myindented: consuming GoDeeper                                       :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :2_4:Other "an N:
*************************** / manyIndentation/leaf?                                                 :2_4:Other "an N:
**************************** / expression                                                          :2_4:Other "an N:
***************************** / labelPrefix                                                       :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

***************************** / term p                                                            :2_4:Other "an N:
****************************** / term p/notLabelTerm                                             :2_4:Other "an N:
******************************* / term p/2:someIndentation expr p                               :2_4:Other "an N:
******************************** / someIndentation                                             :2_4:Other "an N:
********************************* / myindented: consuming GoDeeper                            :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

******************************* / term p/3:plain p                                              :2_4:Other "an N:
******************************** / pRelPred                                                    :2_4:Other "an N:
********************************* / slRelPred                                                 :2_4:Other "an N:
********************************** / nested simpleHorn                                       :2_4:Other "an N:
*********************************** > |^|                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |^| deeps                                          :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

*********************************** \ |^| deeps has returned ([(),(),()],-3)          :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

********************************** / RPConstraint                                            :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPBoolStructR                                           :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slMultiTerm                                         :2_4:Other "an N:
************************************* / someSL                                            :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************* \ someSL has returned (["an NDB"],0)             :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************ \ slMultiTerm has returned (["an NDB"],0)          :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>| calling $>>                                    :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************************** / RPMT                                                    :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA                                               :2_4:Other "an N:
************************************* / $*|                                               :2_4:Other "an N:
************************************** / slAKA base                                      :2_4:Other "an N:
*************************************** / slMultiTerm                                   :2_4:Other "an N:
**************************************** / someSL                                      :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

**************************************** \ someSL has returned (["an NDB"],0)       :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

*************************************** \ slMultiTerm has returned (["an NDB"],0)    :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA base has returned (["an NDB"],0)       :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional akapart                       :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / PAKA/akapart                           :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
******************************************* / Aka Token                          :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional akapart has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* / |>>/recurse                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :3_2:UnDeeper:
************************************** / slAKA optional typically                     :3_2:UnDeeper:
*************************************** / |?| optional something                     :3_2:UnDeeper:
**************************************** / |>>/recurse                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                 :3_2:UnDeeper:
***************************************** / typically                              :3_2:UnDeeper:
****************************************** / $>|                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************** \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************** > |>>/base got Nothing                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************* \ |>>/base has returned (Nothing,0)              :3_2:UnDeeper:
************************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
************************************* > pAKA: entityalias = Nothing                    :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA has returned (["an NDB"],0)                :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

********************************** \ RPMT has returned (RPMT ["an NDB"],0)                :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

********************************* \ slRelPred has returned (RPMT ["an NDB"],0)             :3_2:UnDeeper:
********************************* / undeepers                                              :3_2:UnDeeper:
********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
********************************** > sameLine: success!                                   :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************* \ undeepers has returned ()                              :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

******************************** \ pRelPred has returned RPMT ["an NDB"]                    :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])     :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])    :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                   :3_2:UnDeeper:
***************************** / binary(Or)                                                     :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************************** / binary(And)                                                    :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************************** / binary(SetLess)                                                :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************************** / binary(SetPlus)                                                :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
*************************** / myindented: consuming UnDeeper                                     :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************************** \ myindented: consuming UnDeeper has returned UnDeeper                 :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])    :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                  :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["an NDB"])                                 :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))           :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_3:UnDeeper:
********************* / myindented: consuming UnDeeper                                                   :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                               :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))            :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                           :3_4:UnDeeper:
***************** / binary(Or)                                                                                 :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                                :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                            :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                            :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))   :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                 :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                               :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected Unless
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / labelPrefix                                                                                      :3_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / expression                                                                               :3_3:GoDeeper:
***************** / labelPrefix                                                                            :3_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

***************** / term p                                                                                 :3_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :3_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :3_3:GoDeeper:
******************** / someIndentation                                                                  :3_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :3_3:Other "you:
********************* / manyIndentation/leaf?                                                           :3_3:Other "you:
********************** / expression                                                                    :3_3:Other "you:
*********************** / labelPrefix                                                                 :3_3:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

*********************** / term p                                                                      :3_3:Other "you:
************************ / term p/notLabelTerm                                                       :3_3:Other "you:
************************* / term p/2:someIndentation expr p                                         :3_3:Other "you:
************************** / someIndentation                                                       :3_3:Other "you:
*************************** / myindented: consuming GoDeeper                                      :3_3:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :3_3:Other "you:
************************** / pRelPred                                                              :3_3:Other "you:
*************************** / slRelPred                                                           :3_3:Other "you:
**************************** / nested simpleHorn                                                 :3_3:Other "you:
***************************** > |^|                                                             :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |^| deeps                                                      :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

***************************** \ |^| deeps has returned ([(),()],-2)                         :4_1:Party:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Party
nested simpleHorn> expecting Means or UnDeeper

**************************** / RPConstraint                                                      :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPBoolStructR                                                     :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slMultiTerm                                                   :3_3:Other "you:
******************************* / someSL                                                      :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ someSL has returned (["you are a Public Agency"],0)        :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slMultiTerm has returned (["you are a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
***************************** / |>| calling $>>                                                :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

**************************** / RPMT                                                              :3_3:Other "you:
***************************** / $*|                                                             :3_3:Other "you:
****************************** / slAKA                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA base                                                :3_3:Other "you:
********************************* / slMultiTerm                                             :3_3:Other "you:
********************************** / someSL                                                :3_3:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ someSL has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA base has returned (["you are a Public Agency"],0)  :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional akapart                                   :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / PAKA/akapart                                       :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
************************************* / Aka Token                                      :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* / |>>/recurse                                                :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :4_2:UnDeeper:
******************************** / slAKA optional typically                                 :4_2:UnDeeper:
********************************* / |?| optional something                                 :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / typically                                          :4_2:UnDeeper:
************************************ / $>|                                              :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :4_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :4_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :4_2:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ slAKA has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)               :4_2:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

**************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)           :4_2:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

*************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)        :4_2:UnDeeper:
*************************** / undeepers                                                          :4_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
**************************** > sameLine: success!                                               :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                          :4_2:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

************************** \ pRelPred has returned RPMT ["you are a Public Agency"]               :4_2:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])              :4_2:UnDeeper:
*********************** / binary(Or)                                                                 :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*********************** / binary(And)                                                                :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*********************** / binary(SetLess)                                                            :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*********************** / binary(SetPlus)                                                            :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])            :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])   :4_2:UnDeeper:
********************* / myindented: consuming UnDeeper                                                 :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Party GoDeeper Other " <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented: consuming UnDeeper has returned UnDeeper                             :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])             :4_3:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                            :4_3:UnDeeper:
***************** / binary(Or)                                                                               :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                              :4_3:UnDeeper:
binary(And)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                          :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                          :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                          :4_3:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented: consuming UnDeeper                                                               :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Party GoDeeper Other "You" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:Party:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                   :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Party
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Party
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Party
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: Party GoDeeper Other "You" UnDeeper Must <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Party
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                      :4_1:Party:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Party
preambleBoolStructR [Unless]> expecting Unless

******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: Party GoDeeper Other "You" UnDeeper Must <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Party
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Having

preambleParamText:[Having]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Party
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Given

preambleParamText:[Given]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Party
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting Upon

preambleParamText:[Upon]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Party
preambleParamText:[Upon]> expecting Upon

******* / pTemporal/eventually                                                                                    :4_1:Party:
pTemporal/eventually> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected Party
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: Party GoDeeper Other "You" UnDeeper Must <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Party
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected Party
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :4_1:Party:
pTemporal/vaguely> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected Party
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: Other "You" UnDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :5_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :5_1:Must:
someIndentation> IN: GoDeeper Other "You" UnDeeper Must GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "You" UnDeeper
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [Every,Party,TokAll]> IN: Party GoDeeper Other "You" UnDeeper Must <…>
pActor [Every,Party,TokAll]> MATCH (COK): Party GoDeeper Other "You" UnDeeper
pActor [Every,Party,TokAll]> VALUE: ((Party,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Party,Leaf (("You" :| [],Nothing) :| []))                     :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected Must
preambleBoolStructR [Who,Which,Whose]> expecting Which, Who, or Whose

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Which, Who, or Whose

******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented: consuming GoDeeper                                                                      :5_1:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / pTemporal/eventually                                                                                    :5_1:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=23:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=23:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :5_1:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=23:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :5_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :5_3:GoDeeper:
***************** / expression                                                                             :5_3:GoDeeper:
****************** / labelPrefix                                                                          :5_3:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Before:
********************** / manyIndentation/leaf?                                                         :5_3:Before:
*********************** / expression                                                                  :5_3:Before:
************************ / labelPrefix                                                               :5_3:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************ / term p                                                                    :5_3:Before:
************************* / term p/notLabelTerm                                                     :5_3:Before:
************************** / term p/2:someIndentation expr p                                       :5_3:Before:
*************************** / someIndentation                                                     :5_3:Before:
**************************** / myindented: consuming GoDeeper                                    :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :5_3:Before:
*************************** / pParamText                                                          :5_3:Before:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Before:
***************************** / pKeyValuesAka                                                   :5_3:Before:
****************************** / slAKA                                                         :5_3:Before:
******************************* / $*|                                                         :5_3:Before:
******************************** / slAKA base                                                :5_3:Before:
********************************* / slKeyValues                                             :5_3:Before:
********************************** / $*|                                                   :5_3:Before:
*********************************** / someSL                                              :5_3:Before:
************************************ / pNumAsText                                        :5_3:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

********************** / manyIndentation/deeper; calling someIndentation                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

******************** / term p/3:plain p                                                                 :5_3:GoDeeper:
********************* / pParamText                                                                     :5_3:GoDeeper:
********************** / pParamText(flat) first line: pKeyValues                                      :5_3:GoDeeper:
*********************** / pKeyValuesAka                                                              :5_3:GoDeeper:
************************ / slAKA                                                                    :5_3:GoDeeper:
************************* / $*|                                                                    :5_3:GoDeeper:
************************** / slAKA base                                                           :5_3:GoDeeper:
*************************** / slKeyValues                                                        :5_3:GoDeeper:
**************************** / $*|                                                              :5_3:GoDeeper:
***************************** / someSL                                                         :5_3:GoDeeper:
****************************** / pNumAsText                                                   :5_3:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=25:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=25:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=25:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=25:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                  :5_3:Before:
****************** / manyIndentation/leaf?                                                                 :5_3:Before:
******************* / expression                                                                          :5_3:Before:
******************** / labelPrefix                                                                       :5_3:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=26:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

******************** / term p                                                                            :5_3:Before:
********************* / term p/notLabelTerm                                                             :5_3:Before:
********************** / term p/2:someIndentation expr p                                               :5_3:Before:
*********************** / someIndentation                                                             :5_3:Before:
************************ / myindented: consuming GoDeeper                                            :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                              :5_3:Before:
*********************** / pParamText                                                                  :5_3:Before:
************************ / pParamText(flat) first line: pKeyValues                                   :5_3:Before:
************************* / pKeyValuesAka                                                           :5_3:Before:
************************** / slAKA                                                                 :5_3:Before:
*************************** / $*|                                                                 :5_3:Before:
**************************** / slAKA base                                                        :5_3:Before:
***************************** / slKeyValues                                                     :5_3:Before:
****************************** / $*|                                                           :5_3:Before:
******************************* / someSL                                                      :5_3:Before:
******************************** / pNumAsText                                                :5_3:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=26:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=26:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=26:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                       :5_3:Before:
******************* / someIndentation                                                                     :5_3:Before:
******************** / myindented: consuming GoDeeper                                                    :5_3:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=26:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=24:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=24:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=24:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=24:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=26:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=26:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=26:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=26:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=26:
pDA> unexpected Before
pDA> expecting expression

regulative permutation with deontic-action> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=26:
regulative permutation with deontic-action> unexpected Before
regulative permutation with deontic-action> expecting GoDeeper, Which, Who, Whose, or expression

permutationsReg> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=42:
permutationsReg> unexpected Other "in"
permutationsReg> expecting expression

pRegRuleNormal> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=42:
pRegRuleNormal> unexpected Other "in"
pRegRuleNormal> expecting expression

pRegRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=42:
pRegRule> unexpected Other "in"
pRegRule> expecting RuleMarker 1 "\167" or expression

*** / pTypeDefinition                                                                                                 :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected If
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected If
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected If
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected If
pNumAsText> expecting number

someSL> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected If
someSL> expecting other text or number

slMultiTerm> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected If
slMultiTerm> expecting other text or number

slAKA base> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected If
slAKA base> expecting other text or number

$*|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected If
$*|> expecting other text or number

slAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected If
slAKA> expecting other text or number

pAKA> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected If
pAKA> expecting other text or number

pMultiTermAka> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected If
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected If
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented: consuming GoDeeper                                                                          :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected If
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected If
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected If
calling myindented pNameParens> expecting GoDeeper or other text or number

pConstitutiveRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected If
pConstitutiveRule> expecting GoDeeper, RuleMarker 1 "\167", or other text or number

*** / pScenarioRule                                                                                                   :2_1:If:
**** / pRuleLabel                                                                                                    :2_1:If:
***** / $>|                                                                                                         :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :2_1:If:
pExpect> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected If
pExpect> expecting Expect

pScenarioRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected If
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :2_1:If:
**** / pSrcRef                                                                                                       :2_1:If:
***** / pRuleLabel                                                                                                  :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenMeansIf> MATCH (COK): If
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                           :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / expression                                                                                   :2_3:GoDeeper:
*************** / labelPrefix                                                                                :2_3:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "it i:
******************* / manyIndentation/leaf?                                                               :2_3:Other "it i:
******************** / expression                                                                        :2_3:Other "it i:
********************* / labelPrefix                                                                     :2_3:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

********************* \ labelPrefix has returned "it is"                                                 :2_4:GoDeeper:
********************* / term p                                                                           :2_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :2_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :2_4:GoDeeper:
************************ / someIndentation                                                            :2_4:GoDeeper:
************************* / myindented: consuming GoDeeper                                           :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented: consuming GoDeeper has returned GoDeeper                      :2_4:Other "an N:
************************* / manyIndentation/leaf?                                                     :2_4:Other "an N:
************************** / expression                                                              :2_4:Other "an N:
*************************** / labelPrefix                                                           :2_4:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected UnDeeper

*************************** / term p                                                                :2_4:Other "an N:
**************************** / term p/notLabelTerm                                                 :2_4:Other "an N:
***************************** / term p/2:someIndentation expr p                                   :2_4:Other "an N:
****************************** / someIndentation                                                 :2_4:Other "an N:
******************************* / myindented: consuming GoDeeper                                :2_4:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

***************************** / term p/3:plain p                                                  :2_4:Other "an N:
****************************** / pRelPred                                                        :2_4:Other "an N:
******************************* / slRelPred                                                     :2_4:Other "an N:
******************************** / nested simpleHorn                                           :2_4:Other "an N:
********************************* > |^|                                                       :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |^| deeps                                              :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)              :3_1:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

******************************** / RPConstraint                                                :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPBoolStructR                                               :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slMultiTerm                                             :2_4:Other "an N:
*********************************** / someSL                                                :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*********************************** \ someSL has returned (["an NDB"],0)                 :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

********************************** \ slMultiTerm has returned (["an NDB"],0)              :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
********************************* / |>| calling $>>                                        :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************************** / RPMT                                                        :2_4:Other "an N:
********************************* / $*|                                                       :2_4:Other "an N:
********************************** / slAKA                                                   :2_4:Other "an N:
*********************************** / $*|                                                   :2_4:Other "an N:
************************************ / slAKA base                                          :2_4:Other "an N:
************************************* / slMultiTerm                                       :2_4:Other "an N:
************************************** / someSL                                          :2_4:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

************************************** \ someSL has returned (["an NDB"],0)           :3_2:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************* \ slMultiTerm has returned (["an NDB"],0)        :3_2:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

************************************ \ slAKA base has returned (["an NDB"],0)           :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*********************************** \ $*| has returned (["an NDB"],0)                    :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional akapart                           :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / PAKA/akapart                               :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
***************************************** / Aka Token                              :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)  :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / slAKA optional typically                         :3_2:UnDeeper:
************************************* / |?| optional something                         :3_2:UnDeeper:
************************************** / |>>/recurse                                  :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :3_2:UnDeeper:
*************************************** / typically                                  :3_2:UnDeeper:
**************************************** / $>|                                      :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0) :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0) :3_2:UnDeeper:
************************************ > |>>/base got Nothing                             :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                  :3_2:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                        :3_2:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

********************************** \ slAKA has returned (["an NDB"],0)                    :3_2:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

********************************* \ $*| has returned (["an NDB"],0)                        :3_2:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

******************************** \ RPMT has returned (RPMT ["an NDB"],0)                    :3_2:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

******************************* \ slRelPred has returned (RPMT ["an NDB"],0)                 :3_2:UnDeeper:
******************************* / undeepers                                                  :3_2:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
******************************** > sameLine: success!                                       :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                  :3_2:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

****************************** \ pRelPred has returned RPMT ["an NDB"]                        :3_2:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])         :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])        :3_2:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p has returned MyLeaf (RPMT ["an NDB"])                       :3_2:UnDeeper:
*************************** / binary(Or)                                                         :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************************** / binary(And)                                                        :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************************** / binary(SetLess)                                                    :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************************** / binary(SetPlus)                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["an NDB"])                     :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])            :3_2:UnDeeper:
************************* / myindented: consuming UnDeeper                                         :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented: consuming UnDeeper has returned UnDeeper                     :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])        :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                      :3_3:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************* \ term p has returned MyLeaf (RPMT ["an NDB"])                                     :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))      :3_3:UnDeeper:
******************* / myindented: consuming UnDeeper                                                       :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******************* \ myindented: consuming UnDeeper has returned UnDeeper                                   :3_4:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))  :3_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                :3_4:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                               :3_4:UnDeeper:
*************** / binary(Or)                                                                                     :3_4:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

*************** / binary(And)                                                                                    :3_4:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

*************** / binary(SetLess)                                                                                :3_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

*************** / binary(SetPlus)                                                                                :3_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                             :3_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                    :3_4:UnDeeper:
************* / myindented: consuming UnDeeper                                                                     :3_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented: consuming UnDeeper has returned UnDeeper                                        :3_1:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))       :3_1:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                     :3_1:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                    :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected Unless
binary(And)> expecting And

********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                                  :3_1:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******* \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                                   :3_1:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
whenCase> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
whenCase> VALUE: (Just (Leaf (RPMT ["it is","an NDB"])),[])

***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected Unless
pHornlike/uponLimb> expecting Upon

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected Unless
pHornlike/givenLimb> expecting Given

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected Unless
pHornlike/givenLimb> expecting Given

***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected Unless
pHornlike/uponLimb> expecting Upon

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected Unless
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected Unless
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

pRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected Unless
pRelPred> expecting other text or number

optIndented> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected Unless
optIndented> expecting other text or number

optIndentedTuple> IN: Unless GoDeeper GoDeeper Other "you are  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected Unless
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected Unless
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected Unless
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

nested simpleHorn> IN: Unless GoDeeper GoDeeper Other "you are  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPConstraint> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected Unless
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPBoolStructR> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected Unless
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected Unless
pNumAsText> expecting number

someSL> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected Unless
someSL> expecting other text or number

slMultiTerm> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected Unless
slMultiTerm> expecting other text or number

slAKA base> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected Unless
slAKA base> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

slAKA> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected Unless
slAKA> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

RPMT> IN: Unless GoDeeper GoDeeper Other "you are  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected Unless
RPMT> expecting other text or number

slRelPred> IN: Unless GoDeeper GoDeeper Other "you are  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected Unless
slRelPred> expecting other text or number

$*|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected Unless
$*|> expecting other text or number

relPredSamelineWhen> IN: Unless GoDeeper GoDeeper Other "you are  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected Unless
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected Unless
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented: consuming GoDeeper                                                                        :3_1:Unless:
myindented: consuming GoDeeper> IN: Unless GoDeeper GoDeeper Other "you are  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Unless
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Unless
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Unless GoDeeper GoDeeper Other "you are  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected Unless
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Unless GoDeeper GoDeeper Other "you are  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected Unless
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

pHornlike / permute> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike / permute> ERROR:
pHornlike / permute> offset=13:
pHornlike / permute> unexpected Unless
pHornlike / permute> expecting And, Decide, Define, Given, GoDeeper, Or, SetLess, SetPlus, Upon, or other text or number

pHornlike> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike> MATCH (CERR): If GoDeeper GoDeeper Other "it is" GoDee <…>
pHornlike> ERROR:
pHornlike> offset=13:
pHornlike> unexpected Unless
pHornlike> expecting And, Decide, Define, Given, GoDeeper, Or, SetLess, SetPlus, Upon, or other text or number

*** / pRuleLabel                                                                                                      :2_1:If:
**** / $>|                                                                                                           :2_1:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected If
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected If
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:If:
**** / myindented: consuming GoDeeper                                                                                :2_1:If:
myindented: consuming GoDeeper> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected If
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected If
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=42:
pRule> unexpected Other "in"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-7 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-7
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Nothing, lest = Nothing, rlabel = Just ("\167",2,"Notify Individuals"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}], defaults = [], symtab = []},Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["the Notifiable Individuals"] RPis (All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected If
       expecting end of input
       §§                                                 Notify Individuals                                                                                                                                                                                         
       ✳ IF                                               TRUE                                               it is                                              an NDB                                                                                               
       UNLESS                                             FALSE                                              you are a Public Agency                                                                                                                                 
       PARTY                                              You                                                                                                                                                                                                        
       MUST                                                                                                  WITHIN                                             3                                                  days                                              
       ➔                                                                                                     NOTIFY                                             each of the Notifiable Individuals                                                                   
                                                                                                             in                                                 any manner that is reasonable in the circumstances                                                   
                                                                                                             with                                               a message obeying a certain format                                                                   
       WHERE                                              the Notifiable Individuals                                                                                                                                                                                 
                                                          MEANS                                              the set of individuals affected by the NDB                                                                                                              
                                                                                                             LESS                                               the individuals who are deemed                     Unlikely                                          
                                                                                                             LESS                                               the individuals on                                 the PDPC Exclusion List                           
                                                                                                             LESS                                               the individuals on                                 the LEA Exclusion List                            
                                                                                                                                                                                                                                                                     
       

  To rerun use: --match "/PDPA/pdpadbno-7/"

Randomized with seed 434405619

Finished in 0.1204 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

