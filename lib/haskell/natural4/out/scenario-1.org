* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/megaparsing scenarios/scenario-1/")

* Tokens
§ ( "Scenario 1" ) GIVEN
    ( "amount saved"
        (
            ( IS ( 22000 ) )
        ) "earnings"
        ( "amount"
            ( IS ( 25000 ) )
        ) "earnings"
        ( "steadiness"
            ( IS ( "steady" ) )
        )
    ) EXPECT
    (
        ( "investment"
            ( IS
                ( "savings"
                    ( WHEN
                        ( "dependents"
                            ( IS ( 5 ) )
                        )
                    )
                )
            )
        )
    ) EXPECT
    (
        ( "investment"
            ( IS
                ( "combination"
                    ( WHEN
                        ( "dependents"
                            ( IS ( 3 ) )
                        )
                    )
                )
            )
        )
    ) EXPECT
    (
        ( "investment"
            ( IS
                ( "stocks"
                    ( WHEN
                        ( "dependents"
                            ( IS ( 0 ) )
                        )
                    )
                )
            )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

***** \ $>| has returned RuleMarker 1 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Scen:
******** > |>>/base got "Scenario 1"                                                                                :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

******* \ |>>/base has returned ("Scenario 1",0)                                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

****** \ |>>/recurse has returned ("Scenario 1",1)                                                                    :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

***** \ |>| calling $>> has returned ("Scenario 1",1)                                                                  :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

**** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                               :2_1:Given:
**** / pRegRuleSugary                                                                                                :2_1:Given:
***** / someDeep                                                                                                    :2_1:Given:
****** / someDeep first part calls base directly                                                                   :2_1:Given:
someDeep first part calls base directly> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected GIVEN
someDeep first part calls base directly> expecting Other text

someDeep> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected GIVEN
someDeep> expecting Other text

pRegRuleSugary> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected GIVEN
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Given:
***** / permutationsReg                                                                                             :2_1:Given:
****** / regulative permutation with deontic-temporal                                                              :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :2_2:Other "amou:
*********** / pParamText                                                                                        :2_2:Other "amou:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "amou:
************* / pKeyValuesAka                                                                                 :2_2:Other "amou:
************** / slAKA                                                                                       :2_2:Other "amou:
*************** / $*|                                                                                       :2_2:Other "amou:
**************** / slAKA base                                                                              :2_2:Other "amou:
***************** / slKeyValues                                                                           :2_2:Other "amou:
****************** / $*|                                                                                 :2_2:Other "amou:
******************* / someSL                                                                            :2_2:Other "amou:
******************** / pNumAsText                                                                          :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

******************* \ someSL has returned (["amount saved"],0)                                           :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

****************** \ $*| has returned (["amount saved"],0)                                                :2_3:GoDeeper:
****************** / |>>/recurse                                                                          :2_3:GoDeeper:
******************* / |>>/recurse                                                                          :2_4:GoDeeper:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / |?| optional something                                                            :2_4:Is:
********************** / |>>/recurse                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************** / |>>/base                                                                        :2_4:Is:
*********************** / slTypeSig                                                                     :2_4:Is:
************************ / $>|                                                                         :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

************************ \ $>| has returned Is                                                          :2_5:GoDeeper:
************************ / |>>/recurse                                                                  :2_5:GoDeeper:
************************* / |>>/recurse                                                                 :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************* / |>>/base                                                                    :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************** / $*|                                                                       :2_5:TNumber 220:
*************************** / $>|                                                                     :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

************************ / |>>/base                                                                     :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                        :2_5:GoDeeper:
************************** / $>|                                                                      :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                   :2_4:Is:
********************* > |>>/base got Nothing                                                              :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                   :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

******************* \ |>>/recurse has returned (Nothing,1)                                                  :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

****************** \ |>>/recurse has returned (Nothing,2)                                                    :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

***************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                               :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                  :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional akapart                                                                      :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / PAKA/akapart                                                                          :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
********************* / Aka Token                                                                         :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                             :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional typically                                                                    :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / typically                                                                             :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                           :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                                :2_4:Is:
*************** > pAKA: entityalias = Nothing                                                                   :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
************** / undeepers                                                                                       :2_4:Is:
*************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                        :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

********* / |>>/base                                                                                             :2_2:GoDeeper:
********** / pParamText                                                                                         :2_2:GoDeeper:
*********** / pParamText(flat) first line: pKeyValues                                                          :2_2:GoDeeper:
************ / pKeyValuesAka                                                                                  :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slKeyValues                                                                            :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

regulative permutation with deontic-temporal> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
regulative permutation with deontic-temporal> MATCH (CERR): GIVEN
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=9:
regulative permutation with deontic-temporal> unexpected IS
regulative permutation with deontic-temporal> expecting (, ), AKA, or TYPICALLY

****** / regulative permutation with deontic-action                                                                :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :2_2:Other "amou:
*********** / pParamText                                                                                        :2_2:Other "amou:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "amou:
************* / pKeyValuesAka                                                                                 :2_2:Other "amou:
************** / slAKA                                                                                       :2_2:Other "amou:
*************** / $*|                                                                                       :2_2:Other "amou:
**************** / slAKA base                                                                              :2_2:Other "amou:
***************** / slKeyValues                                                                           :2_2:Other "amou:
****************** / $*|                                                                                 :2_2:Other "amou:
******************* / someSL                                                                            :2_2:Other "amou:
******************** / pNumAsText                                                                          :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

******************* \ someSL has returned (["amount saved"],0)                                           :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

****************** \ $*| has returned (["amount saved"],0)                                                :2_3:GoDeeper:
****************** / |>>/recurse                                                                          :2_3:GoDeeper:
******************* / |>>/recurse                                                                          :2_4:GoDeeper:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / |?| optional something                                                            :2_4:Is:
********************** / |>>/recurse                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************** / |>>/base                                                                        :2_4:Is:
*********************** / slTypeSig                                                                     :2_4:Is:
************************ / $>|                                                                         :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

************************ \ $>| has returned Is                                                          :2_5:GoDeeper:
************************ / |>>/recurse                                                                  :2_5:GoDeeper:
************************* / |>>/recurse                                                                 :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************* / |>>/base                                                                    :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************** / $*|                                                                       :2_5:TNumber 220:
*************************** / $>|                                                                     :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

************************ / |>>/base                                                                     :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                        :2_5:GoDeeper:
************************** / $>|                                                                      :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                   :2_4:Is:
********************* > |>>/base got Nothing                                                              :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                   :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

******************* \ |>>/recurse has returned (Nothing,1)                                                  :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

****************** \ |>>/recurse has returned (Nothing,2)                                                    :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

***************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                               :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                  :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional akapart                                                                      :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / PAKA/akapart                                                                          :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
********************* / Aka Token                                                                         :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                             :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional typically                                                                    :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / typically                                                                             :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                           :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                                :2_4:Is:
*************** > pAKA: entityalias = Nothing                                                                   :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
************** / undeepers                                                                                       :2_4:Is:
*************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                        :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

********* / |>>/base                                                                                             :2_2:GoDeeper:
********** / pParamText                                                                                         :2_2:GoDeeper:
*********** / pParamText(flat) first line: pKeyValues                                                          :2_2:GoDeeper:
************ / pKeyValuesAka                                                                                  :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slKeyValues                                                                            :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

regulative permutation with deontic-action> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
regulative permutation with deontic-action> MATCH (CERR): GIVEN
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=9:
regulative permutation with deontic-action> unexpected IS
regulative permutation with deontic-action> expecting (, ), AKA, or TYPICALLY

permutationsReg> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=9:
permutationsReg> unexpected IS
permutationsReg> expecting (, ), AKA, or TYPICALLY

pRegRuleNormal> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=9:
pRegRuleNormal> unexpected IS
pRegRuleNormal> expecting (, ), AKA, or TYPICALLY

pRegRule> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRegRule> MATCH (CERR): § ( "Scenario 1" )
pRegRule> ERROR:
pRegRule> offset=9:
pRegRule> unexpected IS
pRegRule> expecting (, ), AKA, or TYPICALLY

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

***** \ $>| has returned RuleMarker 1 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Scen:
******** > |>>/base got "Scenario 1"                                                                                :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

******* \ |>>/base has returned ("Scenario 1",0)                                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

****** \ |>>/recurse has returned ("Scenario 1",1)                                                                    :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

***** \ |>| calling $>> has returned ("Scenario 1",1)                                                                  :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

**** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                               :2_1:Given:
**** / pHornlike/uponLimb                                                                                            :2_1:Given:
***** / preambleParamText:[Upon]                                                                                    :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected GIVEN
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected GIVEN
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:Given:
***** / preambleParamText:[Given]                                                                                   :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

****** \ $>| has returned Given                                                                                     :2_2:GoDeeper:
****** / |>| calling $>>                                                                                            :2_2:GoDeeper:
******* / |>>/recurse                                                                                              :2_2:GoDeeper:
******** / |>>/recurse                                                                                             :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

******** / |>>/base                                                                                                :2_2:Other "amou:
********* / pParamText                                                                                            :2_2:Other "amou:
********** / pParamText(flat) first line: pKeyValues                                                             :2_2:Other "amou:
*********** / pKeyValuesAka                                                                                     :2_2:Other "amou:
************ / slAKA                                                                                           :2_2:Other "amou:
************* / $*|                                                                                           :2_2:Other "amou:
************** / slAKA base                                                                                  :2_2:Other "amou:
*************** / slKeyValues                                                                               :2_2:Other "amou:
**************** / $*|                                                                                     :2_2:Other "amou:
***************** / someSL                                                                                :2_2:Other "amou:
****************** / pNumAsText                                                                              :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

***************** \ someSL has returned (["amount saved"],0)                                               :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

**************** \ $*| has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
**************** / |>>/recurse                                                                              :2_3:GoDeeper:
***************** / |>>/recurse                                                                              :2_4:GoDeeper:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / |?| optional something                                                                :2_4:Is:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / slTypeSig                                                                         :2_4:Is:
********************** / $>|                                                                             :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

********************** \ $>| has returned Is                                                              :2_5:GoDeeper:
********************** / |>>/recurse                                                                      :2_5:GoDeeper:
*********************** / |>>/recurse                                                                     :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

*********************** / |>>/base                                                                        :2_5:TNumber 220:
************************ / $>|                                                                           :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************ / $*|                                                                           :2_5:TNumber 220:
************************* / $>|                                                                         :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

********************** / |>>/base                                                                         :2_5:GoDeeper:
*********************** / $>|                                                                            :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

*********************** / $*|                                                                            :2_5:GoDeeper:
************************ / $>|                                                                          :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                       :2_4:Is:
******************* > |>>/base got Nothing                                                                  :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                       :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

***************** \ |>>/recurse has returned (Nothing,1)                                                      :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

**************** \ |>>/recurse has returned (Nothing,2)                                                        :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                                   :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                      :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

************* \ $*| has returned (("amount saved" :| [],Nothing),2)                                               :2_4:Is:
************* / |>>/recurse                                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :2_4:Is:
************** / slAKA optional akapart                                                                          :2_4:Is:
*************** / |?| optional something                                                                        :2_4:Is:
**************** / |>>/recurse                                                                                 :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :2_4:Is:
***************** / PAKA/akapart                                                                              :2_4:Is:
****************** / $>|                                                                                     :2_4:Is:
******************* / Aka Token                                                                             :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                               :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                                 :2_4:Is:
************** > |>>/base got Nothing                                                                            :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                 :2_4:Is:
************* / |>>/recurse                                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :2_4:Is:
************** / slAKA optional typically                                                                        :2_4:Is:
*************** / |?| optional something                                                                        :2_4:Is:
**************** / |>>/recurse                                                                                 :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :2_4:Is:
***************** / typically                                                                                 :2_4:Is:
****************** / $>|                                                                                     :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                               :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                               :2_4:Is:
************** > |>>/base got Nothing                                                                            :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                 :2_4:Is:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                    :2_4:Is:
************* > pAKA: entityalias = Nothing                                                                       :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************ \ slAKA has returned (("amount saved" :| [],Nothing),2)                                               :2_4:Is:
************ / undeepers                                                                                           :2_4:Is:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                            :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

******* / |>>/base                                                                                                 :2_2:GoDeeper:
******** / pParamText                                                                                             :2_2:GoDeeper:
********* / pParamText(flat) first line: pKeyValues                                                              :2_2:GoDeeper:
********** / pKeyValuesAka                                                                                      :2_2:GoDeeper:
*********** / slAKA                                                                                            :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slAKA base                                                                                   :2_2:GoDeeper:
************** / slKeyValues                                                                                :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / someSL                                                                                 :2_2:GoDeeper:
***************** / pNumAsText                                                                           :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

pHornlike/givenLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/givenLimb> MATCH (CERR): GIVEN
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=9:
pHornlike/givenLimb> unexpected IS
pHornlike/givenLimb> expecting (, ), AKA, or TYPICALLY

pTypeDefinition> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pTypeDefinition> MATCH (CERR): § ( "Scenario 1" ) GIVEN
pTypeDefinition> ERROR:
pTypeDefinition> offset=9:
pTypeDefinition> unexpected IS
pTypeDefinition> expecting (, ), AKA, or TYPICALLY

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

***** \ $>| has returned RuleMarker 1 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Scen:
******** > |>>/base got "Scenario 1"                                                                                :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

******* \ |>>/base has returned ("Scenario 1",0)                                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

****** \ |>>/recurse has returned ("Scenario 1",1)                                                                    :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

***** \ |>| calling $>> has returned ("Scenario 1",1)                                                                  :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

**** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                               :2_1:Given:
**** / calling myindented pNameParens                                                                                :2_1:Given:
***** / manyIndentation/leaf?                                                                                       :2_1:Given:
****** / pMultiTermAka                                                                                             :2_1:Given:
******* / pAKA                                                                                                    :2_1:Given:
******** / slAKA                                                                                                 :2_1:Given:
********* / $*|                                                                                                 :2_1:Given:
********** / slAKA base                                                                                        :2_1:Given:
*********** / slMultiTerm                                                                                     :2_1:Given:
************ / someSL                                                                                        :2_1:Given:
************* / pNumAsText                                                                                  :2_1:Given:
pNumAsText> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GIVEN
pNumAsText> expecting number

someSL> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GIVEN
someSL> expecting other text or number

slMultiTerm> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GIVEN
slMultiTerm> expecting other text or number

slAKA base> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected GIVEN
slAKA base> expecting other text or number

$*|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GIVEN
$*|> expecting other text or number

slAKA> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected GIVEN
slAKA> expecting other text or number

pAKA> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected GIVEN
pAKA> expecting other text or number

pMultiTermAka> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected GIVEN
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected GIVEN
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Given:
****** / someIndentation                                                                                           :2_1:Given:
******* / myindented: consuming GoDeeper                                                                          :2_1:Given:
myindented: consuming GoDeeper> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected GIVEN
myindented: consuming GoDeeper> expecting (

someIndentation> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected GIVEN
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected GIVEN
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected GIVEN
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pConstitutiveRule> MATCH (CERR): § ( "Scenario 1" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected GIVEN
pConstitutiveRule> expecting ( or other text or number

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

***** \ $>| has returned RuleMarker 1 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Scen:
******** > |>>/base got "Scenario 1"                                                                                :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

******* \ |>>/base has returned ("Scenario 1",0)                                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

****** \ |>>/recurse has returned ("Scenario 1",1)                                                                    :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

***** \ |>| calling $>> has returned ("Scenario 1",1)                                                                  :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

**** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                               :2_1:Given:
**** / someIndentation                                                                                                :2_2:GoDeeper:
***** / myindented: consuming GoDeeper                                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***** \ myindented: consuming GoDeeper has returned GoDeeper                                                          :2_2:Other "amou:
***** / manyIndentation/leaf?                                                                                         :2_2:Other "amou:
****** / pGivens                                                                                                     :2_2:Other "amou:
******* / sameDepth                                                                                                 :2_2:Other "amou:
******** / pRelPred                                                                                                :2_2:Other "amou:
********* / slRelPred                                                                                             :2_2:Other "amou:
********** / nested simpleHorn                                                                                   :2_2:Other "amou:
*********** > |^|                                                                                               :2_2:Other "amou:
*********** / $*|                                                                                               :2_2:Other "amou:
************ / slMultiTerm                                                                                     :2_2:Other "amou:
************* / someSL                                                                                        :2_2:Other "amou:
************** / pNumAsText                                                                                      :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

************* \ someSL has returned (["amount saved"],0)                                                       :2_3:GoDeeper:
slMultiTerm> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slMultiTerm> MATCH (COK): "amount saved"
slMultiTerm> VALUE: ((["amount saved"],0),[])

************ \ slMultiTerm has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

*********** \ $*| has returned (["amount saved"],0)                                                              :2_3:GoDeeper:
*********** / |^| deeps                                                                                          :2_3:GoDeeper:
|^| deeps> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|^| deeps> MATCH (COK): ( (
|^| deeps> VALUE: (([(),()],2),[])

*********** \ |^| deeps has returned ([(),()],2)                                                                    :2_4:Is:
nested simpleHorn> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
nested simpleHorn> MATCH (CERR): "amount saved" ( (
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :2_2:Other "amou:
*********** / $*|                                                                                               :2_2:Other "amou:
************ / slMultiTerm                                                                                     :2_2:Other "amou:
************* / someSL                                                                                        :2_2:Other "amou:
************** / pNumAsText                                                                                      :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

************* \ someSL has returned (["amount saved"],0)                                                       :2_3:GoDeeper:
slMultiTerm> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slMultiTerm> MATCH (COK): "amount saved"
slMultiTerm> VALUE: ((["amount saved"],0),[])

************ \ slMultiTerm has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

*********** \ $*| has returned (["amount saved"],0)                                                              :2_3:GoDeeper:
*********** / |>| calling $>>                                                                                    :2_3:GoDeeper:
************ / |>>/recurse                                                                                      :2_3:GoDeeper:
************* / |>>/recurse                                                                                      :2_4:GoDeeper:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** > |>>/base got RPis                                                                              :2_5:GoDeeper:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************** \ |>>/base has returned (RPis,0)                                                                   :2_5:GoDeeper:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************* \ |>>/recurse has returned (RPis,1)                                                                  :2_5:GoDeeper:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( ( IS
|>>/recurse> VALUE: ((RPis,2),[])

************ \ |>>/recurse has returned (RPis,2)                                                                    :2_5:GoDeeper:
|>| calling $>>> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>| calling $>>> MATCH (COK): ( ( IS
|>| calling $>>> VALUE: ((RPis,2),[])

*********** \ |>| calling $>> has returned (RPis,2)                                                                  :2_5:GoDeeper:
*********** / |>>/recurse                                                                                            :2_5:GoDeeper:
************ / |>>/recurse                                                                                           :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************ / |>>/base                                                                                              :2_5:TNumber 220:
************* / slMultiTerm                                                                                         :2_5:TNumber 220:
************** / someSL                                                                                            :2_5:TNumber 220:
*************** / pNumAsText                                                                                      :2_5:TNumber 220:
pNumAsText> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
pNumAsText> MATCH (COK): 22000
pNumAsText> VALUE: ("22000",[])

*************** \ pNumAsText has returned "22000"                                                              :3_3:UnDeeper:
someSL> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
someSL> MATCH (COK): 22000
someSL> VALUE: ((["22000"],0),[])

************** \ someSL has returned (["22000"],0)                                                              :3_3:UnDeeper:
slMultiTerm> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
slMultiTerm> MATCH (COK): 22000
slMultiTerm> VALUE: ((["22000"],0),[])

************* \ slMultiTerm has returned (["22000"],0)                                                           :3_3:UnDeeper:
************* > |>>/base got ["22000"]                                                                           :3_3:UnDeeper:
|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (COK): 22000
|>>/base> VALUE: ((["22000"],0),[])

************ \ |>>/base has returned (["22000"],0)                                                                :3_3:UnDeeper:
|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (COK): ( 22000
|>>/recurse> VALUE: ((["22000"],1),[])

*********** \ |>>/recurse has returned (["22000"],1)                                                               :3_3:UnDeeper:
RPConstraint> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
RPConstraint> MATCH (COK): "amount saved" ( ( IS ( 22000
RPConstraint> VALUE: ((RPConstraint ["amount saved"] RPis ["22000"],3),[])

********** \ RPConstraint has returned (RPConstraint ["amount saved"] RPis ["22000"],3)                             :3_3:UnDeeper:
slRelPred> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slRelPred> MATCH (COK): "amount saved" ( ( IS ( 22000
slRelPred> VALUE: ((RPConstraint ["amount saved"] RPis ["22000"],3),[])

********* \ slRelPred has returned (RPConstraint ["amount saved"] RPis ["22000"],3)                                  :3_3:UnDeeper:
********* / undeepers                                                                                                :3_3:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                 :3_3:UnDeeper:
********** > sameLine: success!                                                                                  :3_2:Other "earn:
undeepers> IN: ) ) ) "earnings" ( "amount" ( IS ( 25000 <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :3_2:Other "earn:
pRelPred> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pRelPred> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) )
pRelPred> VALUE: (RPConstraint ["amount saved"] RPis ["22000"],[])

******** \ pRelPred has returned RPConstraint ["amount saved"] RPis ["22000"]                                      :3_2:Other "earn:
******** / pRelPred                                                                                                :3_2:Other "earn:
********* / slRelPred                                                                                             :3_2:Other "earn:
********** / nested simpleHorn                                                                                   :3_2:Other "earn:
*********** > |^|                                                                                               :3_2:Other "earn:
*********** / $*|                                                                                               :3_2:Other "earn:
************ / slMultiTerm                                                                                     :3_2:Other "earn:
************* / someSL                                                                                        :3_2:Other "earn:
************** / pNumAsText                                                                                      :3_4:Is:
pNumAsText> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
someSL> MATCH (COK): "earnings" ( "amount"
someSL> VALUE: ((["earnings","amount"],1),[])

************* \ someSL has returned (["earnings","amount"],1)                                                    :3_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slMultiTerm> MATCH (COK): "earnings" ( "amount"
slMultiTerm> VALUE: ((["earnings","amount"],1),[])

************ \ slMultiTerm has returned (["earnings","amount"],1)                                                 :3_4:GoDeeper:
$*|> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
$*|> MATCH (COK): "earnings" ( "amount"
$*|> VALUE: ((["earnings","amount"],1),[])

*********** \ $*| has returned (["earnings","amount"],1)                                                           :3_4:GoDeeper:
*********** / |^| deeps                                                                                            :3_4:GoDeeper:
|^| deeps> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                       :3_4:Is:
nested simpleHorn> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
nested simpleHorn> MATCH (CERR): "earnings" ( "amount" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :3_2:Other "earn:
*********** / $*|                                                                                               :3_2:Other "earn:
************ / slMultiTerm                                                                                     :3_2:Other "earn:
************* / someSL                                                                                        :3_2:Other "earn:
************** / pNumAsText                                                                                      :3_4:Is:
pNumAsText> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
someSL> MATCH (COK): "earnings" ( "amount"
someSL> VALUE: ((["earnings","amount"],1),[])

************* \ someSL has returned (["earnings","amount"],1)                                                    :3_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slMultiTerm> MATCH (COK): "earnings" ( "amount"
slMultiTerm> VALUE: ((["earnings","amount"],1),[])

************ \ slMultiTerm has returned (["earnings","amount"],1)                                                 :3_4:GoDeeper:
$*|> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
$*|> MATCH (COK): "earnings" ( "amount"
$*|> VALUE: ((["earnings","amount"],1),[])

*********** \ $*| has returned (["earnings","amount"],1)                                                           :3_4:GoDeeper:
*********** / |>| calling $>>                                                                                      :3_4:GoDeeper:
************ / |>>/recurse                                                                                        :3_4:GoDeeper:
************* / |>>/recurse                                                                                       :3_4:Is:
|>>/recurse> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=19:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :3_4:Is:
************** > |>>/base got RPis                                                                                :3_5:GoDeeper:
|>>/base> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************* \ |>>/base has returned (RPis,0)                                                                     :3_5:GoDeeper:
|>>/recurse> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************ \ |>>/recurse has returned (RPis,1)                                                                    :3_5:GoDeeper:
|>| calling $>>> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

*********** \ |>| calling $>> has returned (RPis,1)                                                                  :3_5:GoDeeper:
*********** / |>>/recurse                                                                                            :3_5:GoDeeper:
************ / |>>/recurse                                                                                           :3_5:TNumber 250:
|>>/recurse> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected 25000
|>>/recurse> expecting (

************ / |>>/base                                                                                              :3_5:TNumber 250:
************* / slMultiTerm                                                                                         :3_5:TNumber 250:
************** / someSL                                                                                            :3_5:TNumber 250:
*************** / pNumAsText                                                                                      :3_5:TNumber 250:
pNumAsText> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
pNumAsText> MATCH (COK): 25000
pNumAsText> VALUE: ("25000",[])

*************** \ pNumAsText has returned "25000"                                                              :4_3:UnDeeper:
someSL> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
someSL> MATCH (COK): 25000
someSL> VALUE: ((["25000"],0),[])

************** \ someSL has returned (["25000"],0)                                                              :4_3:UnDeeper:
slMultiTerm> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
slMultiTerm> MATCH (COK): 25000
slMultiTerm> VALUE: ((["25000"],0),[])

************* \ slMultiTerm has returned (["25000"],0)                                                           :4_3:UnDeeper:
************* > |>>/base got ["25000"]                                                                           :4_3:UnDeeper:
|>>/base> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
|>>/base> MATCH (COK): 25000
|>>/base> VALUE: ((["25000"],0),[])

************ \ |>>/base has returned (["25000"],0)                                                                :4_3:UnDeeper:
|>>/recurse> IN: ( 25000 ) ) ) "earnings" ( "steadiness"  <…>
|>>/recurse> MATCH (COK): ( 25000
|>>/recurse> VALUE: ((["25000"],1),[])

*********** \ |>>/recurse has returned (["25000"],1)                                                               :4_3:UnDeeper:
RPConstraint> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
RPConstraint> MATCH (COK): "earnings" ( "amount" ( IS ( 25000
RPConstraint> VALUE: ((RPConstraint ["earnings","amount"] RPis ["25000"],3),[])

********** \ RPConstraint has returned (RPConstraint ["earnings","amount"] RPis ["25000"],3)                        :4_3:UnDeeper:
slRelPred> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slRelPred> MATCH (COK): "earnings" ( "amount" ( IS ( 25000
slRelPred> VALUE: ((RPConstraint ["earnings","amount"] RPis ["25000"],3),[])

********* \ slRelPred has returned (RPConstraint ["earnings","amount"] RPis ["25000"],3)                             :4_3:UnDeeper:
********* / undeepers                                                                                                :4_3:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                 :4_3:UnDeeper:
********** > sameLine: success!                                                                                  :4_2:Other "earn:
undeepers> IN: ) ) ) "earnings" ( "steadiness" ( IS ( " <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :4_2:Other "earn:
pRelPred> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
pRelPred> MATCH (COK): "earnings" ( "amount" ( IS ( 25000 ) ) )
pRelPred> VALUE: (RPConstraint ["earnings","amount"] RPis ["25000"],[])

******** \ pRelPred has returned RPConstraint ["earnings","amount"] RPis ["25000"]                                 :4_2:Other "earn:
******** / pRelPred                                                                                                :4_2:Other "earn:
********* / slRelPred                                                                                             :4_2:Other "earn:
********** / nested simpleHorn                                                                                   :4_2:Other "earn:
*********** > |^|                                                                                               :4_2:Other "earn:
*********** / $*|                                                                                               :4_2:Other "earn:
************ / slMultiTerm                                                                                     :4_2:Other "earn:
************* / someSL                                                                                        :4_2:Other "earn:
************** / pNumAsText                                                                                      :4_4:Is:
pNumAsText> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
someSL> MATCH (COK): "earnings" ( "steadiness"
someSL> VALUE: ((["earnings","steadiness"],1),[])

************* \ someSL has returned (["earnings","steadiness"],1)                                                :4_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slMultiTerm> MATCH (COK): "earnings" ( "steadiness"
slMultiTerm> VALUE: ((["earnings","steadiness"],1),[])

************ \ slMultiTerm has returned (["earnings","steadiness"],1)                                             :4_4:GoDeeper:
$*|> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
$*|> MATCH (COK): "earnings" ( "steadiness"
$*|> VALUE: ((["earnings","steadiness"],1),[])

*********** \ $*| has returned (["earnings","steadiness"],1)                                                       :4_4:GoDeeper:
*********** / |^| deeps                                                                                            :4_4:GoDeeper:
|^| deeps> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                       :4_4:Is:
nested simpleHorn> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
nested simpleHorn> MATCH (CERR): "earnings" ( "steadiness" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=29:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :4_2:Other "earn:
*********** / $*|                                                                                               :4_2:Other "earn:
************ / slMultiTerm                                                                                     :4_2:Other "earn:
************* / someSL                                                                                        :4_2:Other "earn:
************** / pNumAsText                                                                                      :4_4:Is:
pNumAsText> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
someSL> MATCH (COK): "earnings" ( "steadiness"
someSL> VALUE: ((["earnings","steadiness"],1),[])

************* \ someSL has returned (["earnings","steadiness"],1)                                                :4_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slMultiTerm> MATCH (COK): "earnings" ( "steadiness"
slMultiTerm> VALUE: ((["earnings","steadiness"],1),[])

************ \ slMultiTerm has returned (["earnings","steadiness"],1)                                             :4_4:GoDeeper:
$*|> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
$*|> MATCH (COK): "earnings" ( "steadiness"
$*|> VALUE: ((["earnings","steadiness"],1),[])

*********** \ $*| has returned (["earnings","steadiness"],1)                                                       :4_4:GoDeeper:
*********** / |>| calling $>>                                                                                      :4_4:GoDeeper:
************ / |>>/recurse                                                                                        :4_4:GoDeeper:
************* / |>>/recurse                                                                                       :4_4:Is:
|>>/recurse> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :4_4:Is:
************** > |>>/base got RPis                                                                                :4_5:GoDeeper:
|>>/base> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************* \ |>>/base has returned (RPis,0)                                                                     :4_5:GoDeeper:
|>>/recurse> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************ \ |>>/recurse has returned (RPis,1)                                                                    :4_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

*********** \ |>| calling $>> has returned (RPis,1)                                                                  :4_5:GoDeeper:
*********** / |>>/recurse                                                                                            :4_5:GoDeeper:
************ / |>>/recurse                                                                                           :4_5:Other "stea:
|>>/recurse> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected "steady"
|>>/recurse> expecting (

************ / |>>/base                                                                                              :4_5:Other "stea:
************* / slMultiTerm                                                                                         :4_5:Other "stea:
************** / someSL                                                                                            :4_5:Other "stea:
someSL> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
someSL> MATCH (COK): "steady"
someSL> VALUE: ((["steady"],0),[])

************** \ someSL has returned (["steady"],0)                                                           :5_2:UnDeeper:
slMultiTerm> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
slMultiTerm> MATCH (COK): "steady"
slMultiTerm> VALUE: ((["steady"],0),[])

************* \ slMultiTerm has returned (["steady"],0)                                                        :5_2:UnDeeper:
************* > |>>/base got ["steady"]                                                                        :5_2:UnDeeper:
|>>/base> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
|>>/base> MATCH (COK): "steady"
|>>/base> VALUE: ((["steady"],0),[])

************ \ |>>/base has returned (["steady"],0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "steady" ) ) ) ) EXPECT ( ( "investmen <…>
|>>/recurse> MATCH (COK): ( "steady"
|>>/recurse> VALUE: ((["steady"],1),[])

*********** \ |>>/recurse has returned (["steady"],1)                                                            :5_2:UnDeeper:
RPConstraint> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
RPConstraint> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
RPConstraint> VALUE: ((RPConstraint ["earnings","steadiness"] RPis ["steady"],3),[])

********** \ RPConstraint has returned (RPConstraint ["earnings","steadiness"] RPis ["steady"],3)                 :5_2:UnDeeper:
slRelPred> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slRelPred> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
slRelPred> VALUE: ((RPConstraint ["earnings","steadiness"] RPis ["steady"],3),[])

********* \ slRelPred has returned (RPConstraint ["earnings","steadiness"] RPis ["steady"],3)                      :5_2:UnDeeper:
********* / undeepers                                                                                              :5_2:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                               :5_2:UnDeeper:
********** > sameLine: success!                                                                                         :5_5:UnDeeper:
undeepers> IN: ) ) ) ) EXPECT ( ( "investment" ( IS ( " <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                                    :5_5:UnDeeper:
pRelPred> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
pRelPred> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
pRelPred> VALUE: (RPConstraint ["earnings","steadiness"] RPis ["steady"],[])

******** \ pRelPred has returned RPConstraint ["earnings","steadiness"] RPis ["steady"]                                   :5_5:UnDeeper:
******** / pRelPred                                                                                                       :5_5:UnDeeper:
********* / slRelPred                                                                                                    :5_5:UnDeeper:
********** / nested simpleHorn                                                                                          :5_5:UnDeeper:
*********** > |^|                                                                                                      :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

nested simpleHorn> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=35:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                               :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPConstraint> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=35:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                              :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPBoolStructR> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=35:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                                       :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slAKA                                                                                                  :5_5:UnDeeper:
************* / $*|                                                                                                  :5_5:UnDeeper:
************** / slAKA base                                                                                         :5_5:UnDeeper:
*************** / slMultiTerm                                                                                      :5_5:UnDeeper:
**************** / someSL                                                                                         :5_5:UnDeeper:
***************** / pNumAsText                                                                                   :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

slAKA base> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected )
slAKA> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPMT> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=35:
RPMT> unexpected )
RPMT> expecting other text or number

slRelPred> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=35:
slRelPred> unexpected )
slRelPred> expecting other text or number

pRelPred> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=35:
pRelPred> unexpected )
pRelPred> expecting other text or number

sameDepth> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
sameDepth> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
sameDepth> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

******* \ sameDepth has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
pGivens> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pGivens> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pGivens> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

****** \ pGivens has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
manyIndentation/leaf?> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
manyIndentation/leaf?> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
manyIndentation/leaf?> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

***** \ manyIndentation/leaf? has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
***** / myindented: consuming UnDeeper                                                                                       :5_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***** \ myindented: consuming UnDeeper has returned UnDeeper                                                        :5_1:Expect:
someIndentation> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someIndentation> MATCH (COK): ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someIndentation> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

**** \ someIndentation has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_1:Expect:
**** / pExpect                                                                                                       :5_1:Expect:
***** / manyIndentation/leaf?                                                                                        :5_2:GoDeeper:
****** / relPredNextlineWhen                                                                                        :5_2:GoDeeper:
******* / pRelPred optIndentedTuple whenCase                                                                       :5_2:GoDeeper:
******** / optIndentedTuple                                                                                       :5_2:GoDeeper:
********* / optIndented                                                                                          :5_2:GoDeeper:
********** / pRelPred                                                                                           :5_2:GoDeeper:
*********** / slRelPred                                                                                        :5_2:GoDeeper:
************ / nested simpleHorn                                                                              :5_2:GoDeeper:
************* > |^|                                                                                          :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************ / RPConstraint                                                                                   :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=37:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************ / RPBoolStructR                                                                                  :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=37:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************ / RPMT                                                                                           :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slAKA                                                                                      :5_2:GoDeeper:
*************** / $*|                                                                                      :5_2:GoDeeper:
**************** / slAKA base                                                                             :5_2:GoDeeper:
***************** / slMultiTerm                                                                          :5_2:GoDeeper:
****************** / someSL                                                                             :5_2:GoDeeper:
******************* / pNumAsText                                                                       :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=37:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=37:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=37:
pRelPred> unexpected (
pRelPred> expecting other text or number

optIndented> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=37:
optIndented> unexpected (
optIndented> expecting other text or number

optIndentedTuple> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=37:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=37:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=37:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

****** / relPredSamelineWhen                                                                                        :5_2:GoDeeper:
******* / $*|                                                                                                      :5_2:GoDeeper:
******** / slRelPred                                                                                              :5_2:GoDeeper:
********* / nested simpleHorn                                                                                    :5_2:GoDeeper:
********** > |^|                                                                                                :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********* / RPConstraint                                                                                         :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=37:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********* / RPBoolStructR                                                                                        :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=37:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********* / RPMT                                                                                                 :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slAKA                                                                                            :5_2:GoDeeper:
************ / $*|                                                                                            :5_2:GoDeeper:
************* / slAKA base                                                                                   :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=37:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=37:
slRelPred> unexpected (
slRelPred> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

relPredSamelineWhen> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=37:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=37:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                              :5_2:GoDeeper:
****** / someIndentation                                                                                            :5_2:GoDeeper:
******* / myindented: consuming GoDeeper                                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented: consuming GoDeeper has returned GoDeeper                                                       :5_3:GoDeeper:
******* / manyIndentation/leaf?                                                                                      :5_3:GoDeeper:
******** / relPredNextlineWhen                                                                                      :5_3:GoDeeper:
********* / pRelPred optIndentedTuple whenCase                                                                     :5_3:GoDeeper:
********** / optIndentedTuple                                                                                     :5_3:GoDeeper:
*********** / optIndented                                                                                        :5_3:GoDeeper:
************ / pRelPred                                                                                         :5_3:GoDeeper:
************* / slRelPred                                                                                      :5_3:GoDeeper:
************** / nested simpleHorn                                                                            :5_3:GoDeeper:
*************** > |^|                                                                                        :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=38:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                                 :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=38:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                                :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=38:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                         :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slAKA                                                                                    :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / slAKA base                                                                           :5_3:GoDeeper:
******************* / slMultiTerm                                                                        :5_3:GoDeeper:
******************** / someSL                                                                           :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=38:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=38:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=38:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=38:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=38:
pRelPred> unexpected (
pRelPred> expecting other text or number

optIndented> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=38:
optIndented> unexpected (
optIndented> expecting other text or number

optIndentedTuple> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=38:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=38:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=38:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******** / relPredSamelineWhen                                                                                      :5_3:GoDeeper:
********* / $*|                                                                                                    :5_3:GoDeeper:
********** / slRelPred                                                                                            :5_3:GoDeeper:
*********** / nested simpleHorn                                                                                  :5_3:GoDeeper:
************ > |^|                                                                                              :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=38:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

*********** / RPConstraint                                                                                       :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=38:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

*********** / RPBoolStructR                                                                                      :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=38:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

*********** / RPMT                                                                                               :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slAKA                                                                                          :5_3:GoDeeper:
************** / $*|                                                                                          :5_3:GoDeeper:
*************** / slAKA base                                                                                 :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=38:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=38:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=38:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=38:
slRelPred> unexpected (
slRelPred> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

relPredSamelineWhen> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=38:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=38:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

******* / manyIndentation/deeper; calling someIndentation                                                            :5_3:GoDeeper:
******** / someIndentation                                                                                          :5_3:GoDeeper:
********* / myindented: consuming GoDeeper                                                                         :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                    :5_3:Other "inve:
********* / manyIndentation/leaf?                                                                                   :5_3:Other "inve:
********** / relPredNextlineWhen                                                                                   :5_3:Other "inve:
*********** / pRelPred optIndentedTuple whenCase                                                                  :5_3:Other "inve:
************ / optIndentedTuple                                                                                  :5_3:Other "inve:
************* / optIndented                                                                                     :5_3:Other "inve:
************** / pRelPred                                                                                      :5_3:Other "inve:
*************** / slRelPred                                                                                   :5_3:Other "inve:
**************** / nested simpleHorn                                                                         :5_3:Other "inve:
***************** > |^|                                                                                     :5_3:Other "inve:
***************** / $*|                                                                                     :5_3:Other "inve:
****************** / slMultiTerm                                                                           :5_3:Other "inve:
******************* / someSL                                                                              :5_3:Other "inve:
******************** / pNumAsText                                                                          :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

******************* \ someSL has returned (["investment"],0)                                               :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

****************** \ slMultiTerm has returned (["investment"],0)                                            :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

***************** \ $*| has returned (["investment"],0)                                                      :5_4:GoDeeper:
***************** / |^| deeps                                                                                :5_4:GoDeeper:
|^| deeps> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

***************** \ |^| deeps has returned ([()],1)                                                           :5_4:Is:
nested simpleHorn> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
nested simpleHorn> MATCH (CERR): "investment" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=41:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

**************** / RPConstraint                                                                              :5_3:Other "inve:
***************** / $*|                                                                                     :5_3:Other "inve:
****************** / slMultiTerm                                                                           :5_3:Other "inve:
******************* / someSL                                                                              :5_3:Other "inve:
******************** / pNumAsText                                                                          :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

******************* \ someSL has returned (["investment"],0)                                               :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

****************** \ slMultiTerm has returned (["investment"],0)                                            :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

***************** \ $*| has returned (["investment"],0)                                                      :5_4:GoDeeper:
***************** / |>| calling $>>                                                                          :5_4:GoDeeper:
****************** / |>>/recurse                                                                            :5_4:GoDeeper:
******************* / |>>/recurse                                                                           :5_4:Is:
|>>/recurse> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************* / |>>/base                                                                              :5_4:Is:
******************** > |>>/base got RPis                                                                    :5_5:GoDeeper:
|>>/base> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

******************* \ |>>/base has returned (RPis,0)                                                         :5_5:GoDeeper:
|>>/recurse> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

****************** \ |>>/recurse has returned (RPis,1)                                                        :5_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

***************** \ |>| calling $>> has returned (RPis,1)                                                      :5_5:GoDeeper:
***************** / |>>/recurse                                                                                :5_5:GoDeeper:
****************** / |>>/recurse                                                                               :5_5:Other "savi:
|>>/recurse> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected "savings"
|>>/recurse> expecting (

****************** / |>>/base                                                                                  :5_5:Other "savi:
******************* / slMultiTerm                                                                             :5_5:Other "savi:
******************** / someSL                                                                                :5_5:Other "savi:
********************* / pNumAsText                                                                            :5_6:When:
pNumAsText> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected WHEN
pNumAsText> expecting number

someSL> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
someSL> MATCH (COK): "savings"
someSL> VALUE: ((["savings"],0),[])

******************** \ someSL has returned (["savings"],0)                                                    :5_6:GoDeeper:
slMultiTerm> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
slMultiTerm> MATCH (COK): "savings"
slMultiTerm> VALUE: ((["savings"],0),[])

******************* \ slMultiTerm has returned (["savings"],0)                                                 :5_6:GoDeeper:
******************* > |>>/base got ["savings"]                                                                 :5_6:GoDeeper:
|>>/base> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/base> MATCH (COK): "savings"
|>>/base> VALUE: ((["savings"],0),[])

****************** \ |>>/base has returned (["savings"],0)                                                      :5_6:GoDeeper:
|>>/recurse> IN: ( "savings" ( WHEN ( "dependents" ( IS ( <…>
|>>/recurse> MATCH (COK): ( "savings"
|>>/recurse> VALUE: ((["savings"],1),[])

***************** \ |>>/recurse has returned (["savings"],1)                                                     :5_6:GoDeeper:
RPConstraint> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
RPConstraint> MATCH (COK): "investment" ( IS ( "savings"
RPConstraint> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

**************** \ RPConstraint has returned (RPConstraint ["investment"] RPis ["savings"],2)                     :5_6:GoDeeper:
slRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slRelPred> MATCH (COK): "investment" ( IS ( "savings"
slRelPred> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

*************** \ slRelPred has returned (RPConstraint ["investment"] RPis ["savings"],2)                          :5_6:GoDeeper:
*************** / undeepers                                                                                        :5_6:GoDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_6:GoDeeper:
undeepers> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=44:
undeepers> unexpected (
undeepers> expecting )

pRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
pRelPred> MATCH (CERR): "investment" ( IS ( "savings"
pRelPred> ERROR:
pRelPred> offset=44:
pRelPred> unexpected (
pRelPred> expecting )

optIndented> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
optIndented> MATCH (CERR): "investment" ( IS ( "savings"
optIndented> ERROR:
optIndented> offset=44:
optIndented> unexpected (
optIndented> expecting )

optIndentedTuple> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
optIndentedTuple> MATCH (CERR): "investment" ( IS ( "savings"
optIndentedTuple> ERROR:
optIndentedTuple> offset=44:
optIndentedTuple> unexpected (
optIndentedTuple> expecting )

pRelPred optIndentedTuple whenCase> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "investment" ( IS ( "savings"
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=44:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting )

relPredNextlineWhen> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
relPredNextlineWhen> MATCH (CERR): "investment" ( IS ( "savings"
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=44:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting )

********** / relPredSamelineWhen                                                                                   :5_3:Other "inve:
*********** / $*|                                                                                                 :5_3:Other "inve:
************ / slRelPred                                                                                         :5_3:Other "inve:
************* / nested simpleHorn                                                                               :5_3:Other "inve:
************** > |^|                                                                                           :5_3:Other "inve:
************** / $*|                                                                                           :5_3:Other "inve:
*************** / slMultiTerm                                                                                 :5_3:Other "inve:
**************** / someSL                                                                                    :5_3:Other "inve:
***************** / pNumAsText                                                                                :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

**************** \ someSL has returned (["investment"],0)                                                     :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

*************** \ slMultiTerm has returned (["investment"],0)                                                  :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

************** \ $*| has returned (["investment"],0)                                                            :5_4:GoDeeper:
************** / |^| deeps                                                                                      :5_4:GoDeeper:
|^| deeps> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                                 :5_4:Is:
nested simpleHorn> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
nested simpleHorn> MATCH (CERR): "investment" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=41:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

************* / RPConstraint                                                                                    :5_3:Other "inve:
************** / $*|                                                                                           :5_3:Other "inve:
*************** / slMultiTerm                                                                                 :5_3:Other "inve:
**************** / someSL                                                                                    :5_3:Other "inve:
***************** / pNumAsText                                                                                :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

**************** \ someSL has returned (["investment"],0)                                                     :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

*************** \ slMultiTerm has returned (["investment"],0)                                                  :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

************** \ $*| has returned (["investment"],0)                                                            :5_4:GoDeeper:
************** / |>| calling $>>                                                                                :5_4:GoDeeper:
*************** / |>>/recurse                                                                                  :5_4:GoDeeper:
**************** / |>>/recurse                                                                                 :5_4:Is:
|>>/recurse> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :5_4:Is:
***************** > |>>/base got RPis                                                                          :5_5:GoDeeper:
|>>/base> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

**************** \ |>>/base has returned (RPis,0)                                                               :5_5:GoDeeper:
|>>/recurse> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

*************** \ |>>/recurse has returned (RPis,1)                                                              :5_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

************** \ |>| calling $>> has returned (RPis,1)                                                            :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "savi:
|>>/recurse> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected "savings"
|>>/recurse> expecting (

*************** / |>>/base                                                                                        :5_5:Other "savi:
**************** / slMultiTerm                                                                                   :5_5:Other "savi:
***************** / someSL                                                                                      :5_5:Other "savi:
****************** / pNumAsText                                                                                  :5_6:When:
pNumAsText> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected WHEN
pNumAsText> expecting number

someSL> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
someSL> MATCH (COK): "savings"
someSL> VALUE: ((["savings"],0),[])

***************** \ someSL has returned (["savings"],0)                                                          :5_6:GoDeeper:
slMultiTerm> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
slMultiTerm> MATCH (COK): "savings"
slMultiTerm> VALUE: ((["savings"],0),[])

**************** \ slMultiTerm has returned (["savings"],0)                                                       :5_6:GoDeeper:
**************** > |>>/base got ["savings"]                                                                       :5_6:GoDeeper:
|>>/base> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/base> MATCH (COK): "savings"
|>>/base> VALUE: ((["savings"],0),[])

*************** \ |>>/base has returned (["savings"],0)                                                            :5_6:GoDeeper:
|>>/recurse> IN: ( "savings" ( WHEN ( "dependents" ( IS ( <…>
|>>/recurse> MATCH (COK): ( "savings"
|>>/recurse> VALUE: ((["savings"],1),[])

************** \ |>>/recurse has returned (["savings"],1)                                                           :5_6:GoDeeper:
RPConstraint> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
RPConstraint> MATCH (COK): "investment" ( IS ( "savings"
RPConstraint> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

************* \ RPConstraint has returned (RPConstraint ["investment"] RPis ["savings"],2)                           :5_6:GoDeeper:
slRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slRelPred> MATCH (COK): "investment" ( IS ( "savings"
slRelPred> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

************ \ slRelPred has returned (RPConstraint ["investment"] RPis ["savings"],2)                                :5_6:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment" ( IS ( "savings"
$*|> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

*********** \ $*| has returned (RPConstraint ["investment"] RPis ["savings"],2)                                        :5_6:GoDeeper:
*********** / |>| calling $>>                                                                                          :5_6:GoDeeper:
************ / |>>/recurse                                                                                            :5_6:GoDeeper:
************* / |>>/recurse                                                                                           :5_6:When:
|>>/recurse> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected WHEN
|>>/recurse> expecting (

************* / |>>/base                                                                                              :5_6:When:
************** / optional whenCase -- but we should still consume GoDeepers before giving up                         :5_6:When:
*************** / whenCase                                                                                          :5_6:When:
**************** / whenMeansIf                                                                                     :5_6:When:
whenMeansIf> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
whenMeansIf> MATCH (COK): WHEN
whenMeansIf> VALUE: (When,[])

**************** \ whenMeansIf has returned When                                                                    :5_7:GoDeeper:
**************** / pBSR                                                                                             :5_7:GoDeeper:
***************** / ppp inner                                                                                      :5_7:GoDeeper:
****************** / expression                                                                                   :5_7:GoDeeper:
******************* / labelPrefix                                                                                :5_7:GoDeeper:
labelPrefix> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=46:
labelPrefix> unexpected (
labelPrefix> expecting Other text

******************* / term p                                                                                     :5_7:GoDeeper:
******************** / term p/notLabelTerm                                                                      :5_7:GoDeeper:
********************* / term p/2:someIndentation expr p                                                        :5_7:GoDeeper:
********************** / someIndentation                                                                      :5_7:GoDeeper:
*********************** / myindented: consuming GoDeeper                                                     :5_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                                :5_7:Other "depe:
*********************** / manyIndentation/leaf?                                                               :5_7:Other "depe:
************************ / expression                                                                        :5_7:Other "depe:
************************* / labelPrefix                                                                     :5_7:Other "depe:
labelPrefix> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
labelPrefix> MATCH (COK): "dependents"
labelPrefix> VALUE: ("dependents",[])

************************* \ labelPrefix has returned "dependents"                                            :5_8:GoDeeper:
************************* / term p                                                                           :5_8:GoDeeper:
************************** / term p/notLabelTerm                                                            :5_8:GoDeeper:
*************************** / term p/2:someIndentation expr p                                              :5_8:GoDeeper:
**************************** / someIndentation                                                            :5_8:GoDeeper:
***************************** / myindented: consuming GoDeeper                                           :5_8:GoDeeper:
myindented: consuming GoDeeper> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************************** \ myindented: consuming GoDeeper has returned GoDeeper                      :5_8:Is:
***************************** / manyIndentation/leaf?                                                     :5_8:Is:
****************************** / expression                                                              :5_8:Is:
******************************* / labelPrefix                                                           :5_8:Is:
labelPrefix> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=49:
labelPrefix> unexpected IS
labelPrefix> expecting Other text

******************************* / term p                                                                :5_8:Is:
******************************** / term p/notLabelTerm                                                 :5_8:Is:
********************************* / term p/2:someIndentation expr p                                   :5_8:Is:
********************************** / someIndentation                                                 :5_8:Is:
*********************************** / myindented: consuming GoDeeper                                :5_8:Is:
myindented: consuming GoDeeper> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=49:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (

********************************* / term p/3:plain p                                                  :5_8:Is:
********************************** / pRelPred                                                        :5_8:Is:
*********************************** / slRelPred                                                     :5_8:Is:
************************************ / nested simpleHorn                                           :5_8:Is:
************************************* > |^|                                                       :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

nested simpleHorn> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting other text or number

************************************ / RPConstraint                                                :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPConstraint> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=49:
RPConstraint> unexpected IS
RPConstraint> expecting other text or number

************************************ / RPBoolStructR                                               :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPBoolStructR> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=49:
RPBoolStructR> unexpected IS
RPBoolStructR> expecting other text or number

************************************ / RPMT                                                        :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slAKA                                                   :5_8:Is:
*************************************** / $*|                                                   :5_8:Is:
**************************************** / slAKA base                                          :5_8:Is:
***************************************** / slMultiTerm                                       :5_8:Is:
****************************************** / someSL                                          :5_8:Is:
******************************************* / pNumAsText                                    :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

slAKA base> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=49:
slAKA base> unexpected IS
slAKA base> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

slAKA> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=49:
slAKA> unexpected IS
slAKA> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPMT> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=49:
RPMT> unexpected IS
RPMT> expecting other text or number

slRelPred> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=49:
slRelPred> unexpected IS
slRelPred> expecting other text or number

pRelPred> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=49:
pRelPred> unexpected IS
pRelPred> expecting other text or number

term p/3:plain p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=49:
term p/3:plain p> unexpected IS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or term

term p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting ( or term

expression> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting expression

manyIndentation/leaf?> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=49:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting expression

***************************** / manyIndentation/deeper; calling someIndentation                           :5_8:Is:
****************************** / someIndentation                                                         :5_8:Is:
******************************* / myindented: consuming GoDeeper                                        :5_8:Is:
myindented: consuming GoDeeper> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=49:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=49:
manyIndentation/deeper; calling someIndentation> unexpected IS
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting ( or expression

*************************** / term p/3:plain p                                                             :5_8:GoDeeper:
**************************** / pRelPred                                                                   :5_8:GoDeeper:
***************************** / slRelPred                                                                :5_8:GoDeeper:
****************************** / nested simpleHorn                                                      :5_8:GoDeeper:
******************************* > |^|                                                                  :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=48:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

****************************** / RPConstraint                                                           :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=48:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

****************************** / RPBoolStructR                                                          :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=48:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

****************************** / RPMT                                                                   :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slAKA                                                              :5_8:GoDeeper:
********************************* / $*|                                                              :5_8:GoDeeper:
********************************** / slAKA base                                                     :5_8:GoDeeper:
*********************************** / slMultiTerm                                                  :5_8:GoDeeper:
************************************ / someSL                                                     :5_8:GoDeeper:
************************************* / pNumAsText                                               :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=48:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=48:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=48:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=48:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=48:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=48:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or expression

term p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting ( or expression

expression> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expression> MATCH (CERR): "dependents"
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting (, NOT, or expression

manyIndentation/leaf?> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=49:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting (, NOT, or expression

*********************** / manyIndentation/deeper; calling someIndentation                                     :5_7:Other "depe:
************************ / someIndentation                                                                   :5_7:Other "depe:
************************* / myindented: consuming GoDeeper                                                  :5_7:Other "depe:
myindented: consuming GoDeeper> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=47:
myindented: consuming GoDeeper> unexpected "dependents"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=47:
someIndentation> unexpected "dependents"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=47:
manyIndentation/deeper; calling someIndentation> unexpected "dependents"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (, NOT, or expression

term p/2:someIndentation expr p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (, NOT, or expression

********************* / term p/3:plain p                                                                       :5_7:GoDeeper:
********************** / pRelPred                                                                             :5_7:GoDeeper:
*********************** / slRelPred                                                                          :5_7:GoDeeper:
************************ / nested simpleHorn                                                                :5_7:GoDeeper:
************************* > |^|                                                                            :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************ / RPConstraint                                                                     :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=46:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************ / RPBoolStructR                                                                    :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=46:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************ / RPMT                                                                             :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slAKA                                                                        :5_7:GoDeeper:
*************************** / $*|                                                                        :5_7:GoDeeper:
**************************** / slAKA base                                                               :5_7:GoDeeper:
***************************** / slMultiTerm                                                            :5_7:GoDeeper:
****************************** / someSL                                                               :5_7:GoDeeper:
******************************* / pNumAsText                                                         :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=46:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=46:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=46:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=46:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=46:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=46:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting (, NOT, or expression

term p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting (, NOT, or expression

expression> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting expression

ppp inner> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> unexpected IS
ppp inner> expecting expression

***************** / withPrePost                                                                                    :5_7:GoDeeper:
****************** > |<* starting                                                                                 :5_7:GoDeeper:
****************** / $*|                                                                                          :5_7:GoDeeper:
******************* / pre part                                                                                   :5_7:GoDeeper:
******************** / aboveNextLineKeyword                                                                      :5_7:Other "depe:
********************* / expectUnDeepers                                                                         :5_7:Other "depe:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expectUnDeepers> MATCH (CERR): "dependents" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
aboveNextLineKeyword> MATCH (CERR): "dependents" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                             :5_7:Other "depe:
******************** / aboveNextLineKeyword                                                                       :5_8:GoDeeper:
********************* / expectUnDeepers                                                                          :5_8:GoDeeper:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                              :5_8:GoDeeper:
******************** / aboveNextLineKeyword                                                                        :5_8:Is:
********************* / expectUnDeepers                                                                           :5_8:Is:
********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                               :5_8:Is:
pre part> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=49:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=49:
withPrePost> unexpected IS
withPrePost> expecting (, ), Other text, or other text or number

***************** / withPreOnly                                                                                    :5_7:GoDeeper:
****************** / $*|                                                                                          :5_7:GoDeeper:
******************* / pre part                                                                                   :5_7:GoDeeper:
******************** / aboveNextLineKeyword                                                                      :5_7:Other "depe:
********************* / expectUnDeepers                                                                         :5_7:Other "depe:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expectUnDeepers> MATCH (CERR): "dependents" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
aboveNextLineKeyword> MATCH (CERR): "dependents" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                             :5_7:Other "depe:
******************** / aboveNextLineKeyword                                                                       :5_8:GoDeeper:
********************* / expectUnDeepers                                                                          :5_8:GoDeeper:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                              :5_8:GoDeeper:
******************** / aboveNextLineKeyword                                                                        :5_8:Is:
********************* / expectUnDeepers                                                                           :5_8:Is:
********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                               :5_8:Is:
pre part> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=49:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=49:
withPreOnly> unexpected IS
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=49:
pBSR> unexpected IS
pBSR> expecting (, ), Other text, expression, or other text or number

**************** / Otherwise                                                                                       :5_6:When:
Otherwise> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=45:
Otherwise> unexpected WHEN
Otherwise> expecting OTHERWISE

whenCase> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> unexpected IS
whenCase> expecting (, ), Other text, expression, or other text or number

optional whenCase -- but we should still consume GoDeepers before giving up> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

************** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :5_6:When:
************** > |>>/base got Nothing                                                                                :5_6:When:
|>>/base> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                     :5_6:When:
|>>/recurse> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************ \ |>>/recurse has returned (Nothing,1)                                                                    :5_6:When:
|>| calling $>>> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
|>| calling $>>> MATCH (COK): (
|>| calling $>>> VALUE: ((Nothing,1),[])

*********** \ |>| calling $>> has returned (Nothing,1)                                                                  :5_6:When:
*********** / undeepers                                                                                                 :5_6:When:
************ > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                  :5_6:When:
undeepers> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=45:
undeepers> unexpected WHEN
undeepers> expecting )

relPredSamelineWhen> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
relPredSamelineWhen> MATCH (CERR): "investment" ( IS ( "savings" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=45:
relPredSamelineWhen> unexpected WHEN
relPredSamelineWhen> expecting ( or )

manyIndentation/leaf?> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=45:
manyIndentation/leaf?> unexpected WHEN
manyIndentation/leaf?> expecting ( or )

********* / manyIndentation/deeper; calling someIndentation                                                         :5_3:Other "inve:
********** / someIndentation                                                                                       :5_3:Other "inve:
*********** / myindented: consuming GoDeeper                                                                      :5_3:Other "inve:
myindented: consuming GoDeeper> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=39:
myindented: consuming GoDeeper> unexpected "investment"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=39:
someIndentation> unexpected "investment"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=39:
manyIndentation/deeper; calling someIndentation> unexpected "investment"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected WHEN
someIndentation> expecting ( or )

manyIndentation/deeper; calling someIndentation> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=45:
manyIndentation/deeper; calling someIndentation> unexpected WHEN
manyIndentation/deeper; calling someIndentation> expecting ( or )

someIndentation> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected WHEN
someIndentation> expecting ( or )

manyIndentation/deeper; calling someIndentation> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=45:
manyIndentation/deeper; calling someIndentation> unexpected WHEN
manyIndentation/deeper; calling someIndentation> expecting ( or )

pExpect> IN: EXPECT ( ( "investment" ( IS ( "savings" <…>
pExpect> MATCH (CERR): EXPECT
pExpect> ERROR:
pExpect> offset=45:
pExpect> unexpected WHEN
pExpect> expecting ( or )

pScenarioRule> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pScenarioRule> MATCH (CERR): § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pScenarioRule> ERROR:
pScenarioRule> offset=45:
pScenarioRule> unexpected WHEN
pScenarioRule> expecting ( or )

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

****** \ $>| has returned RuleMarker 1 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

******** / |>>/base                                                                                                :1_2:Other "Scen:
********* > |>>/base got "Scenario 1"                                                                              :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

******** \ |>>/base has returned ("Scenario 1",0)                                                                   :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

******* \ |>>/recurse has returned ("Scenario 1",1)                                                                  :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

****** \ |>| calling $>> has returned ("Scenario 1",1)                                                                :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

***** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                             :2_1:Given:
pSrcRef> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pSrcRef> MATCH (COK): § ( "Scenario 1" )
pSrcRef> VALUE: ((Just ("\167",1,"Scenario 1"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",1,"Scenario 1"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Given:
**** / pHornlike / permute                                                                                           :2_1:Given:
***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected GIVEN
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected GIVEN
Otherwise> expecting OTHERWISE

whenCase> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected GIVEN
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Given:
****** / preambleParamText:[Upon]                                                                                  :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected GIVEN
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected GIVEN
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected GIVEN
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected GIVEN
Otherwise> expecting OTHERWISE

whenCase> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected GIVEN
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :2_1:Given:
****** / preambleParamText:[Given]                                                                                 :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******* \ $>| has returned Given                                                                                   :2_2:GoDeeper:
******* / |>| calling $>>                                                                                          :2_2:GoDeeper:
******** / |>>/recurse                                                                                            :2_2:GoDeeper:
********* / |>>/recurse                                                                                           :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********* / |>>/base                                                                                              :2_2:Other "amou:
********** / pParamText                                                                                          :2_2:Other "amou:
*********** / pParamText(flat) first line: pKeyValues                                                           :2_2:Other "amou:
************ / pKeyValuesAka                                                                                   :2_2:Other "amou:
************* / slAKA                                                                                         :2_2:Other "amou:
************** / $*|                                                                                         :2_2:Other "amou:
*************** / slAKA base                                                                                :2_2:Other "amou:
**************** / slKeyValues                                                                             :2_2:Other "amou:
***************** / $*|                                                                                   :2_2:Other "amou:
****************** / someSL                                                                              :2_2:Other "amou:
******************* / pNumAsText                                                                            :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

****************** \ someSL has returned (["amount saved"],0)                                             :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

***************** \ $*| has returned (["amount saved"],0)                                                  :2_3:GoDeeper:
***************** / |>>/recurse                                                                            :2_3:GoDeeper:
****************** / |>>/recurse                                                                            :2_4:GoDeeper:
******************* / |>>/recurse                                                                           :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************* / |>>/base                                                                              :2_4:Is:
******************** / |?| optional something                                                              :2_4:Is:
********************* / |>>/recurse                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************* / |>>/base                                                                          :2_4:Is:
********************** / slTypeSig                                                                       :2_4:Is:
*********************** / $>|                                                                           :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

*********************** \ $>| has returned Is                                                            :2_5:GoDeeper:
*********************** / |>>/recurse                                                                    :2_5:GoDeeper:
************************ / |>>/recurse                                                                   :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************ / |>>/base                                                                      :2_5:TNumber 220:
************************* / $>|                                                                         :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                         :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

*********************** / |>>/base                                                                       :2_5:GoDeeper:
************************ / $>|                                                                          :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************ / $*|                                                                          :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                     :2_4:Is:
******************** > |>>/base got Nothing                                                                :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                     :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

****************** \ |>>/recurse has returned (Nothing,1)                                                    :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

***************** \ |>>/recurse has returned (Nothing,2)                                                      :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                                 :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                    :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                             :2_4:Is:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** / slAKA optional akapart                                                                        :2_4:Is:
**************** / |?| optional something                                                                      :2_4:Is:
***************** / |>>/recurse                                                                               :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

***************** / |>>/base                                                                                  :2_4:Is:
****************** / PAKA/akapart                                                                            :2_4:Is:
******************* / $>|                                                                                   :2_4:Is:
******************** / Aka Token                                                                           :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                             :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                               :2_4:Is:
*************** > |>>/base got Nothing                                                                          :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                               :2_4:Is:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** / slAKA optional typically                                                                      :2_4:Is:
**************** / |?| optional something                                                                      :2_4:Is:
***************** / |>>/recurse                                                                               :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

***************** / |>>/base                                                                                  :2_4:Is:
****************** / typically                                                                               :2_4:Is:
******************* / $>|                                                                                   :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                             :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************** \ slAKA optional typically has returned (Nothing,0)                                             :2_4:Is:
*************** > |>>/base got Nothing                                                                          :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                               :2_4:Is:
************** > slAKA: proceeding after base and entityalias are retrieved ...                                  :2_4:Is:
************** > pAKA: entityalias = Nothing                                                                     :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************* \ slAKA has returned (("amount saved" :| [],Nothing),2)                                             :2_4:Is:
************* / undeepers                                                                                         :2_4:Is:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                          :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

******** / |>>/base                                                                                               :2_2:GoDeeper:
********* / pParamText                                                                                           :2_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :2_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :2_2:GoDeeper:
************ / slAKA                                                                                          :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slAKA base                                                                                 :2_2:GoDeeper:
*************** / slKeyValues                                                                              :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

pHornlike/givenLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/givenLimb> MATCH (CERR): GIVEN
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=9:
pHornlike/givenLimb> unexpected IS
pHornlike/givenLimb> expecting (, ), AKA, or TYPICALLY

pHornlike / permute> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike / permute> MATCH (CERR): GIVEN
pHornlike / permute> ERROR:
pHornlike / permute> offset=9:
pHornlike / permute> unexpected IS
pHornlike / permute> expecting (, ), AKA, or TYPICALLY

pHornlike> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pHornlike> MATCH (CERR): § ( "Scenario 1" ) GIVEN
pHornlike> ERROR:
pHornlike> offset=9:
pHornlike> unexpected IS
pHornlike> expecting (, ), AKA, or TYPICALLY

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

**** \ $>| has returned RuleMarker 1 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Scen:
|>>/recurse> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Scenario 1"
|>>/recurse> expecting (

****** / |>>/base                                                                                                    :1_2:Other "Scen:
******* > |>>/base got "Scenario 1"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Scenario 1" ) GIVEN ( "amount saved" (  <…>
|>>/base> MATCH (COK): "Scenario 1"
|>>/base> VALUE: (("Scenario 1",0),[])

****** \ |>>/base has returned ("Scenario 1",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>>/recurse> MATCH (COK): ( "Scenario 1"
|>>/recurse> VALUE: (("Scenario 1",1),[])

***** \ |>>/recurse has returned ("Scenario 1",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Scenario 1" ) GIVEN ( "amount saved"  <…>
|>| calling $>>> MATCH (COK): ( "Scenario 1"
|>| calling $>>> VALUE: (("Scenario 1",1),[])

**** \ |>| calling $>> has returned ("Scenario 1",1)                                                                    :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:Given:
undeepers> IN: ) GIVEN ( "amount saved" ( ( IS ( 22000  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:Given:
pRuleLabel> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRuleLabel> MATCH (COK): § ( "Scenario 1" )
pRuleLabel> VALUE: (("\167",1,"Scenario 1"),[])

*** \ pRuleLabel has returned ("\167",1,"Scenario 1")                                                                 :2_1:Given:
pRule> IN: § ( "Scenario 1" ) GIVEN ( "amount saved <…>
pRule> MATCH (COK): § ( "Scenario 1" )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",1,"Scenario 1"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",1,"Scenario 1"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Given:
** / pRule                                                                                                             :2_1:Given:
*** / pRegRule                                                                                                        :2_1:Given:
**** / pRuleLabel                                                                                                    :2_1:Given:
***** / $>|                                                                                                         :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :2_1:Given:
***** / someDeep                                                                                                    :2_1:Given:
****** / someDeep first part calls base directly                                                                   :2_1:Given:
someDeep first part calls base directly> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected GIVEN
someDeep first part calls base directly> expecting Other text

someDeep> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected GIVEN
someDeep> expecting Other text

pRegRuleSugary> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected GIVEN
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Given:
***** / permutationsReg                                                                                             :2_1:Given:
****** / regulative permutation with deontic-temporal                                                              :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :2_2:Other "amou:
*********** / pParamText                                                                                        :2_2:Other "amou:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "amou:
************* / pKeyValuesAka                                                                                 :2_2:Other "amou:
************** / slAKA                                                                                       :2_2:Other "amou:
*************** / $*|                                                                                       :2_2:Other "amou:
**************** / slAKA base                                                                              :2_2:Other "amou:
***************** / slKeyValues                                                                           :2_2:Other "amou:
****************** / $*|                                                                                 :2_2:Other "amou:
******************* / someSL                                                                            :2_2:Other "amou:
******************** / pNumAsText                                                                          :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

******************* \ someSL has returned (["amount saved"],0)                                           :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

****************** \ $*| has returned (["amount saved"],0)                                                :2_3:GoDeeper:
****************** / |>>/recurse                                                                          :2_3:GoDeeper:
******************* / |>>/recurse                                                                          :2_4:GoDeeper:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / |?| optional something                                                            :2_4:Is:
********************** / |>>/recurse                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************** / |>>/base                                                                        :2_4:Is:
*********************** / slTypeSig                                                                     :2_4:Is:
************************ / $>|                                                                         :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

************************ \ $>| has returned Is                                                          :2_5:GoDeeper:
************************ / |>>/recurse                                                                  :2_5:GoDeeper:
************************* / |>>/recurse                                                                 :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************* / |>>/base                                                                    :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************** / $*|                                                                       :2_5:TNumber 220:
*************************** / $>|                                                                     :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

************************ / |>>/base                                                                     :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                        :2_5:GoDeeper:
************************** / $>|                                                                      :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                   :2_4:Is:
********************* > |>>/base got Nothing                                                              :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                   :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

******************* \ |>>/recurse has returned (Nothing,1)                                                  :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

****************** \ |>>/recurse has returned (Nothing,2)                                                    :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

***************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                               :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                  :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional akapart                                                                      :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / PAKA/akapart                                                                          :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
********************* / Aka Token                                                                         :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                             :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional typically                                                                    :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / typically                                                                             :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                           :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                                :2_4:Is:
*************** > pAKA: entityalias = Nothing                                                                   :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
************** / undeepers                                                                                       :2_4:Is:
*************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                        :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

********* / |>>/base                                                                                             :2_2:GoDeeper:
********** / pParamText                                                                                         :2_2:GoDeeper:
*********** / pParamText(flat) first line: pKeyValues                                                          :2_2:GoDeeper:
************ / pKeyValuesAka                                                                                  :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slKeyValues                                                                            :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

regulative permutation with deontic-temporal> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
regulative permutation with deontic-temporal> MATCH (CERR): GIVEN
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=9:
regulative permutation with deontic-temporal> unexpected IS
regulative permutation with deontic-temporal> expecting (, ), AKA, or TYPICALLY

****** / regulative permutation with deontic-action                                                                :2_1:Given:
******* / WHERE                                                                                                   :2_1:Given:
WHERE> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected GIVEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected GIVEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Given:
******** / $>|                                                                                                   :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******** \ $>| has returned Given                                                                                 :2_2:GoDeeper:
******** / |>| calling $>>                                                                                        :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :2_2:Other "amou:
*********** / pParamText                                                                                        :2_2:Other "amou:
************ / pParamText(flat) first line: pKeyValues                                                         :2_2:Other "amou:
************* / pKeyValuesAka                                                                                 :2_2:Other "amou:
************** / slAKA                                                                                       :2_2:Other "amou:
*************** / $*|                                                                                       :2_2:Other "amou:
**************** / slAKA base                                                                              :2_2:Other "amou:
***************** / slKeyValues                                                                           :2_2:Other "amou:
****************** / $*|                                                                                 :2_2:Other "amou:
******************* / someSL                                                                            :2_2:Other "amou:
******************** / pNumAsText                                                                          :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

******************* \ someSL has returned (["amount saved"],0)                                           :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

****************** \ $*| has returned (["amount saved"],0)                                                :2_3:GoDeeper:
****************** / |>>/recurse                                                                          :2_3:GoDeeper:
******************* / |>>/recurse                                                                          :2_4:GoDeeper:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / |?| optional something                                                            :2_4:Is:
********************** / |>>/recurse                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************** / |>>/base                                                                        :2_4:Is:
*********************** / slTypeSig                                                                     :2_4:Is:
************************ / $>|                                                                         :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

************************ \ $>| has returned Is                                                          :2_5:GoDeeper:
************************ / |>>/recurse                                                                  :2_5:GoDeeper:
************************* / |>>/recurse                                                                 :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************* / |>>/base                                                                    :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************** / $*|                                                                       :2_5:TNumber 220:
*************************** / $>|                                                                     :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

************************ / |>>/base                                                                     :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                        :2_5:GoDeeper:
************************** / $>|                                                                      :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                   :2_4:Is:
********************* > |>>/base got Nothing                                                              :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                   :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

******************* \ |>>/recurse has returned (Nothing,1)                                                  :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

****************** \ |>>/recurse has returned (Nothing,2)                                                    :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

***************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                               :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                  :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional akapart                                                                      :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / PAKA/akapart                                                                          :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
********************* / Aka Token                                                                         :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                             :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** / |>>/recurse                                                                                   :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :2_4:Is:
**************** / slAKA optional typically                                                                    :2_4:Is:
***************** / |?| optional something                                                                    :2_4:Is:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / typically                                                                             :2_4:Is:
******************** / $>|                                                                                 :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                           :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                           :2_4:Is:
**************** > |>>/base got Nothing                                                                        :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                             :2_4:Is:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                                :2_4:Is:
*************** > pAKA: entityalias = Nothing                                                                   :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA has returned (("amount saved" :| [],Nothing),2)                                           :2_4:Is:
************** / undeepers                                                                                       :2_4:Is:
*************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                        :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

********* / |>>/base                                                                                             :2_2:GoDeeper:
********** / pParamText                                                                                         :2_2:GoDeeper:
*********** / pParamText(flat) first line: pKeyValues                                                          :2_2:GoDeeper:
************ / pKeyValuesAka                                                                                  :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slKeyValues                                                                            :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

regulative permutation with deontic-action> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
regulative permutation with deontic-action> MATCH (CERR): GIVEN
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=9:
regulative permutation with deontic-action> unexpected IS
regulative permutation with deontic-action> expecting (, ), AKA, or TYPICALLY

permutationsReg> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=9:
permutationsReg> unexpected IS
permutationsReg> expecting (, ), AKA, or TYPICALLY

pRegRuleNormal> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=9:
pRegRuleNormal> unexpected IS
pRegRuleNormal> expecting (, ), AKA, or TYPICALLY

pRegRule> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=9:
pRegRule> unexpected IS
pRegRule> expecting (, ), AKA, TYPICALLY, or §

*** / pTypeDefinition                                                                                                 :2_1:Given:
**** / pRuleLabel                                                                                                    :2_1:Given:
***** / $>|                                                                                                         :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :2_1:Given:
***** / preambleParamText:[Upon]                                                                                    :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected GIVEN
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected GIVEN
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:Given:
***** / preambleParamText:[Given]                                                                                   :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

****** \ $>| has returned Given                                                                                     :2_2:GoDeeper:
****** / |>| calling $>>                                                                                            :2_2:GoDeeper:
******* / |>>/recurse                                                                                              :2_2:GoDeeper:
******** / |>>/recurse                                                                                             :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

******** / |>>/base                                                                                                :2_2:Other "amou:
********* / pParamText                                                                                            :2_2:Other "amou:
********** / pParamText(flat) first line: pKeyValues                                                             :2_2:Other "amou:
*********** / pKeyValuesAka                                                                                     :2_2:Other "amou:
************ / slAKA                                                                                           :2_2:Other "amou:
************* / $*|                                                                                           :2_2:Other "amou:
************** / slAKA base                                                                                  :2_2:Other "amou:
*************** / slKeyValues                                                                               :2_2:Other "amou:
**************** / $*|                                                                                     :2_2:Other "amou:
***************** / someSL                                                                                :2_2:Other "amou:
****************** / pNumAsText                                                                              :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

***************** \ someSL has returned (["amount saved"],0)                                               :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

**************** \ $*| has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
**************** / |>>/recurse                                                                              :2_3:GoDeeper:
***************** / |>>/recurse                                                                              :2_4:GoDeeper:
****************** / |>>/recurse                                                                             :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

****************** / |>>/base                                                                                :2_4:Is:
******************* / |?| optional something                                                                :2_4:Is:
******************** / |>>/recurse                                                                         :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************** / |>>/base                                                                            :2_4:Is:
********************* / slTypeSig                                                                         :2_4:Is:
********************** / $>|                                                                             :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

********************** \ $>| has returned Is                                                              :2_5:GoDeeper:
********************** / |>>/recurse                                                                      :2_5:GoDeeper:
*********************** / |>>/recurse                                                                     :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

*********************** / |>>/base                                                                        :2_5:TNumber 220:
************************ / $>|                                                                           :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************ / $*|                                                                           :2_5:TNumber 220:
************************* / $>|                                                                         :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

********************** / |>>/base                                                                         :2_5:GoDeeper:
*********************** / $>|                                                                            :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

*********************** / $*|                                                                            :2_5:GoDeeper:
************************ / $>|                                                                          :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                       :2_4:Is:
******************* > |>>/base got Nothing                                                                  :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                       :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

***************** \ |>>/recurse has returned (Nothing,1)                                                      :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

**************** \ |>>/recurse has returned (Nothing,2)                                                        :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                                   :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                      :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

************* \ $*| has returned (("amount saved" :| [],Nothing),2)                                               :2_4:Is:
************* / |>>/recurse                                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :2_4:Is:
************** / slAKA optional akapart                                                                          :2_4:Is:
*************** / |?| optional something                                                                        :2_4:Is:
**************** / |>>/recurse                                                                                 :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :2_4:Is:
***************** / PAKA/akapart                                                                              :2_4:Is:
****************** / $>|                                                                                     :2_4:Is:
******************* / Aka Token                                                                             :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                               :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                                 :2_4:Is:
************** > |>>/base got Nothing                                                                            :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                 :2_4:Is:
************* / |>>/recurse                                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :2_4:Is:
************** / slAKA optional typically                                                                        :2_4:Is:
*************** / |?| optional something                                                                        :2_4:Is:
**************** / |>>/recurse                                                                                 :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :2_4:Is:
***************** / typically                                                                                 :2_4:Is:
****************** / $>|                                                                                     :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                               :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                               :2_4:Is:
************** > |>>/base got Nothing                                                                            :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                 :2_4:Is:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                    :2_4:Is:
************* > pAKA: entityalias = Nothing                                                                       :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************ \ slAKA has returned (("amount saved" :| [],Nothing),2)                                               :2_4:Is:
************ / undeepers                                                                                           :2_4:Is:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                            :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

******* / |>>/base                                                                                                 :2_2:GoDeeper:
******** / pParamText                                                                                             :2_2:GoDeeper:
********* / pParamText(flat) first line: pKeyValues                                                              :2_2:GoDeeper:
********** / pKeyValuesAka                                                                                      :2_2:GoDeeper:
*********** / slAKA                                                                                            :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slAKA base                                                                                   :2_2:GoDeeper:
************** / slKeyValues                                                                                :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / someSL                                                                                 :2_2:GoDeeper:
***************** / pNumAsText                                                                           :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

pHornlike/givenLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/givenLimb> MATCH (CERR): GIVEN
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=9:
pHornlike/givenLimb> unexpected IS
pHornlike/givenLimb> expecting (, ), AKA, or TYPICALLY

pTypeDefinition> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pTypeDefinition> MATCH (CERR): GIVEN
pTypeDefinition> ERROR:
pTypeDefinition> offset=9:
pTypeDefinition> unexpected IS
pTypeDefinition> expecting (, ), AKA, or TYPICALLY

*** / pConstitutiveRule                                                                                               :2_1:Given:
**** / pRuleLabel                                                                                                    :2_1:Given:
***** / $>|                                                                                                         :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :2_1:Given:
***** / manyIndentation/leaf?                                                                                       :2_1:Given:
****** / pMultiTermAka                                                                                             :2_1:Given:
******* / pAKA                                                                                                    :2_1:Given:
******** / slAKA                                                                                                 :2_1:Given:
********* / $*|                                                                                                 :2_1:Given:
********** / slAKA base                                                                                        :2_1:Given:
*********** / slMultiTerm                                                                                     :2_1:Given:
************ / someSL                                                                                        :2_1:Given:
************* / pNumAsText                                                                                  :2_1:Given:
pNumAsText> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GIVEN
pNumAsText> expecting number

someSL> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GIVEN
someSL> expecting other text or number

slMultiTerm> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GIVEN
slMultiTerm> expecting other text or number

slAKA base> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected GIVEN
slAKA base> expecting other text or number

$*|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GIVEN
$*|> expecting other text or number

slAKA> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected GIVEN
slAKA> expecting other text or number

pAKA> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected GIVEN
pAKA> expecting other text or number

pMultiTermAka> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected GIVEN
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected GIVEN
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Given:
****** / someIndentation                                                                                           :2_1:Given:
******* / myindented: consuming GoDeeper                                                                          :2_1:Given:
myindented: consuming GoDeeper> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected GIVEN
myindented: consuming GoDeeper> expecting (

someIndentation> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected GIVEN
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected GIVEN
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected GIVEN
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected GIVEN
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :2_1:Given:
**** / pRuleLabel                                                                                                    :2_1:Given:
***** / $>|                                                                                                         :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

**** / someIndentation                                                                                                :2_2:GoDeeper:
***** / myindented: consuming GoDeeper                                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***** \ myindented: consuming GoDeeper has returned GoDeeper                                                          :2_2:Other "amou:
***** / manyIndentation/leaf?                                                                                         :2_2:Other "amou:
****** / pGivens                                                                                                     :2_2:Other "amou:
******* / sameDepth                                                                                                 :2_2:Other "amou:
******** / pRelPred                                                                                                :2_2:Other "amou:
********* / slRelPred                                                                                             :2_2:Other "amou:
********** / nested simpleHorn                                                                                   :2_2:Other "amou:
*********** > |^|                                                                                               :2_2:Other "amou:
*********** / $*|                                                                                               :2_2:Other "amou:
************ / slMultiTerm                                                                                     :2_2:Other "amou:
************* / someSL                                                                                        :2_2:Other "amou:
************** / pNumAsText                                                                                      :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

************* \ someSL has returned (["amount saved"],0)                                                       :2_3:GoDeeper:
slMultiTerm> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slMultiTerm> MATCH (COK): "amount saved"
slMultiTerm> VALUE: ((["amount saved"],0),[])

************ \ slMultiTerm has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

*********** \ $*| has returned (["amount saved"],0)                                                              :2_3:GoDeeper:
*********** / |^| deeps                                                                                          :2_3:GoDeeper:
|^| deeps> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|^| deeps> MATCH (COK): ( (
|^| deeps> VALUE: (([(),()],2),[])

*********** \ |^| deeps has returned ([(),()],2)                                                                    :2_4:Is:
nested simpleHorn> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
nested simpleHorn> MATCH (CERR): "amount saved" ( (
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :2_2:Other "amou:
*********** / $*|                                                                                               :2_2:Other "amou:
************ / slMultiTerm                                                                                     :2_2:Other "amou:
************* / someSL                                                                                        :2_2:Other "amou:
************** / pNumAsText                                                                                      :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

************* \ someSL has returned (["amount saved"],0)                                                       :2_3:GoDeeper:
slMultiTerm> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slMultiTerm> MATCH (COK): "amount saved"
slMultiTerm> VALUE: ((["amount saved"],0),[])

************ \ slMultiTerm has returned (["amount saved"],0)                                                    :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

*********** \ $*| has returned (["amount saved"],0)                                                              :2_3:GoDeeper:
*********** / |>| calling $>>                                                                                    :2_3:GoDeeper:
************ / |>>/recurse                                                                                      :2_3:GoDeeper:
************* / |>>/recurse                                                                                      :2_4:GoDeeper:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** > |>>/base got RPis                                                                              :2_5:GoDeeper:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************** \ |>>/base has returned (RPis,0)                                                                   :2_5:GoDeeper:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************* \ |>>/recurse has returned (RPis,1)                                                                  :2_5:GoDeeper:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( ( IS
|>>/recurse> VALUE: ((RPis,2),[])

************ \ |>>/recurse has returned (RPis,2)                                                                    :2_5:GoDeeper:
|>| calling $>>> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>| calling $>>> MATCH (COK): ( ( IS
|>| calling $>>> VALUE: ((RPis,2),[])

*********** \ |>| calling $>> has returned (RPis,2)                                                                  :2_5:GoDeeper:
*********** / |>>/recurse                                                                                            :2_5:GoDeeper:
************ / |>>/recurse                                                                                           :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************ / |>>/base                                                                                              :2_5:TNumber 220:
************* / slMultiTerm                                                                                         :2_5:TNumber 220:
************** / someSL                                                                                            :2_5:TNumber 220:
*************** / pNumAsText                                                                                      :2_5:TNumber 220:
pNumAsText> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
pNumAsText> MATCH (COK): 22000
pNumAsText> VALUE: ("22000",[])

*************** \ pNumAsText has returned "22000"                                                              :3_3:UnDeeper:
someSL> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
someSL> MATCH (COK): 22000
someSL> VALUE: ((["22000"],0),[])

************** \ someSL has returned (["22000"],0)                                                              :3_3:UnDeeper:
slMultiTerm> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
slMultiTerm> MATCH (COK): 22000
slMultiTerm> VALUE: ((["22000"],0),[])

************* \ slMultiTerm has returned (["22000"],0)                                                           :3_3:UnDeeper:
************* > |>>/base got ["22000"]                                                                           :3_3:UnDeeper:
|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (COK): 22000
|>>/base> VALUE: ((["22000"],0),[])

************ \ |>>/base has returned (["22000"],0)                                                                :3_3:UnDeeper:
|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (COK): ( 22000
|>>/recurse> VALUE: ((["22000"],1),[])

*********** \ |>>/recurse has returned (["22000"],1)                                                               :3_3:UnDeeper:
RPConstraint> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
RPConstraint> MATCH (COK): "amount saved" ( ( IS ( 22000
RPConstraint> VALUE: ((RPConstraint ["amount saved"] RPis ["22000"],3),[])

********** \ RPConstraint has returned (RPConstraint ["amount saved"] RPis ["22000"],3)                             :3_3:UnDeeper:
slRelPred> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slRelPred> MATCH (COK): "amount saved" ( ( IS ( 22000
slRelPred> VALUE: ((RPConstraint ["amount saved"] RPis ["22000"],3),[])

********* \ slRelPred has returned (RPConstraint ["amount saved"] RPis ["22000"],3)                                  :3_3:UnDeeper:
********* / undeepers                                                                                                :3_3:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                 :3_3:UnDeeper:
********** > sameLine: success!                                                                                  :3_2:Other "earn:
undeepers> IN: ) ) ) "earnings" ( "amount" ( IS ( 25000 <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :3_2:Other "earn:
pRelPred> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pRelPred> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) )
pRelPred> VALUE: (RPConstraint ["amount saved"] RPis ["22000"],[])

******** \ pRelPred has returned RPConstraint ["amount saved"] RPis ["22000"]                                      :3_2:Other "earn:
******** / pRelPred                                                                                                :3_2:Other "earn:
********* / slRelPred                                                                                             :3_2:Other "earn:
********** / nested simpleHorn                                                                                   :3_2:Other "earn:
*********** > |^|                                                                                               :3_2:Other "earn:
*********** / $*|                                                                                               :3_2:Other "earn:
************ / slMultiTerm                                                                                     :3_2:Other "earn:
************* / someSL                                                                                        :3_2:Other "earn:
************** / pNumAsText                                                                                      :3_4:Is:
pNumAsText> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
someSL> MATCH (COK): "earnings" ( "amount"
someSL> VALUE: ((["earnings","amount"],1),[])

************* \ someSL has returned (["earnings","amount"],1)                                                    :3_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slMultiTerm> MATCH (COK): "earnings" ( "amount"
slMultiTerm> VALUE: ((["earnings","amount"],1),[])

************ \ slMultiTerm has returned (["earnings","amount"],1)                                                 :3_4:GoDeeper:
$*|> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
$*|> MATCH (COK): "earnings" ( "amount"
$*|> VALUE: ((["earnings","amount"],1),[])

*********** \ $*| has returned (["earnings","amount"],1)                                                           :3_4:GoDeeper:
*********** / |^| deeps                                                                                            :3_4:GoDeeper:
|^| deeps> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                       :3_4:Is:
nested simpleHorn> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
nested simpleHorn> MATCH (CERR): "earnings" ( "amount" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :3_2:Other "earn:
*********** / $*|                                                                                               :3_2:Other "earn:
************ / slMultiTerm                                                                                     :3_2:Other "earn:
************* / someSL                                                                                        :3_2:Other "earn:
************** / pNumAsText                                                                                      :3_4:Is:
pNumAsText> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
someSL> MATCH (COK): "earnings" ( "amount"
someSL> VALUE: ((["earnings","amount"],1),[])

************* \ someSL has returned (["earnings","amount"],1)                                                    :3_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slMultiTerm> MATCH (COK): "earnings" ( "amount"
slMultiTerm> VALUE: ((["earnings","amount"],1),[])

************ \ slMultiTerm has returned (["earnings","amount"],1)                                                 :3_4:GoDeeper:
$*|> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
$*|> MATCH (COK): "earnings" ( "amount"
$*|> VALUE: ((["earnings","amount"],1),[])

*********** \ $*| has returned (["earnings","amount"],1)                                                           :3_4:GoDeeper:
*********** / |>| calling $>>                                                                                      :3_4:GoDeeper:
************ / |>>/recurse                                                                                        :3_4:GoDeeper:
************* / |>>/recurse                                                                                       :3_4:Is:
|>>/recurse> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=19:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :3_4:Is:
************** > |>>/base got RPis                                                                                :3_5:GoDeeper:
|>>/base> IN: IS ( 25000 ) ) ) "earnings" ( "steadines <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************* \ |>>/base has returned (RPis,0)                                                                     :3_5:GoDeeper:
|>>/recurse> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************ \ |>>/recurse has returned (RPis,1)                                                                    :3_5:GoDeeper:
|>| calling $>>> IN: ( IS ( 25000 ) ) ) "earnings" ( "steadin <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

*********** \ |>| calling $>> has returned (RPis,1)                                                                  :3_5:GoDeeper:
*********** / |>>/recurse                                                                                            :3_5:GoDeeper:
************ / |>>/recurse                                                                                           :3_5:TNumber 250:
|>>/recurse> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected 25000
|>>/recurse> expecting (

************ / |>>/base                                                                                              :3_5:TNumber 250:
************* / slMultiTerm                                                                                         :3_5:TNumber 250:
************** / someSL                                                                                            :3_5:TNumber 250:
*************** / pNumAsText                                                                                      :3_5:TNumber 250:
pNumAsText> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
pNumAsText> MATCH (COK): 25000
pNumAsText> VALUE: ("25000",[])

*************** \ pNumAsText has returned "25000"                                                              :4_3:UnDeeper:
someSL> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
someSL> MATCH (COK): 25000
someSL> VALUE: ((["25000"],0),[])

************** \ someSL has returned (["25000"],0)                                                              :4_3:UnDeeper:
slMultiTerm> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
slMultiTerm> MATCH (COK): 25000
slMultiTerm> VALUE: ((["25000"],0),[])

************* \ slMultiTerm has returned (["25000"],0)                                                           :4_3:UnDeeper:
************* > |>>/base got ["25000"]                                                                           :4_3:UnDeeper:
|>>/base> IN: 25000 ) ) ) "earnings" ( "steadiness" (  <…>
|>>/base> MATCH (COK): 25000
|>>/base> VALUE: ((["25000"],0),[])

************ \ |>>/base has returned (["25000"],0)                                                                :4_3:UnDeeper:
|>>/recurse> IN: ( 25000 ) ) ) "earnings" ( "steadiness"  <…>
|>>/recurse> MATCH (COK): ( 25000
|>>/recurse> VALUE: ((["25000"],1),[])

*********** \ |>>/recurse has returned (["25000"],1)                                                               :4_3:UnDeeper:
RPConstraint> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
RPConstraint> MATCH (COK): "earnings" ( "amount" ( IS ( 25000
RPConstraint> VALUE: ((RPConstraint ["earnings","amount"] RPis ["25000"],3),[])

********** \ RPConstraint has returned (RPConstraint ["earnings","amount"] RPis ["25000"],3)                        :4_3:UnDeeper:
slRelPred> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
slRelPred> MATCH (COK): "earnings" ( "amount" ( IS ( 25000
slRelPred> VALUE: ((RPConstraint ["earnings","amount"] RPis ["25000"],3),[])

********* \ slRelPred has returned (RPConstraint ["earnings","amount"] RPis ["25000"],3)                             :4_3:UnDeeper:
********* / undeepers                                                                                                :4_3:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                 :4_3:UnDeeper:
********** > sameLine: success!                                                                                  :4_2:Other "earn:
undeepers> IN: ) ) ) "earnings" ( "steadiness" ( IS ( " <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                             :4_2:Other "earn:
pRelPred> IN: "earnings" ( "amount" ( IS ( 25000 ) ) ) <…>
pRelPred> MATCH (COK): "earnings" ( "amount" ( IS ( 25000 ) ) )
pRelPred> VALUE: (RPConstraint ["earnings","amount"] RPis ["25000"],[])

******** \ pRelPred has returned RPConstraint ["earnings","amount"] RPis ["25000"]                                 :4_2:Other "earn:
******** / pRelPred                                                                                                :4_2:Other "earn:
********* / slRelPred                                                                                             :4_2:Other "earn:
********** / nested simpleHorn                                                                                   :4_2:Other "earn:
*********** > |^|                                                                                               :4_2:Other "earn:
*********** / $*|                                                                                               :4_2:Other "earn:
************ / slMultiTerm                                                                                     :4_2:Other "earn:
************* / someSL                                                                                        :4_2:Other "earn:
************** / pNumAsText                                                                                      :4_4:Is:
pNumAsText> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
someSL> MATCH (COK): "earnings" ( "steadiness"
someSL> VALUE: ((["earnings","steadiness"],1),[])

************* \ someSL has returned (["earnings","steadiness"],1)                                                :4_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slMultiTerm> MATCH (COK): "earnings" ( "steadiness"
slMultiTerm> VALUE: ((["earnings","steadiness"],1),[])

************ \ slMultiTerm has returned (["earnings","steadiness"],1)                                             :4_4:GoDeeper:
$*|> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
$*|> MATCH (COK): "earnings" ( "steadiness"
$*|> VALUE: ((["earnings","steadiness"],1),[])

*********** \ $*| has returned (["earnings","steadiness"],1)                                                       :4_4:GoDeeper:
*********** / |^| deeps                                                                                            :4_4:GoDeeper:
|^| deeps> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                       :4_4:Is:
nested simpleHorn> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
nested simpleHorn> MATCH (CERR): "earnings" ( "steadiness" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=29:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

********** / RPConstraint                                                                                        :4_2:Other "earn:
*********** / $*|                                                                                               :4_2:Other "earn:
************ / slMultiTerm                                                                                     :4_2:Other "earn:
************* / someSL                                                                                        :4_2:Other "earn:
************** / pNumAsText                                                                                      :4_4:Is:
pNumAsText> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
someSL> MATCH (COK): "earnings" ( "steadiness"
someSL> VALUE: ((["earnings","steadiness"],1),[])

************* \ someSL has returned (["earnings","steadiness"],1)                                                :4_4:GoDeeper:
slMultiTerm> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slMultiTerm> MATCH (COK): "earnings" ( "steadiness"
slMultiTerm> VALUE: ((["earnings","steadiness"],1),[])

************ \ slMultiTerm has returned (["earnings","steadiness"],1)                                             :4_4:GoDeeper:
$*|> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
$*|> MATCH (COK): "earnings" ( "steadiness"
$*|> VALUE: ((["earnings","steadiness"],1),[])

*********** \ $*| has returned (["earnings","steadiness"],1)                                                       :4_4:GoDeeper:
*********** / |>| calling $>>                                                                                      :4_4:GoDeeper:
************ / |>>/recurse                                                                                        :4_4:GoDeeper:
************* / |>>/recurse                                                                                       :4_4:Is:
|>>/recurse> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************* / |>>/base                                                                                          :4_4:Is:
************** > |>>/base got RPis                                                                                :4_5:GoDeeper:
|>>/base> IN: IS ( "steady" ) ) ) ) EXPECT ( ( "invest <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

************* \ |>>/base has returned (RPis,0)                                                                     :4_5:GoDeeper:
|>>/recurse> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

************ \ |>>/recurse has returned (RPis,1)                                                                    :4_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "steady" ) ) ) ) EXPECT ( ( "inve <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

*********** \ |>| calling $>> has returned (RPis,1)                                                                  :4_5:GoDeeper:
*********** / |>>/recurse                                                                                            :4_5:GoDeeper:
************ / |>>/recurse                                                                                           :4_5:Other "stea:
|>>/recurse> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected "steady"
|>>/recurse> expecting (

************ / |>>/base                                                                                              :4_5:Other "stea:
************* / slMultiTerm                                                                                         :4_5:Other "stea:
************** / someSL                                                                                            :4_5:Other "stea:
someSL> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
someSL> MATCH (COK): "steady"
someSL> VALUE: ((["steady"],0),[])

************** \ someSL has returned (["steady"],0)                                                           :5_2:UnDeeper:
slMultiTerm> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
slMultiTerm> MATCH (COK): "steady"
slMultiTerm> VALUE: ((["steady"],0),[])

************* \ slMultiTerm has returned (["steady"],0)                                                        :5_2:UnDeeper:
************* > |>>/base got ["steady"]                                                                        :5_2:UnDeeper:
|>>/base> IN: "steady" ) ) ) ) EXPECT ( ( "investment" <…>
|>>/base> MATCH (COK): "steady"
|>>/base> VALUE: ((["steady"],0),[])

************ \ |>>/base has returned (["steady"],0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "steady" ) ) ) ) EXPECT ( ( "investmen <…>
|>>/recurse> MATCH (COK): ( "steady"
|>>/recurse> VALUE: ((["steady"],1),[])

*********** \ |>>/recurse has returned (["steady"],1)                                                            :5_2:UnDeeper:
RPConstraint> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
RPConstraint> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
RPConstraint> VALUE: ((RPConstraint ["earnings","steadiness"] RPis ["steady"],3),[])

********** \ RPConstraint has returned (RPConstraint ["earnings","steadiness"] RPis ["steady"],3)                 :5_2:UnDeeper:
slRelPred> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
slRelPred> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
slRelPred> VALUE: ((RPConstraint ["earnings","steadiness"] RPis ["steady"],3),[])

********* \ slRelPred has returned (RPConstraint ["earnings","steadiness"] RPis ["steady"],3)                      :5_2:UnDeeper:
********* / undeepers                                                                                              :5_2:UnDeeper:
********** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                               :5_2:UnDeeper:
********** > sameLine: success!                                                                                         :5_5:UnDeeper:
undeepers> IN: ) ) ) ) EXPECT ( ( "investment" ( IS ( " <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

********* \ undeepers has returned ()                                                                                    :5_5:UnDeeper:
pRelPred> IN: "earnings" ( "steadiness" ( IS ( "steady <…>
pRelPred> MATCH (COK): "earnings" ( "steadiness" ( IS ( "steady <…>
pRelPred> VALUE: (RPConstraint ["earnings","steadiness"] RPis ["steady"],[])

******** \ pRelPred has returned RPConstraint ["earnings","steadiness"] RPis ["steady"]                                   :5_5:UnDeeper:
******** / pRelPred                                                                                                       :5_5:UnDeeper:
********* / slRelPred                                                                                                    :5_5:UnDeeper:
********** / nested simpleHorn                                                                                          :5_5:UnDeeper:
*********** > |^|                                                                                                      :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

nested simpleHorn> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=35:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                               :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPConstraint> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=35:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                              :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slMultiTerm                                                                                            :5_5:UnDeeper:
************* / someSL                                                                                               :5_5:UnDeeper:
************** / pNumAsText                                                                                         :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPBoolStructR> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=35:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                                       :5_5:UnDeeper:
*********** / $*|                                                                                                      :5_5:UnDeeper:
************ / slAKA                                                                                                  :5_5:UnDeeper:
************* / $*|                                                                                                  :5_5:UnDeeper:
************** / slAKA base                                                                                         :5_5:UnDeeper:
*************** / slMultiTerm                                                                                      :5_5:UnDeeper:
**************** / someSL                                                                                         :5_5:UnDeeper:
***************** / pNumAsText                                                                                   :5_5:UnDeeper:
pNumAsText> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected )
someSL> expecting other text or number

slMultiTerm> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=35:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

slAKA base> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected )
slAKA> expecting other text or number

$*|> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting other text or number

RPMT> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=35:
RPMT> unexpected )
RPMT> expecting other text or number

slRelPred> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=35:
slRelPred> unexpected )
slRelPred> expecting other text or number

pRelPred> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=35:
pRelPred> unexpected )
pRelPred> expecting other text or number

sameDepth> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
sameDepth> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
sameDepth> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

******* \ sameDepth has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
pGivens> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pGivens> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pGivens> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

****** \ pGivens has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
manyIndentation/leaf?> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
manyIndentation/leaf?> MATCH (COK): "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
manyIndentation/leaf?> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

***** \ manyIndentation/leaf? has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_5:UnDeeper:
***** / myindented: consuming UnDeeper                                                                                       :5_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) EXPECT ( ( "investment" ( IS ( "saving <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***** \ myindented: consuming UnDeeper has returned UnDeeper                                                        :5_1:Expect:
someIndentation> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someIndentation> MATCH (COK): ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someIndentation> VALUE: ([RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]],[])

**** \ someIndentation has returned [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]] :5_1:Expect:
**** / pExpect                                                                                                       :5_1:Expect:
***** / manyIndentation/leaf?                                                                                        :5_2:GoDeeper:
****** / relPredNextlineWhen                                                                                        :5_2:GoDeeper:
******* / pRelPred optIndentedTuple whenCase                                                                       :5_2:GoDeeper:
******** / optIndentedTuple                                                                                       :5_2:GoDeeper:
********* / optIndented                                                                                          :5_2:GoDeeper:
********** / pRelPred                                                                                           :5_2:GoDeeper:
*********** / slRelPred                                                                                        :5_2:GoDeeper:
************ / nested simpleHorn                                                                              :5_2:GoDeeper:
************* > |^|                                                                                          :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************ / RPConstraint                                                                                   :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=37:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************ / RPBoolStructR                                                                                  :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=37:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************ / RPMT                                                                                           :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slAKA                                                                                      :5_2:GoDeeper:
*************** / $*|                                                                                      :5_2:GoDeeper:
**************** / slAKA base                                                                             :5_2:GoDeeper:
***************** / slMultiTerm                                                                          :5_2:GoDeeper:
****************** / someSL                                                                             :5_2:GoDeeper:
******************* / pNumAsText                                                                       :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=37:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=37:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=37:
pRelPred> unexpected (
pRelPred> expecting other text or number

optIndented> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=37:
optIndented> unexpected (
optIndented> expecting other text or number

optIndentedTuple> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=37:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=37:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=37:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

****** / relPredSamelineWhen                                                                                        :5_2:GoDeeper:
******* / $*|                                                                                                      :5_2:GoDeeper:
******** / slRelPred                                                                                              :5_2:GoDeeper:
********* / nested simpleHorn                                                                                    :5_2:GoDeeper:
********** > |^|                                                                                                :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********* / RPConstraint                                                                                         :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=37:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********* / RPBoolStructR                                                                                        :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slMultiTerm                                                                                      :5_2:GoDeeper:
************ / someSL                                                                                         :5_2:GoDeeper:
************* / pNumAsText                                                                                   :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=37:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********* / RPMT                                                                                                 :5_2:GoDeeper:
********** / $*|                                                                                                :5_2:GoDeeper:
*********** / slAKA                                                                                            :5_2:GoDeeper:
************ / $*|                                                                                            :5_2:GoDeeper:
************* / slAKA base                                                                                   :5_2:GoDeeper:
************** / slMultiTerm                                                                                :5_2:GoDeeper:
*************** / someSL                                                                                   :5_2:GoDeeper:
**************** / pNumAsText                                                                             :5_2:GoDeeper:
pNumAsText> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=37:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=37:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=37:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=37:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=37:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=37:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=37:
slRelPred> unexpected (
slRelPred> expecting other text or number

$*|> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=37:
$*|> unexpected (
$*|> expecting other text or number

relPredSamelineWhen> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=37:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=37:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                              :5_2:GoDeeper:
****** / someIndentation                                                                                            :5_2:GoDeeper:
******* / myindented: consuming GoDeeper                                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented: consuming GoDeeper has returned GoDeeper                                                       :5_3:GoDeeper:
******* / manyIndentation/leaf?                                                                                      :5_3:GoDeeper:
******** / relPredNextlineWhen                                                                                      :5_3:GoDeeper:
********* / pRelPred optIndentedTuple whenCase                                                                     :5_3:GoDeeper:
********** / optIndentedTuple                                                                                     :5_3:GoDeeper:
*********** / optIndented                                                                                        :5_3:GoDeeper:
************ / pRelPred                                                                                         :5_3:GoDeeper:
************* / slRelPred                                                                                      :5_3:GoDeeper:
************** / nested simpleHorn                                                                            :5_3:GoDeeper:
*************** > |^|                                                                                        :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=38:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                                 :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=38:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                                :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=38:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                         :5_3:GoDeeper:
*************** / $*|                                                                                        :5_3:GoDeeper:
**************** / slAKA                                                                                    :5_3:GoDeeper:
***************** / $*|                                                                                    :5_3:GoDeeper:
****************** / slAKA base                                                                           :5_3:GoDeeper:
******************* / slMultiTerm                                                                        :5_3:GoDeeper:
******************** / someSL                                                                           :5_3:GoDeeper:
********************* / pNumAsText                                                                     :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=38:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=38:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=38:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=38:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=38:
pRelPred> unexpected (
pRelPred> expecting other text or number

optIndented> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=38:
optIndented> unexpected (
optIndented> expecting other text or number

optIndentedTuple> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=38:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=38:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=38:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******** / relPredSamelineWhen                                                                                      :5_3:GoDeeper:
********* / $*|                                                                                                    :5_3:GoDeeper:
********** / slRelPred                                                                                            :5_3:GoDeeper:
*********** / nested simpleHorn                                                                                  :5_3:GoDeeper:
************ > |^|                                                                                              :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=38:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

*********** / RPConstraint                                                                                       :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=38:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

*********** / RPBoolStructR                                                                                      :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slMultiTerm                                                                                    :5_3:GoDeeper:
************** / someSL                                                                                       :5_3:GoDeeper:
*************** / pNumAsText                                                                                 :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=38:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

*********** / RPMT                                                                                               :5_3:GoDeeper:
************ / $*|                                                                                              :5_3:GoDeeper:
************* / slAKA                                                                                          :5_3:GoDeeper:
************** / $*|                                                                                          :5_3:GoDeeper:
*************** / slAKA base                                                                                 :5_3:GoDeeper:
**************** / slMultiTerm                                                                              :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=38:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=38:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=38:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=38:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=38:
slRelPred> unexpected (
slRelPred> expecting other text or number

$*|> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

relPredSamelineWhen> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=38:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=38:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

******* / manyIndentation/deeper; calling someIndentation                                                            :5_3:GoDeeper:
******** / someIndentation                                                                                          :5_3:GoDeeper:
********* / myindented: consuming GoDeeper                                                                         :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                    :5_3:Other "inve:
********* / manyIndentation/leaf?                                                                                   :5_3:Other "inve:
********** / relPredNextlineWhen                                                                                   :5_3:Other "inve:
*********** / pRelPred optIndentedTuple whenCase                                                                  :5_3:Other "inve:
************ / optIndentedTuple                                                                                  :5_3:Other "inve:
************* / optIndented                                                                                     :5_3:Other "inve:
************** / pRelPred                                                                                      :5_3:Other "inve:
*************** / slRelPred                                                                                   :5_3:Other "inve:
**************** / nested simpleHorn                                                                         :5_3:Other "inve:
***************** > |^|                                                                                     :5_3:Other "inve:
***************** / $*|                                                                                     :5_3:Other "inve:
****************** / slMultiTerm                                                                           :5_3:Other "inve:
******************* / someSL                                                                              :5_3:Other "inve:
******************** / pNumAsText                                                                          :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

******************* \ someSL has returned (["investment"],0)                                               :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

****************** \ slMultiTerm has returned (["investment"],0)                                            :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

***************** \ $*| has returned (["investment"],0)                                                      :5_4:GoDeeper:
***************** / |^| deeps                                                                                :5_4:GoDeeper:
|^| deeps> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

***************** \ |^| deeps has returned ([()],1)                                                           :5_4:Is:
nested simpleHorn> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
nested simpleHorn> MATCH (CERR): "investment" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=41:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

**************** / RPConstraint                                                                              :5_3:Other "inve:
***************** / $*|                                                                                     :5_3:Other "inve:
****************** / slMultiTerm                                                                           :5_3:Other "inve:
******************* / someSL                                                                              :5_3:Other "inve:
******************** / pNumAsText                                                                          :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

******************* \ someSL has returned (["investment"],0)                                               :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

****************** \ slMultiTerm has returned (["investment"],0)                                            :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

***************** \ $*| has returned (["investment"],0)                                                      :5_4:GoDeeper:
***************** / |>| calling $>>                                                                          :5_4:GoDeeper:
****************** / |>>/recurse                                                                            :5_4:GoDeeper:
******************* / |>>/recurse                                                                           :5_4:Is:
|>>/recurse> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************* / |>>/base                                                                              :5_4:Is:
******************** > |>>/base got RPis                                                                    :5_5:GoDeeper:
|>>/base> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

******************* \ |>>/base has returned (RPis,0)                                                         :5_5:GoDeeper:
|>>/recurse> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

****************** \ |>>/recurse has returned (RPis,1)                                                        :5_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

***************** \ |>| calling $>> has returned (RPis,1)                                                      :5_5:GoDeeper:
***************** / |>>/recurse                                                                                :5_5:GoDeeper:
****************** / |>>/recurse                                                                               :5_5:Other "savi:
|>>/recurse> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected "savings"
|>>/recurse> expecting (

****************** / |>>/base                                                                                  :5_5:Other "savi:
******************* / slMultiTerm                                                                             :5_5:Other "savi:
******************** / someSL                                                                                :5_5:Other "savi:
********************* / pNumAsText                                                                            :5_6:When:
pNumAsText> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected WHEN
pNumAsText> expecting number

someSL> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
someSL> MATCH (COK): "savings"
someSL> VALUE: ((["savings"],0),[])

******************** \ someSL has returned (["savings"],0)                                                    :5_6:GoDeeper:
slMultiTerm> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
slMultiTerm> MATCH (COK): "savings"
slMultiTerm> VALUE: ((["savings"],0),[])

******************* \ slMultiTerm has returned (["savings"],0)                                                 :5_6:GoDeeper:
******************* > |>>/base got ["savings"]                                                                 :5_6:GoDeeper:
|>>/base> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/base> MATCH (COK): "savings"
|>>/base> VALUE: ((["savings"],0),[])

****************** \ |>>/base has returned (["savings"],0)                                                      :5_6:GoDeeper:
|>>/recurse> IN: ( "savings" ( WHEN ( "dependents" ( IS ( <…>
|>>/recurse> MATCH (COK): ( "savings"
|>>/recurse> VALUE: ((["savings"],1),[])

***************** \ |>>/recurse has returned (["savings"],1)                                                     :5_6:GoDeeper:
RPConstraint> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
RPConstraint> MATCH (COK): "investment" ( IS ( "savings"
RPConstraint> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

**************** \ RPConstraint has returned (RPConstraint ["investment"] RPis ["savings"],2)                     :5_6:GoDeeper:
slRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slRelPred> MATCH (COK): "investment" ( IS ( "savings"
slRelPred> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

*************** \ slRelPred has returned (RPConstraint ["investment"] RPis ["savings"],2)                          :5_6:GoDeeper:
*************** / undeepers                                                                                        :5_6:GoDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_6:GoDeeper:
undeepers> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=44:
undeepers> unexpected (
undeepers> expecting )

pRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
pRelPred> MATCH (CERR): "investment" ( IS ( "savings"
pRelPred> ERROR:
pRelPred> offset=44:
pRelPred> unexpected (
pRelPred> expecting )

optIndented> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
optIndented> MATCH (CERR): "investment" ( IS ( "savings"
optIndented> ERROR:
optIndented> offset=44:
optIndented> unexpected (
optIndented> expecting )

optIndentedTuple> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
optIndentedTuple> MATCH (CERR): "investment" ( IS ( "savings"
optIndentedTuple> ERROR:
optIndentedTuple> offset=44:
optIndentedTuple> unexpected (
optIndentedTuple> expecting )

pRelPred optIndentedTuple whenCase> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "investment" ( IS ( "savings"
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=44:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting )

relPredNextlineWhen> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
relPredNextlineWhen> MATCH (CERR): "investment" ( IS ( "savings"
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=44:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting )

********** / relPredSamelineWhen                                                                                   :5_3:Other "inve:
*********** / $*|                                                                                                 :5_3:Other "inve:
************ / slRelPred                                                                                         :5_3:Other "inve:
************* / nested simpleHorn                                                                               :5_3:Other "inve:
************** > |^|                                                                                           :5_3:Other "inve:
************** / $*|                                                                                           :5_3:Other "inve:
*************** / slMultiTerm                                                                                 :5_3:Other "inve:
**************** / someSL                                                                                    :5_3:Other "inve:
***************** / pNumAsText                                                                                :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

**************** \ someSL has returned (["investment"],0)                                                     :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

*************** \ slMultiTerm has returned (["investment"],0)                                                  :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

************** \ $*| has returned (["investment"],0)                                                            :5_4:GoDeeper:
************** / |^| deeps                                                                                      :5_4:GoDeeper:
|^| deeps> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                                 :5_4:Is:
nested simpleHorn> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
nested simpleHorn> MATCH (CERR): "investment" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=41:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

************* / RPConstraint                                                                                    :5_3:Other "inve:
************** / $*|                                                                                           :5_3:Other "inve:
*************** / slMultiTerm                                                                                 :5_3:Other "inve:
**************** / someSL                                                                                    :5_3:Other "inve:
***************** / pNumAsText                                                                                :5_4:Is:
pNumAsText> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someSL> MATCH (COK): "investment"
someSL> VALUE: ((["investment"],0),[])

**************** \ someSL has returned (["investment"],0)                                                     :5_4:GoDeeper:
slMultiTerm> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slMultiTerm> MATCH (COK): "investment"
slMultiTerm> VALUE: ((["investment"],0),[])

*************** \ slMultiTerm has returned (["investment"],0)                                                  :5_4:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment"
$*|> VALUE: ((["investment"],0),[])

************** \ $*| has returned (["investment"],0)                                                            :5_4:GoDeeper:
************** / |>| calling $>>                                                                                :5_4:GoDeeper:
*************** / |>>/recurse                                                                                  :5_4:GoDeeper:
**************** / |>>/recurse                                                                                 :5_4:Is:
|>>/recurse> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

**************** / |>>/base                                                                                    :5_4:Is:
***************** > |>>/base got RPis                                                                          :5_5:GoDeeper:
|>>/base> IN: IS ( "savings" ( WHEN ( "dependents" ( I <…>
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

**************** \ |>>/base has returned (RPis,0)                                                               :5_5:GoDeeper:
|>>/recurse> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

*************** \ |>>/recurse has returned (RPis,1)                                                              :5_5:GoDeeper:
|>| calling $>>> IN: ( IS ( "savings" ( WHEN ( "dependents" ( <…>
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

************** \ |>| calling $>> has returned (RPis,1)                                                            :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "savi:
|>>/recurse> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected "savings"
|>>/recurse> expecting (

*************** / |>>/base                                                                                        :5_5:Other "savi:
**************** / slMultiTerm                                                                                   :5_5:Other "savi:
***************** / someSL                                                                                      :5_5:Other "savi:
****************** / pNumAsText                                                                                  :5_6:When:
pNumAsText> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected WHEN
pNumAsText> expecting number

someSL> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
someSL> MATCH (COK): "savings"
someSL> VALUE: ((["savings"],0),[])

***************** \ someSL has returned (["savings"],0)                                                          :5_6:GoDeeper:
slMultiTerm> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
slMultiTerm> MATCH (COK): "savings"
slMultiTerm> VALUE: ((["savings"],0),[])

**************** \ slMultiTerm has returned (["savings"],0)                                                       :5_6:GoDeeper:
**************** > |>>/base got ["savings"]                                                                       :5_6:GoDeeper:
|>>/base> IN: "savings" ( WHEN ( "dependents" ( IS ( 5 <…>
|>>/base> MATCH (COK): "savings"
|>>/base> VALUE: ((["savings"],0),[])

*************** \ |>>/base has returned (["savings"],0)                                                            :5_6:GoDeeper:
|>>/recurse> IN: ( "savings" ( WHEN ( "dependents" ( IS ( <…>
|>>/recurse> MATCH (COK): ( "savings"
|>>/recurse> VALUE: ((["savings"],1),[])

************** \ |>>/recurse has returned (["savings"],1)                                                           :5_6:GoDeeper:
RPConstraint> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
RPConstraint> MATCH (COK): "investment" ( IS ( "savings"
RPConstraint> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

************* \ RPConstraint has returned (RPConstraint ["investment"] RPis ["savings"],2)                           :5_6:GoDeeper:
slRelPred> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
slRelPred> MATCH (COK): "investment" ( IS ( "savings"
slRelPred> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

************ \ slRelPred has returned (RPConstraint ["investment"] RPis ["savings"],2)                                :5_6:GoDeeper:
$*|> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
$*|> MATCH (COK): "investment" ( IS ( "savings"
$*|> VALUE: ((RPConstraint ["investment"] RPis ["savings"],2),[])

*********** \ $*| has returned (RPConstraint ["investment"] RPis ["savings"],2)                                        :5_6:GoDeeper:
*********** / |>| calling $>>                                                                                          :5_6:GoDeeper:
************ / |>>/recurse                                                                                            :5_6:GoDeeper:
************* / |>>/recurse                                                                                           :5_6:When:
|>>/recurse> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected WHEN
|>>/recurse> expecting (

************* / |>>/base                                                                                              :5_6:When:
************** / optional whenCase -- but we should still consume GoDeepers before giving up                         :5_6:When:
*************** / whenCase                                                                                          :5_6:When:
**************** / whenMeansIf                                                                                     :5_6:When:
whenMeansIf> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
whenMeansIf> MATCH (COK): WHEN
whenMeansIf> VALUE: (When,[])

**************** \ whenMeansIf has returned When                                                                    :5_7:GoDeeper:
**************** / pBSR                                                                                             :5_7:GoDeeper:
***************** / ppp inner                                                                                      :5_7:GoDeeper:
****************** / expression                                                                                   :5_7:GoDeeper:
******************* / labelPrefix                                                                                :5_7:GoDeeper:
labelPrefix> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=46:
labelPrefix> unexpected (
labelPrefix> expecting Other text

******************* / term p                                                                                     :5_7:GoDeeper:
******************** / term p/notLabelTerm                                                                      :5_7:GoDeeper:
********************* / term p/2:someIndentation expr p                                                        :5_7:GoDeeper:
********************** / someIndentation                                                                      :5_7:GoDeeper:
*********************** / myindented: consuming GoDeeper                                                     :5_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                                :5_7:Other "depe:
*********************** / manyIndentation/leaf?                                                               :5_7:Other "depe:
************************ / expression                                                                        :5_7:Other "depe:
************************* / labelPrefix                                                                     :5_7:Other "depe:
labelPrefix> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
labelPrefix> MATCH (COK): "dependents"
labelPrefix> VALUE: ("dependents",[])

************************* \ labelPrefix has returned "dependents"                                            :5_8:GoDeeper:
************************* / term p                                                                           :5_8:GoDeeper:
************************** / term p/notLabelTerm                                                            :5_8:GoDeeper:
*************************** / term p/2:someIndentation expr p                                              :5_8:GoDeeper:
**************************** / someIndentation                                                            :5_8:GoDeeper:
***************************** / myindented: consuming GoDeeper                                           :5_8:GoDeeper:
myindented: consuming GoDeeper> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************************** \ myindented: consuming GoDeeper has returned GoDeeper                      :5_8:Is:
***************************** / manyIndentation/leaf?                                                     :5_8:Is:
****************************** / expression                                                              :5_8:Is:
******************************* / labelPrefix                                                           :5_8:Is:
labelPrefix> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=49:
labelPrefix> unexpected IS
labelPrefix> expecting Other text

******************************* / term p                                                                :5_8:Is:
******************************** / term p/notLabelTerm                                                 :5_8:Is:
********************************* / term p/2:someIndentation expr p                                   :5_8:Is:
********************************** / someIndentation                                                 :5_8:Is:
*********************************** / myindented: consuming GoDeeper                                :5_8:Is:
myindented: consuming GoDeeper> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=49:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (

********************************* / term p/3:plain p                                                  :5_8:Is:
********************************** / pRelPred                                                        :5_8:Is:
*********************************** / slRelPred                                                     :5_8:Is:
************************************ / nested simpleHorn                                           :5_8:Is:
************************************* > |^|                                                       :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

nested simpleHorn> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=49:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting other text or number

************************************ / RPConstraint                                                :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPConstraint> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=49:
RPConstraint> unexpected IS
RPConstraint> expecting other text or number

************************************ / RPBoolStructR                                               :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slMultiTerm                                             :5_8:Is:
*************************************** / someSL                                                :5_8:Is:
**************************************** / pNumAsText                                          :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPBoolStructR> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=49:
RPBoolStructR> unexpected IS
RPBoolStructR> expecting other text or number

************************************ / RPMT                                                        :5_8:Is:
************************************* / $*|                                                       :5_8:Is:
************************************** / slAKA                                                   :5_8:Is:
*************************************** / $*|                                                   :5_8:Is:
**************************************** / slAKA base                                          :5_8:Is:
***************************************** / slMultiTerm                                       :5_8:Is:
****************************************** / someSL                                          :5_8:Is:
******************************************* / pNumAsText                                    :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=49:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=49:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

slAKA base> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=49:
slAKA base> unexpected IS
slAKA base> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

slAKA> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=49:
slAKA> unexpected IS
slAKA> expecting other text or number

$*|> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting other text or number

RPMT> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=49:
RPMT> unexpected IS
RPMT> expecting other text or number

slRelPred> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=49:
slRelPred> unexpected IS
slRelPred> expecting other text or number

pRelPred> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=49:
pRelPred> unexpected IS
pRelPred> expecting other text or number

term p/3:plain p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=49:
term p/3:plain p> unexpected IS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or term

term p> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting ( or term

expression> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting expression

manyIndentation/leaf?> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=49:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting expression

***************************** / manyIndentation/deeper; calling someIndentation                           :5_8:Is:
****************************** / someIndentation                                                         :5_8:Is:
******************************* / myindented: consuming GoDeeper                                        :5_8:Is:
myindented: consuming GoDeeper> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=49:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=49:
manyIndentation/deeper; calling someIndentation> unexpected IS
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting ( or expression

*************************** / term p/3:plain p                                                             :5_8:GoDeeper:
**************************** / pRelPred                                                                   :5_8:GoDeeper:
***************************** / slRelPred                                                                :5_8:GoDeeper:
****************************** / nested simpleHorn                                                      :5_8:GoDeeper:
******************************* > |^|                                                                  :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=48:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

****************************** / RPConstraint                                                           :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=48:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

****************************** / RPBoolStructR                                                          :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slMultiTerm                                                        :5_8:GoDeeper:
********************************* / someSL                                                           :5_8:GoDeeper:
********************************** / pNumAsText                                                     :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=48:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

****************************** / RPMT                                                                   :5_8:GoDeeper:
******************************* / $*|                                                                  :5_8:GoDeeper:
******************************** / slAKA                                                              :5_8:GoDeeper:
********************************* / $*|                                                              :5_8:GoDeeper:
********************************** / slAKA base                                                     :5_8:GoDeeper:
*********************************** / slMultiTerm                                                  :5_8:GoDeeper:
************************************ / someSL                                                     :5_8:GoDeeper:
************************************* / pNumAsText                                               :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=48:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=48:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=48:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=48:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=48:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=48:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=48:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=48:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=48:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or expression

term p> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting ( or expression

expression> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expression> MATCH (CERR): "dependents"
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting (, NOT, or expression

manyIndentation/leaf?> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=49:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting (, NOT, or expression

*********************** / manyIndentation/deeper; calling someIndentation                                     :5_7:Other "depe:
************************ / someIndentation                                                                   :5_7:Other "depe:
************************* / myindented: consuming GoDeeper                                                  :5_7:Other "depe:
myindented: consuming GoDeeper> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=47:
myindented: consuming GoDeeper> unexpected "dependents"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=47:
someIndentation> unexpected "dependents"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=47:
manyIndentation/deeper; calling someIndentation> unexpected "dependents"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=49:
someIndentation> unexpected IS
someIndentation> expecting (, NOT, or expression

term p/2:someIndentation expr p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=49:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (, NOT, or expression

********************* / term p/3:plain p                                                                       :5_7:GoDeeper:
********************** / pRelPred                                                                             :5_7:GoDeeper:
*********************** / slRelPred                                                                          :5_7:GoDeeper:
************************ / nested simpleHorn                                                                :5_7:GoDeeper:
************************* > |^|                                                                            :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************ / RPConstraint                                                                     :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=46:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************ / RPBoolStructR                                                                    :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slMultiTerm                                                                  :5_7:GoDeeper:
*************************** / someSL                                                                     :5_7:GoDeeper:
**************************** / pNumAsText                                                               :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=46:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************ / RPMT                                                                             :5_7:GoDeeper:
************************* / $*|                                                                            :5_7:GoDeeper:
************************** / slAKA                                                                        :5_7:GoDeeper:
*************************** / $*|                                                                        :5_7:GoDeeper:
**************************** / slAKA base                                                               :5_7:GoDeeper:
***************************** / slMultiTerm                                                            :5_7:GoDeeper:
****************************** / someSL                                                               :5_7:GoDeeper:
******************************* / pNumAsText                                                         :5_7:GoDeeper:
pNumAsText> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=46:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=46:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=46:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=46:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=46:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=46:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=49:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting (, NOT, or expression

term p> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=49:
term p> unexpected IS
term p> expecting (, NOT, or expression

expression> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=49:
expression> unexpected IS
expression> expecting expression

ppp inner> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=49:
ppp inner> unexpected IS
ppp inner> expecting expression

***************** / withPrePost                                                                                    :5_7:GoDeeper:
****************** > |<* starting                                                                                 :5_7:GoDeeper:
****************** / $*|                                                                                          :5_7:GoDeeper:
******************* / pre part                                                                                   :5_7:GoDeeper:
******************** / aboveNextLineKeyword                                                                      :5_7:Other "depe:
********************* / expectUnDeepers                                                                         :5_7:Other "depe:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expectUnDeepers> MATCH (CERR): "dependents" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
aboveNextLineKeyword> MATCH (CERR): "dependents" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                             :5_7:Other "depe:
******************** / aboveNextLineKeyword                                                                       :5_8:GoDeeper:
********************* / expectUnDeepers                                                                          :5_8:GoDeeper:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                              :5_8:GoDeeper:
******************** / aboveNextLineKeyword                                                                        :5_8:Is:
********************* / expectUnDeepers                                                                           :5_8:Is:
********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                               :5_8:Is:
pre part> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=49:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=49:
withPrePost> unexpected IS
withPrePost> expecting (, ), Other text, or other text or number

***************** / withPreOnly                                                                                    :5_7:GoDeeper:
****************** / $*|                                                                                          :5_7:GoDeeper:
******************* / pre part                                                                                   :5_7:GoDeeper:
******************** / aboveNextLineKeyword                                                                      :5_7:Other "depe:
********************* / expectUnDeepers                                                                         :5_7:Other "depe:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
expectUnDeepers> MATCH (CERR): "dependents" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "dependents" ( IS ( 5 ) ) ) ) ) ) ) ) EX <…>
aboveNextLineKeyword> MATCH (CERR): "dependents" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                             :5_7:Other "depe:
******************** / aboveNextLineKeyword                                                                       :5_8:GoDeeper:
********************* / expectUnDeepers                                                                          :5_8:GoDeeper:
********************** / pNumAsText                                                                             :5_8:GoDeeper:
pNumAsText> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=48:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inv <…>
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                              :5_8:GoDeeper:
******************** / aboveNextLineKeyword                                                                        :5_8:Is:
********************* / expectUnDeepers                                                                           :5_8:Is:
********************** / pNumAsText                                                                              :5_8:Is:
pNumAsText> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=49:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=49:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( 5 ) ) ) ) ) ) ) ) EXPECT ( ( "inves <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=49:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                               :5_8:Is:
pre part> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=49:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=49:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=49:
withPreOnly> unexpected IS
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( "dependents" ( IS ( 5 ) ) ) ) ) ) ) )  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=49:
pBSR> unexpected IS
pBSR> expecting (, ), Other text, expression, or other text or number

**************** / Otherwise                                                                                       :5_6:When:
Otherwise> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=45:
Otherwise> unexpected WHEN
Otherwise> expecting OTHERWISE

whenCase> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=49:
whenCase> unexpected IS
whenCase> expecting (, ), Other text, expression, or other text or number

optional whenCase -- but we should still consume GoDeepers before giving up> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

************** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :5_6:When:
************** > |>>/base got Nothing                                                                                :5_6:When:
|>>/base> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                                     :5_6:When:
|>>/recurse> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************ \ |>>/recurse has returned (Nothing,1)                                                                    :5_6:When:
|>| calling $>>> IN: ( WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) <…>
|>| calling $>>> MATCH (COK): (
|>| calling $>>> VALUE: ((Nothing,1),[])

*********** \ |>| calling $>> has returned (Nothing,1)                                                                  :5_6:When:
*********** / undeepers                                                                                                 :5_6:When:
************ > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                  :5_6:When:
undeepers> IN: WHEN ( "dependents" ( IS ( 5 ) ) ) ) ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=45:
undeepers> unexpected WHEN
undeepers> expecting )

relPredSamelineWhen> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
relPredSamelineWhen> MATCH (CERR): "investment" ( IS ( "savings" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=45:
relPredSamelineWhen> unexpected WHEN
relPredSamelineWhen> expecting ( or )

manyIndentation/leaf?> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=45:
manyIndentation/leaf?> unexpected WHEN
manyIndentation/leaf?> expecting ( or )

********* / manyIndentation/deeper; calling someIndentation                                                         :5_3:Other "inve:
********** / someIndentation                                                                                       :5_3:Other "inve:
*********** / myindented: consuming GoDeeper                                                                      :5_3:Other "inve:
myindented: consuming GoDeeper> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=39:
myindented: consuming GoDeeper> unexpected "investment"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=39:
someIndentation> unexpected "investment"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "investment" ( IS ( "savings" ( WHEN ( " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=39:
manyIndentation/deeper; calling someIndentation> unexpected "investment"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected WHEN
someIndentation> expecting ( or )

manyIndentation/deeper; calling someIndentation> IN: ( "investment" ( IS ( "savings" ( WHEN ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=45:
manyIndentation/deeper; calling someIndentation> unexpected WHEN
manyIndentation/deeper; calling someIndentation> expecting ( or )

someIndentation> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected WHEN
someIndentation> expecting ( or )

manyIndentation/deeper; calling someIndentation> IN: ( ( "investment" ( IS ( "savings" ( WHEN <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=45:
manyIndentation/deeper; calling someIndentation> unexpected WHEN
manyIndentation/deeper; calling someIndentation> expecting ( or )

pExpect> IN: EXPECT ( ( "investment" ( IS ( "savings" <…>
pExpect> MATCH (CERR): EXPECT
pExpect> ERROR:
pExpect> offset=45:
pExpect> unexpected WHEN
pExpect> expecting ( or )

pScenarioRule> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pScenarioRule> MATCH (CERR): GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pScenarioRule> ERROR:
pScenarioRule> offset=45:
pScenarioRule> unexpected WHEN
pScenarioRule> expecting ( or )

*** / pHornlike                                                                                                       :2_1:Given:
**** / pSrcRef                                                                                                       :2_1:Given:
***** / pRuleLabel                                                                                                  :2_1:Given:
****** / $>|                                                                                                       :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

pSrcRef> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Given:
**** / pHornlike / permute                                                                                           :2_1:Given:
***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected GIVEN
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected GIVEN
Otherwise> expecting OTHERWISE

whenCase> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected GIVEN
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Given:
****** / preambleParamText:[Upon]                                                                                  :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected GIVEN
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected GIVEN
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Given:
****** / whenMeansIf                                                                                               :2_1:Given:
whenMeansIf> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected GIVEN
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Given:
Otherwise> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected GIVEN
Otherwise> expecting OTHERWISE

whenCase> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected GIVEN
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :2_1:Given:
****** / preambleParamText:[Given]                                                                                 :2_1:Given:
******* / $>|                                                                                                     :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (COK): GIVEN
$>|> VALUE: (Given,[])

******* \ $>| has returned Given                                                                                   :2_2:GoDeeper:
******* / |>| calling $>>                                                                                          :2_2:GoDeeper:
******** / |>>/recurse                                                                                            :2_2:GoDeeper:
********* / |>>/recurse                                                                                           :2_2:Other "amou:
|>>/recurse> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "amount saved"
|>>/recurse> expecting (

********* / |>>/base                                                                                              :2_2:Other "amou:
********** / pParamText                                                                                          :2_2:Other "amou:
*********** / pParamText(flat) first line: pKeyValues                                                           :2_2:Other "amou:
************ / pKeyValuesAka                                                                                   :2_2:Other "amou:
************* / slAKA                                                                                         :2_2:Other "amou:
************** / $*|                                                                                         :2_2:Other "amou:
*************** / slAKA base                                                                                :2_2:Other "amou:
**************** / slKeyValues                                                                             :2_2:Other "amou:
***************** / $*|                                                                                   :2_2:Other "amou:
****************** / someSL                                                                              :2_2:Other "amou:
******************* / pNumAsText                                                                            :2_4:Is:
pNumAsText> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
someSL> MATCH (COK): "amount saved"
someSL> VALUE: ((["amount saved"],0),[])

****************** \ someSL has returned (["amount saved"],0)                                             :2_3:GoDeeper:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved"
$*|> VALUE: ((["amount saved"],0),[])

***************** \ $*| has returned (["amount saved"],0)                                                  :2_3:GoDeeper:
***************** / |>>/recurse                                                                            :2_3:GoDeeper:
****************** / |>>/recurse                                                                            :2_4:GoDeeper:
******************* / |>>/recurse                                                                           :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******************* / |>>/base                                                                              :2_4:Is:
******************** / |?| optional something                                                              :2_4:Is:
********************* / |>>/recurse                                                                       :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

********************* / |>>/base                                                                          :2_4:Is:
********************** / slTypeSig                                                                       :2_4:Is:
*********************** / $>|                                                                           :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (COK): IS
$>|> VALUE: (Is,[])

*********************** \ $>| has returned Is                                                            :2_5:GoDeeper:
*********************** / |>>/recurse                                                                    :2_5:GoDeeper:
************************ / |>>/recurse                                                                   :2_5:TNumber 220:
|>>/recurse> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (

************************ / |>>/base                                                                      :2_5:TNumber 220:
************************* / $>|                                                                         :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************* / $*|                                                                         :2_5:TNumber 220:
************************** / $>|                                                                       :2_5:TNumber 220:
$>|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected 22000
$>|> expecting ONE OF

$*|> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected 22000
$*|> expecting ONE OF

|>>/base> IN: 22000 ) ) ) "earnings" ( "amount" ( IS ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/recurse> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 22000
|>>/recurse> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

*********************** / |>>/base                                                                       :2_5:GoDeeper:
************************ / $>|                                                                          :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting A, LIST0, LIST1, ONE, or OPTIONAL

************************ / $*|                                                                          :2_5:GoDeeper:
************************* / $>|                                                                        :2_5:GoDeeper:
$>|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected (
$>|> expecting ONE OF

$*|> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting ONE OF

|>>/base> IN: ( 22000 ) ) ) "earnings" ( "amount" ( IS <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

slTypeSig> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slTypeSig> MATCH (CERR): IS
slTypeSig> ERROR:
slTypeSig> offset=11:
slTypeSig> unexpected 22000
slTypeSig> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (CERR): IS
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected 22000
|>>/base> expecting (, A, LIST0, LIST1, ONE, ONE OF, or OPTIONAL

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                     :2_4:Is:
******************** > |>>/base got Nothing                                                                :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                     :2_4:Is:
|>>/recurse> IN: ( IS ( 22000 ) ) ) "earnings" ( "amount" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

****************** \ |>>/recurse has returned (Nothing,1)                                                    :2_4:Is:
|>>/recurse> IN: ( ( IS ( 22000 ) ) ) "earnings" ( "amoun <…>
|>>/recurse> MATCH (COK): ( (
|>>/recurse> VALUE: ((Nothing,2),[])

***************** \ |>>/recurse has returned (Nothing,2)                                                      :2_4:Is:
slKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slKeyValues> MATCH (COK): "amount saved" ( (
slKeyValues> VALUE: ((("amount saved" :| [],Nothing),2),[])

**************** \ slKeyValues has returned (("amount saved" :| [],Nothing),2)                                 :2_4:Is:
slAKA base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA base> MATCH (COK): "amount saved" ( (
slAKA base> VALUE: ((("amount saved" :| [],Nothing),2),[])

*************** \ slAKA base has returned (("amount saved" :| [],Nothing),2)                                    :2_4:Is:
$*|> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
$*|> MATCH (COK): "amount saved" ( (
$*|> VALUE: ((("amount saved" :| [],Nothing),2),[])

************** \ $*| has returned (("amount saved" :| [],Nothing),2)                                             :2_4:Is:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** / slAKA optional akapart                                                                        :2_4:Is:
**************** / |?| optional something                                                                      :2_4:Is:
***************** / |>>/recurse                                                                               :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

***************** / |>>/base                                                                                  :2_4:Is:
****************** / PAKA/akapart                                                                            :2_4:Is:
******************* / $>|                                                                                   :2_4:Is:
******************** / Aka Token                                                                           :2_4:Is:
Aka Token> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected IS
Aka Token> expecting AKA

$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting AKA

PAKA/akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected IS
PAKA/akapart> expecting AKA

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting AKA

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                             :2_4:Is:
slAKA optional akapart> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                               :2_4:Is:
*************** > |>>/base got Nothing                                                                          :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                               :2_4:Is:
************** / |>>/recurse                                                                                     :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

************** / |>>/base                                                                                        :2_4:Is:
*************** / slAKA optional typically                                                                      :2_4:Is:
**************** / |?| optional something                                                                      :2_4:Is:
***************** / |>>/recurse                                                                               :2_4:Is:
|>>/recurse> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

***************** / |>>/base                                                                                  :2_4:Is:
****************** / typically                                                                               :2_4:Is:
******************* / $>|                                                                                   :2_4:Is:
$>|> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected IS
$>|> expecting TYPICALLY

typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected IS
typically> expecting TYPICALLY

|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting TYPICALLY

|?| optional something> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                             :2_4:Is:
slAKA optional typically> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************** \ slAKA optional typically has returned (Nothing,0)                                             :2_4:Is:
*************** > |>>/base got Nothing                                                                          :2_4:Is:
|>>/base> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                               :2_4:Is:
************** > slAKA: proceeding after base and entityalias are retrieved ...                                  :2_4:Is:
************** > pAKA: entityalias = Nothing                                                                     :2_4:Is:
slAKA> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
slAKA> MATCH (COK): "amount saved" ( (
slAKA> VALUE: ((("amount saved" :| [],Nothing),2),[])

************* \ slAKA has returned (("amount saved" :| [],Nothing),2)                                             :2_4:Is:
************* / undeepers                                                                                         :2_4:Is:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                          :2_4:Is:
undeepers> IN: IS ( 22000 ) ) ) "earnings" ( "amount" ( <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=9:
undeepers> unexpected IS
undeepers> expecting )

pKeyValuesAka> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pKeyValuesAka> MATCH (CERR): "amount saved" ( (
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected IS
pKeyValuesAka> expecting (, ), AKA, or TYPICALLY

pParamText(flat) first line: pKeyValues> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText(flat) first line: pKeyValues> MATCH (CERR): "amount saved" ( (
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected IS
pParamText(flat) first line: pKeyValues> expecting (, ), AKA, or TYPICALLY

pParamText> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
pParamText> MATCH (CERR): "amount saved" ( (
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected IS
pParamText> expecting (, ), AKA, or TYPICALLY

|>>/base> IN: "amount saved" ( ( IS ( 22000 ) ) ) "ear <…>
|>>/base> MATCH (CERR): "amount saved" ( (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected IS
|>>/base> expecting (, ), AKA, or TYPICALLY

|>>/recurse> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/recurse> MATCH (CERR): ( "amount saved" ( (
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected IS
|>>/recurse> expecting (, ), AKA, or TYPICALLY

******** / |>>/base                                                                                               :2_2:GoDeeper:
********* / pParamText                                                                                           :2_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :2_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :2_2:GoDeeper:
************ / slAKA                                                                                          :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slAKA base                                                                                 :2_2:GoDeeper:
*************** / slKeyValues                                                                              :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=5:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=5:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=5:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=5:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=5:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=5:
pParamText> unexpected (
pParamText> expecting other text or number

|>>/base> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting other text or number

|>| calling $>>> IN: ( "amount saved" ( ( IS ( 22000 ) ) ) "e <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected IS
|>| calling $>>> expecting (, ), AKA, or TYPICALLY

preambleParamText:[Given]> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
preambleParamText:[Given]> MATCH (CERR): GIVEN
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=9:
preambleParamText:[Given]> unexpected IS
preambleParamText:[Given]> expecting (, ), AKA, or TYPICALLY

pHornlike/givenLimb> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike/givenLimb> MATCH (CERR): GIVEN
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=9:
pHornlike/givenLimb> unexpected IS
pHornlike/givenLimb> expecting (, ), AKA, or TYPICALLY

pHornlike / permute> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike / permute> MATCH (CERR): GIVEN
pHornlike / permute> ERROR:
pHornlike / permute> offset=9:
pHornlike / permute> unexpected IS
pHornlike / permute> expecting (, ), AKA, or TYPICALLY

pHornlike> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pHornlike> MATCH (CERR): GIVEN
pHornlike> ERROR:
pHornlike> offset=9:
pHornlike> unexpected IS
pHornlike> expecting (, ), AKA, or TYPICALLY

*** / pRuleLabel                                                                                                      :2_1:Given:
**** / $>|                                                                                                           :2_1:Given:
$>|> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected GIVEN
$>|> expecting §

pRuleLabel> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected GIVEN
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Given:
**** / myindented: consuming GoDeeper                                                                                :2_1:Given:
myindented: consuming GoDeeper> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected GIVEN
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected GIVEN
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: GIVEN ( "amount saved" ( ( IS ( 22000 )  <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=45:
pRule> unexpected WHEN
pRule> expecting (, ), or EOL


megaparsing scenarios
  scenario-1 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) megaparsing scenarios scenario-1
       expected: [[Scenario {scgiven = [RPConstraint ["amount saved"] RPis ["22000"],RPConstraint ["earnings","amount"] RPis ["25000"],RPConstraint ["earnings","steadiness"] RPis ["steady"]], expect = [HC2 {hHead = RPConstraint ["investment"] RPis ["savings"], hBody = Just (Leaf (RPConstraint ["dependents"] RPis ["5"]))},HC2 {hHead = RPConstraint ["investment"] RPis ["combination"], hBody = Just (Leaf (RPConstraint ["dependents"] RPis ["3"]))},HC2 {hHead = RPConstraint ["investment"] RPis ["stocks"], hBody = Just (Leaf (RPConstraint ["dependents"] RPis ["0"]))}], rlabel = Just ("\167",1,"Scenario 1"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected GIVEN
       expecting end of input
       §            Scenario 1                                                                                             
       ✳ GIVEN      amount saved              IS           22000                                                           
                    earnings     amount       IS           25000                                                           
                    earnings     steadiness   IS           steady                                                          
       EXPECT                    investment   IS           savings      WHEN         dependents   IS           5           
       EXPECT                    investment   IS           combination  WHEN         dependents   IS           3           
       EXPECT                    investment   IS           stocks       WHEN         dependents   IS           0           
       

  To rerun use: --match "/megaparsing scenarios/scenario-1/"

Randomized with seed 488262758

Finished in 0.0633 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

