* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/megaparsing/should parse a rule label/")

* Tokens
( § ( "Hello" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                              :1_2:GoDeeper:
*** / pRegRule                                                                                                         :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / undeepers                                                                                                      :1_2:GoDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                       :1_2:GoDeeper:
***** > sameLine: success!                                                                                           :1_2:GoDeeper:
undeepers> IN: ( § ( "Hello" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                      :1_2:GoDeeper:
**** / pRegRuleSugary                                                                                                 :1_2:GoDeeper:
***** / someDeep                                                                                                     :1_2:GoDeeper:
****** / someDeep first part calls base directly                                                                    :1_2:GoDeeper:
someDeep first part calls base directly> IN: ( § ( "Hello" ) )
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text             :1_2:GoDeeper:
someDeep> IN: ( § ( "Hello" ) )
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected (
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                              :1_2:GoDeeper:
pRegRuleSugary> IN: ( § ( "Hello" ) )
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected ( Expecting: Other text                                          :1_2:GoDeeper:
**** / pRegRuleNormal                                                                                                 :1_2:GoDeeper:
***** / permutationsReg                                                                                              :1_2:GoDeeper:
****** / regulative permutation with deontic-temporal                                                               :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( § ( "Hello" ) )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :1_2:GoDeeper:
preambleParamText:[Having]> IN: ( § ( "Hello" ) )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( § ( "Hello" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( § ( "Hello" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( § ( "Hello" ) )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( § ( "Hello" ) )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :1_2:GoDeeper:
******* / pDT                                                                                                      :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: MUST MAY SHANT                                         :1_2:GoDeeper:
pDT> IN: ( § ( "Hello" ) )
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected (
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected ( Expecting: MUST MAY SHANT                                           :1_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :1_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( § ( "Hello" ) )
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=0:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :1_2:GoDeeper:
******* / pDoAction/Do                                                                                             :1_2:GoDeeper:
pDoAction/Do> IN: ( § ( "Hello" ) )
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=0:
pDoAction/Do> unexpected (
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected ( Expecting: DO                                              :1_2:GoDeeper:
regulative permutation with deontic-temporal> IN: ( § ( "Hello" ) )
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=0:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN GIVEN HAVING UPON UNLESS DO WHERE :1_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                 :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( § ( "Hello" ) )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :1_2:GoDeeper:
preambleParamText:[Having]> IN: ( § ( "Hello" ) )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( § ( "Hello" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( § ( "Hello" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( § ( "Hello" ) )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( § ( "Hello" ) )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :1_2:GoDeeper:
******* / pTemporal/eventually                                                                                     :1_2:GoDeeper:
pTemporal/eventually> IN: ( § ( "Hello" ) )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected (
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected ( Expecting: EVENTUALLY                              :1_2:GoDeeper:
******* / pTemporal/specifically                                                                                   :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: BEFORE AFTER BY ON                                     :1_2:GoDeeper:
pTemporal/specifically> IN: ( § ( "Hello" ) )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected (
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected ( Expecting: BEFORE AFTER BY ON                    :1_2:GoDeeper:
******* / pTemporal/vaguely                                                                                        :1_2:GoDeeper:
pTemporal/vaguely> IN: ( § ( "Hello" ) )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected (
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected ( Expecting: Other text                                 :1_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :1_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( § ( "Hello" ) )
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=0:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :1_2:GoDeeper:
******* / pDA                                                                                                      :1_2:GoDeeper:
pDA> IN: ( § ( "Hello" ) )
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=0:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                           :1_2:GoDeeper:
regulative permutation with deontic-action> IN: ( § ( "Hello" ) )
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=0:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS WHERE Other text :1_2:GoDeeper:
permutationsReg> IN: ( § ( "Hello" ) )
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=0:
permutationsReg> unexpected (
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text :1_2:GoDeeper:
pRegRuleNormal> IN: ( § ( "Hello" ) )
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=0:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text :1_2:GoDeeper:
pRegRule> IN: ( § ( "Hello" ) )
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=0:
pRegRule> unexpected (
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS FULFILLED BREACH DO § WHERE Other text :1_2:GoDeeper:
*** / pTypeDefinition                                                                                                  :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / undeepers                                                                                                      :1_2:GoDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                       :1_2:GoDeeper:
***** > sameLine: success!                                                                                           :1_2:GoDeeper:
undeepers> IN: ( § ( "Hello" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                      :1_2:GoDeeper:
**** / pHornlike/uponLimb                                                                                             :1_2:GoDeeper:
***** / preambleParamText:[Upon]                                                                                     :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                       :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( § ( "Hello" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                    :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( § ( "Hello" ) )
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                            :1_2:GoDeeper:
**** / pHornlike/givenLimb                                                                                            :1_2:GoDeeper:
***** / preambleParamText:[Given]                                                                                    :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                      :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( § ( "Hello" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                  :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( § ( "Hello" ) )
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                          :1_2:GoDeeper:
pTypeDefinition> IN: ( § ( "Hello" ) )
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected (
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected ( Expecting: GIVEN UPON DEFINE §                                 :1_2:GoDeeper:
*** / pConstitutiveRule                                                                                                :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / undeepers                                                                                                      :1_2:GoDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                       :1_2:GoDeeper:
***** > sameLine: success!                                                                                           :1_2:GoDeeper:
undeepers> IN: ( § ( "Hello" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                      :1_2:GoDeeper:
**** / calling myindented pNameParens                                                                                 :1_2:GoDeeper:
***** / manyIndentation/leaf?                                                                                        :1_2:GoDeeper:
****** / pMultiTermAka                                                                                              :1_2:GoDeeper:
******* / pAKA                                                                                                     :1_2:GoDeeper:
******** / slAKA                                                                                                  :1_2:GoDeeper:
********* / $*|                                                                                                  :1_2:GoDeeper:
********** / slAKA base                                                                                         :1_2:GoDeeper:
*********** / slMultiTerm                                                                                      :1_2:GoDeeper:
************ / someSL                                                                                         :1_2:GoDeeper:
************* / pNumAsText                                                                                   :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                 :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                                 :1_2:GoDeeper:
pAKA> IN: ( § ( "Hello" ) )
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected (
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected ( Expecting: other text or number                                    :1_2:GoDeeper:
pMultiTermAka> IN: ( § ( "Hello" ) )
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected (
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
***** / manyIndentation/deeper; calling someIndentation                                                              :1_2:GoDeeper:
****** / someIndentation                                                                                            :1_2:GoDeeper:
******* / myindented: consuming GoDeeper                                                                           :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented: consuming GoDeeper has returned GoDeeper                                                      :1_2:RuleMarker:
******* / manyIndentation/leaf?                                                                                     :1_2:RuleMarker:
******** / pMultiTermAka                                                                                           :1_2:RuleMarker:
********* / pAKA                                                                                                  :1_2:RuleMarker:
********** / slAKA                                                                                               :1_2:RuleMarker:
*********** / $*|                                                                                               :1_2:RuleMarker:
************ / slAKA base                                                                                      :1_2:RuleMarker:
************* / slMultiTerm                                                                                   :1_2:RuleMarker:
************** / someSL                                                                                      :1_2:RuleMarker:
*************** / pNumAsText                                                                                :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                            :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

************ \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                             :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

********** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                             :1_2:RuleMarker:
pAKA> IN: § ( "Hello" ) )
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=1:
pAKA> unexpected §
pAKA> expecting other text or number

********* \ !Unconsumed Error: pAKA: Unexpected § Expecting: other text or number                                :1_2:RuleMarker:
pMultiTermAka> IN: § ( "Hello" ) )
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=1:
pMultiTermAka> unexpected §
pMultiTermAka> expecting other text or number

******** \ !Unconsumed Error: pMultiTermAka: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
******* / manyIndentation/deeper; calling someIndentation                                                           :1_2:RuleMarker:
******** / someIndentation                                                                                         :1_2:RuleMarker:
********* / myindented: consuming GoDeeper                                                                        :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********* \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                         :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                          :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (            :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

****** \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                           :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
calling myindented pNameParens> IN: ( § ( "Hello" ) )
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=1:
calling myindented pNameParens> unexpected §
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected § Expecting: ( other text or number             :1_2:GoDeeper:
pConstitutiveRule> IN: ( § ( "Hello" ) )
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=1:
pConstitutiveRule> unexpected §
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected § Expecting: § ( other text or number                         :1_2:GoDeeper:
*** / pScenarioRule                                                                                                    :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / undeepers                                                                                                      :1_2:GoDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                       :1_2:GoDeeper:
***** > sameLine: success!                                                                                           :1_2:GoDeeper:
undeepers> IN: ( § ( "Hello" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                      :1_2:GoDeeper:
**** / pExpect                                                                                                        :1_2:GoDeeper:
pExpect> IN: ( § ( "Hello" ) )
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=0:
pExpect> unexpected (
pExpect> expecting EXPECT

**** \ !Unconsumed Error: pExpect: Unexpected ( Expecting: EXPECT                                                     :1_2:GoDeeper:
pScenarioRule> IN: ( § ( "Hello" ) )
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected (
pScenarioRule> expecting EXPECT, GIVEN, or §

*** \ !Unconsumed Error: pScenarioRule: Unexpected ( Expecting: GIVEN § EXPECT                                        :1_2:GoDeeper:
*** / pHornlike                                                                                                        :1_2:GoDeeper:
**** / pSrcRef                                                                                                        :1_2:GoDeeper:
***** / pRuleLabel                                                                                                   :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                         :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                    :1_2:GoDeeper:
pSrcRef> IN: ( § ( "Hello" ) )
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: (((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})),0),[])

**** \ pSrcRef has returned ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})),0) :1_2:GoDeeper:
**** / undeepers                                                                                                      :1_2:GoDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                       :1_2:GoDeeper:
***** > sameLine: success!                                                                                           :1_2:GoDeeper:
undeepers> IN: ( § ( "Hello" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                      :1_2:GoDeeper:
**** / pHornlike / permute                                                                                            :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( § ( "Hello" ) )
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( § ( "Hello" ) )
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( § ( "Hello" ) )
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: IF WHEN MEANS OTHERWISE                                 :1_2:GoDeeper:
***** / pHornlike/uponLimb                                                                                           :1_2:GoDeeper:
****** / preambleParamText:[Upon]                                                                                   :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                     :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( § ( "Hello" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                  :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( § ( "Hello" ) )
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                          :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( § ( "Hello" ) )
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( § ( "Hello" ) )
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( § ( "Hello" ) )
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: IF WHEN MEANS OTHERWISE                                 :1_2:GoDeeper:
***** / pHornlike/givenLimb                                                                                          :1_2:GoDeeper:
****** / preambleParamText:[Given]                                                                                  :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                    :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( § ( "Hello" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( § ( "Hello" ) )
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                        :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( § ( "Hello" ) )
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( § ( "Hello" ) )
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( § ( "Hello" ) )
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: IF WHEN MEANS OTHERWISE                                 :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( § ( "Hello" ) )
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:RuleMarker:
******** / manyIndentation/leaf?                                                                                   :1_2:RuleMarker:
********* / relPredNextlineWhen                                                                                   :1_2:RuleMarker:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:RuleMarker:
*********** / optIndentedTuple                                                                                  :1_2:RuleMarker:
************ / optIndented                                                                                     :1_2:RuleMarker:
************* / pRelPred                                                                                      :1_2:RuleMarker:
************** / slRelPred                                                                                   :1_2:RuleMarker:
*************** / nested simpleHorn                                                                         :1_2:RuleMarker:
**************** > |^|                                                                                     :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number       :1_2:RuleMarker:
*************** / RPConstraint                                                                              :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
*************** / RPBoolStructR                                                                             :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number           :1_2:RuleMarker:
*************** / RPMT                                                                                      :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slAKA                                                                                 :1_2:RuleMarker:
****************** / $*|                                                                                 :1_2:RuleMarker:
******************* / slAKA base                                                                        :1_2:RuleMarker:
******************** / slMultiTerm                                                                     :1_2:RuleMarker:
********************* / someSL                                                                        :1_2:RuleMarker:
********************** / pNumAsText                                                                  :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number              :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number   :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
pRelPred> IN: § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected §
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
optIndented> IN: § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected §
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
optIndentedTuple> IN: § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected §
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected § Expecting: other text or number                :1_2:RuleMarker:
pRelPred optIndentedTuple whenCase> IN: § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected §
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected § Expecting: other text or number :1_2:RuleMarker:
relPredNextlineWhen> IN: § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected §
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
********* / relPredSamelineWhen                                                                                   :1_2:RuleMarker:
********** / $*|                                                                                                 :1_2:RuleMarker:
*********** / slRelPred                                                                                         :1_2:RuleMarker:
************ / nested simpleHorn                                                                               :1_2:RuleMarker:
************* > |^|                                                                                           :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number             :1_2:RuleMarker:
************ / RPConstraint                                                                                    :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
************ / RPBoolStructR                                                                                   :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
************ / RPMT                                                                                            :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slAKA                                                                                       :1_2:RuleMarker:
*************** / $*|                                                                                       :1_2:RuleMarker:
**************** / slAKA base                                                                              :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                          :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                       :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                               :1_2:RuleMarker:
relPredSamelineWhen> IN: § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected §
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:RuleMarker:
********* / someIndentation                                                                                       :1_2:RuleMarker:
********** / myindented: consuming GoDeeper                                                                      :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                       :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                        :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (          :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                         :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( § ( "Hello" ) )
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected §
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected § Expecting: DEFINE DECIDE ( other text or number    :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( § ( "Hello" ) )
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:RuleMarker:
******** / manyIndentation/leaf?                                                                                   :1_2:RuleMarker:
********* / relPredNextlineWhen                                                                                   :1_2:RuleMarker:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:RuleMarker:
*********** / optIndentedTuple                                                                                  :1_2:RuleMarker:
************ / optIndented                                                                                     :1_2:RuleMarker:
************* / pRelPred                                                                                      :1_2:RuleMarker:
************** / slRelPred                                                                                   :1_2:RuleMarker:
*************** / nested simpleHorn                                                                         :1_2:RuleMarker:
**************** > |^|                                                                                     :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number       :1_2:RuleMarker:
*************** / RPConstraint                                                                              :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
*************** / RPBoolStructR                                                                             :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number           :1_2:RuleMarker:
*************** / RPMT                                                                                      :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slAKA                                                                                 :1_2:RuleMarker:
****************** / $*|                                                                                 :1_2:RuleMarker:
******************* / slAKA base                                                                        :1_2:RuleMarker:
******************** / slMultiTerm                                                                     :1_2:RuleMarker:
********************* / someSL                                                                        :1_2:RuleMarker:
********************** / pNumAsText                                                                  :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number              :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number   :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
pRelPred> IN: § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected §
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
optIndented> IN: § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected §
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
optIndentedTuple> IN: § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected §
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected § Expecting: other text or number                :1_2:RuleMarker:
pRelPred optIndentedTuple whenCase> IN: § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected §
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected § Expecting: other text or number :1_2:RuleMarker:
relPredNextlineWhen> IN: § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected §
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
********* / relPredSamelineWhen                                                                                   :1_2:RuleMarker:
********** / $*|                                                                                                 :1_2:RuleMarker:
*********** / slRelPred                                                                                         :1_2:RuleMarker:
************ / nested simpleHorn                                                                               :1_2:RuleMarker:
************* > |^|                                                                                           :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number             :1_2:RuleMarker:
************ / RPConstraint                                                                                    :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
************ / RPBoolStructR                                                                                   :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
************ / RPMT                                                                                            :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slAKA                                                                                       :1_2:RuleMarker:
*************** / $*|                                                                                       :1_2:RuleMarker:
**************** / slAKA base                                                                              :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                          :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                       :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                               :1_2:RuleMarker:
relPredSamelineWhen> IN: § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected §
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:RuleMarker:
********* / someIndentation                                                                                       :1_2:RuleMarker:
********** / myindented: consuming GoDeeper                                                                      :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                       :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                        :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (          :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                         :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( § ( "Hello" ) )
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected §
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected § Expecting: DEFINE DECIDE ( other text or number    :1_2:GoDeeper:
***** / pHornlike/givenLimb                                                                                          :1_2:GoDeeper:
****** / preambleParamText:[Given]                                                                                  :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                    :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( § ( "Hello" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( § ( "Hello" ) )
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                        :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( § ( "Hello" ) )
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( § ( "Hello" ) )
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( § ( "Hello" ) )
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: IF WHEN MEANS OTHERWISE                                 :1_2:GoDeeper:
***** / pHornlike/uponLimb                                                                                           :1_2:GoDeeper:
****** / preambleParamText:[Upon]                                                                                   :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                     :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( § ( "Hello" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                  :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( § ( "Hello" ) )
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                          :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( § ( "Hello" ) )
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( § ( "Hello" ) )
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( § ( "Hello" ) )
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: IF WHEN MEANS OTHERWISE                                 :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( § ( "Hello" ) )
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:RuleMarker:
******** / manyIndentation/leaf?                                                                                   :1_2:RuleMarker:
********* / relPredNextlineWhen                                                                                   :1_2:RuleMarker:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:RuleMarker:
*********** / optIndentedTuple                                                                                  :1_2:RuleMarker:
************ / optIndented                                                                                     :1_2:RuleMarker:
************* / pRelPred                                                                                      :1_2:RuleMarker:
************** / slRelPred                                                                                   :1_2:RuleMarker:
*************** / nested simpleHorn                                                                         :1_2:RuleMarker:
**************** > |^|                                                                                     :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number       :1_2:RuleMarker:
*************** / RPConstraint                                                                              :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
*************** / RPBoolStructR                                                                             :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number           :1_2:RuleMarker:
*************** / RPMT                                                                                      :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slAKA                                                                                 :1_2:RuleMarker:
****************** / $*|                                                                                 :1_2:RuleMarker:
******************* / slAKA base                                                                        :1_2:RuleMarker:
******************** / slMultiTerm                                                                     :1_2:RuleMarker:
********************* / someSL                                                                        :1_2:RuleMarker:
********************** / pNumAsText                                                                  :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number              :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number   :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
pRelPred> IN: § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected §
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
optIndented> IN: § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected §
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
optIndentedTuple> IN: § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected §
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected § Expecting: other text or number                :1_2:RuleMarker:
pRelPred optIndentedTuple whenCase> IN: § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected §
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected § Expecting: other text or number :1_2:RuleMarker:
relPredNextlineWhen> IN: § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected §
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
********* / relPredSamelineWhen                                                                                   :1_2:RuleMarker:
********** / $*|                                                                                                 :1_2:RuleMarker:
*********** / slRelPred                                                                                         :1_2:RuleMarker:
************ / nested simpleHorn                                                                               :1_2:RuleMarker:
************* > |^|                                                                                           :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number             :1_2:RuleMarker:
************ / RPConstraint                                                                                    :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
************ / RPBoolStructR                                                                                   :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
************ / RPMT                                                                                            :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slAKA                                                                                       :1_2:RuleMarker:
*************** / $*|                                                                                       :1_2:RuleMarker:
**************** / slAKA base                                                                              :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                          :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                       :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                               :1_2:RuleMarker:
relPredSamelineWhen> IN: § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected §
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:RuleMarker:
********* / someIndentation                                                                                       :1_2:RuleMarker:
********** / myindented: consuming GoDeeper                                                                      :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                       :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                        :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (          :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                         :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( § ( "Hello" ) )
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected §
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected § Expecting: DEFINE DECIDE ( other text or number    :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( § ( "Hello" ) )
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:RuleMarker:
******** / manyIndentation/leaf?                                                                                   :1_2:RuleMarker:
********* / relPredNextlineWhen                                                                                   :1_2:RuleMarker:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:RuleMarker:
*********** / optIndentedTuple                                                                                  :1_2:RuleMarker:
************ / optIndented                                                                                     :1_2:RuleMarker:
************* / pRelPred                                                                                      :1_2:RuleMarker:
************** / slRelPred                                                                                   :1_2:RuleMarker:
*************** / nested simpleHorn                                                                         :1_2:RuleMarker:
**************** > |^|                                                                                     :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number       :1_2:RuleMarker:
*************** / RPConstraint                                                                              :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
*************** / RPBoolStructR                                                                             :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number           :1_2:RuleMarker:
*************** / RPMT                                                                                      :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slAKA                                                                                 :1_2:RuleMarker:
****************** / $*|                                                                                 :1_2:RuleMarker:
******************* / slAKA base                                                                        :1_2:RuleMarker:
******************** / slMultiTerm                                                                     :1_2:RuleMarker:
********************* / someSL                                                                        :1_2:RuleMarker:
********************** / pNumAsText                                                                  :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number              :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number   :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
pRelPred> IN: § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected §
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
optIndented> IN: § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected §
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
optIndentedTuple> IN: § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected §
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected § Expecting: other text or number                :1_2:RuleMarker:
pRelPred optIndentedTuple whenCase> IN: § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected §
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected § Expecting: other text or number :1_2:RuleMarker:
relPredNextlineWhen> IN: § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected §
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
********* / relPredSamelineWhen                                                                                   :1_2:RuleMarker:
********** / $*|                                                                                                 :1_2:RuleMarker:
*********** / slRelPred                                                                                         :1_2:RuleMarker:
************ / nested simpleHorn                                                                               :1_2:RuleMarker:
************* > |^|                                                                                           :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number             :1_2:RuleMarker:
************ / RPConstraint                                                                                    :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
************ / RPBoolStructR                                                                                   :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
************ / RPMT                                                                                            :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slAKA                                                                                       :1_2:RuleMarker:
*************** / $*|                                                                                       :1_2:RuleMarker:
**************** / slAKA base                                                                              :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                          :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                       :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                               :1_2:RuleMarker:
relPredSamelineWhen> IN: § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected §
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:RuleMarker:
********* / someIndentation                                                                                       :1_2:RuleMarker:
********** / myindented: consuming GoDeeper                                                                      :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                       :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                        :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (          :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                         :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( § ( "Hello" ) )
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected §
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected § Expecting: DEFINE DECIDE ( other text or number    :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( § ( "Hello" ) )
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:RuleMarker:
******** / manyIndentation/leaf?                                                                                   :1_2:RuleMarker:
********* / relPredNextlineWhen                                                                                   :1_2:RuleMarker:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:RuleMarker:
*********** / optIndentedTuple                                                                                  :1_2:RuleMarker:
************ / optIndented                                                                                     :1_2:RuleMarker:
************* / pRelPred                                                                                      :1_2:RuleMarker:
************** / slRelPred                                                                                   :1_2:RuleMarker:
*************** / nested simpleHorn                                                                         :1_2:RuleMarker:
**************** > |^|                                                                                     :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number       :1_2:RuleMarker:
*************** / RPConstraint                                                                              :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
*************** / RPBoolStructR                                                                             :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number           :1_2:RuleMarker:
*************** / RPMT                                                                                      :1_2:RuleMarker:
**************** / $*|                                                                                     :1_2:RuleMarker:
***************** / slAKA                                                                                 :1_2:RuleMarker:
****************** / $*|                                                                                 :1_2:RuleMarker:
******************* / slAKA base                                                                        :1_2:RuleMarker:
******************** / slMultiTerm                                                                     :1_2:RuleMarker:
********************* / someSL                                                                        :1_2:RuleMarker:
********************** / pNumAsText                                                                  :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number              :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number   :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number      :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
pRelPred> IN: § ( "Hello" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected §
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected § Expecting: other text or number                    :1_2:RuleMarker:
optIndented> IN: § ( "Hello" ) )
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected §
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected § Expecting: other text or number                   :1_2:RuleMarker:
optIndentedTuple> IN: § ( "Hello" ) )
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected §
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected § Expecting: other text or number                :1_2:RuleMarker:
pRelPred optIndentedTuple whenCase> IN: § ( "Hello" ) )
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected §
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected § Expecting: other text or number :1_2:RuleMarker:
relPredNextlineWhen> IN: § ( "Hello" ) )
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected §
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
********* / relPredSamelineWhen                                                                                   :1_2:RuleMarker:
********** / $*|                                                                                                 :1_2:RuleMarker:
*********** / slRelPred                                                                                         :1_2:RuleMarker:
************ / nested simpleHorn                                                                               :1_2:RuleMarker:
************* > |^|                                                                                           :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
nested simpleHorn> IN: § ( "Hello" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected §
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected § Expecting: other text or number             :1_2:RuleMarker:
************ / RPConstraint                                                                                    :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPConstraint> IN: § ( "Hello" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected §
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
************ / RPBoolStructR                                                                                   :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slMultiTerm                                                                                 :1_2:RuleMarker:
*************** / someSL                                                                                    :1_2:RuleMarker:
**************** / pNumAsText                                                                              :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                          :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number                  :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number               :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPBoolStructR> IN: § ( "Hello" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected §
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
************ / RPMT                                                                                            :1_2:RuleMarker:
************* / $*|                                                                                           :1_2:RuleMarker:
************** / slAKA                                                                                       :1_2:RuleMarker:
*************** / $*|                                                                                       :1_2:RuleMarker:
**************** / slAKA base                                                                              :1_2:RuleMarker:
***************** / slMultiTerm                                                                           :1_2:RuleMarker:
****************** / someSL                                                                              :1_2:RuleMarker:
******************* / pNumAsText                                                                        :1_2:RuleMarker:
pNumAsText> IN: § ( "Hello" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected §
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected § Expecting: number                    :1_2:RuleMarker:
someSL> IN: § ( "Hello" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected §
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
slMultiTerm> IN: § ( "Hello" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected §
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected § Expecting: other text or number         :1_2:RuleMarker:
slAKA base> IN: § ( "Hello" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected §
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected § Expecting: other text or number            :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
slAKA> IN: § ( "Hello" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected §
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected § Expecting: other text or number                     :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                         :1_2:RuleMarker:
RPMT> IN: § ( "Hello" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected §
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected § Expecting: other text or number                          :1_2:RuleMarker:
slRelPred> IN: § ( "Hello" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected §
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected § Expecting: other text or number                       :1_2:RuleMarker:
$*|> IN: § ( "Hello" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected §
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected § Expecting: other text or number                               :1_2:RuleMarker:
relPredSamelineWhen> IN: § ( "Hello" ) )
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected §
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
manyIndentation/leaf?> IN: § ( "Hello" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected §
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected § Expecting: other text or number                 :1_2:RuleMarker:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:RuleMarker:
********* / someIndentation                                                                                       :1_2:RuleMarker:
********** / myindented: consuming GoDeeper                                                                      :1_2:RuleMarker:
myindented: consuming GoDeeper> IN: § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected §
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected § Expecting: (                       :1_2:RuleMarker:
someIndentation> IN: § ( "Hello" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected § Expecting: (                                        :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: (          :1_2:RuleMarker:
someIndentation> IN: ( § ( "Hello" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected §
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected § Expecting: ( other text or number                         :1_2:RuleMarker:
manyIndentation/deeper; calling someIndentation> IN: ( § ( "Hello" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected §
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected § Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( § ( "Hello" ) )
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected §
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected § Expecting: DEFINE DECIDE ( other text or number    :1_2:GoDeeper:
pHornlike / permute> IN: ( § ( "Hello" ) )
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=1:
pHornlike / permute> unexpected §
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, UPON, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected § Expecting: GIVEN UPON DEFINE DECIDE ( other text or number :1_2:GoDeeper:
pHornlike> IN: ( § ( "Hello" ) )
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=1:
pHornlike> unexpected §
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, UPON, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected § Expecting: GIVEN UPON DEFINE DECIDE § ( other text or number        :1_2:GoDeeper:
*** / pRuleLabel                                                                                                       :1_2:GoDeeper:
**** / $>|                                                                                                            :1_2:GoDeeper:
$>|> IN: ( § ( "Hello" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                             :1_2:GoDeeper:
pRuleLabel> IN: ( § ( "Hello" ) )
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                        :1_2:GoDeeper:
*** / pRule: unwrapping indentation and recursing                                                                      :1_2:GoDeeper:
**** / myindented: consuming GoDeeper                                                                                 :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( § ( "Hello" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**** \ myindented: consuming GoDeeper has returned GoDeeper                                                            :1_2:RuleMarker:
**** / pRule                                                                                                           :1_2:RuleMarker:
***** / pRegRule                                                                                                      :1_2:RuleMarker:
****** / pRuleLabel                                                                                                  :1_2:RuleMarker:
******* / $>|                                                                                                       :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

******* \ $>| has returned RuleMarker 1 "\167"                                                                       :1_3:GoDeeper:
******* / |>| calling $>>                                                                                            :1_3:GoDeeper:
******** / |>>/recurse                                                                                              :1_3:GoDeeper:
********* / |>>/recurse                                                                                             :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                         :1_3:Other "Hell:
********* / |>>/base                                                                                                :1_3:Other "Hell:
********** > |>>/base got "Hello"                                                                                 :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

********* \ |>>/base has returned ("Hello",0)                                                                      :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

******** \ |>>/recurse has returned ("Hello",1)                                                                     :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

******* \ |>| calling $>> has returned ("Hello",1)                                                                   :1_2:UnDeeper:
******* / someUndeepers                                                                                              :1_2:UnDeeper:
******** / manyUndeepers                                                                                              :1_3:UnDeeper:
********* / manyUndeepers                                                                                     :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

********* \ manyUndeepers has returned ((),0)                                                                 :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

******** \ manyUndeepers has returned ((),-1)                                                                  :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

******* \ someUndeepers has returned ((),-2)                                                                    :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

****** \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                         :EOF:
****** / undeepers                                                                                               :EOF:
******* > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                               :EOF:
******* > sameLine: success!                                                                                    :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                               :EOF:
****** / pRegRuleSugary                                                                                          :EOF:
******* / someDeep                                                                                              :EOF:
******** / someDeep first part calls base directly                                                             :EOF:
someDeep first part calls base directly> IN: <EMPTY>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=6:
someDeep first part calls base directly> unexpected end of input
someDeep first part calls base directly> expecting Other text

******** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected end of input Expecting: Other text :EOF:
someDeep> IN: <EMPTY>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=6:
someDeep> unexpected end of input
someDeep> expecting Other text or any token

******* \ !Unconsumed Error: someDeep: Unexpected end of input Expecting: Other text any token                  :EOF:
pRegRuleSugary> IN: <EMPTY>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=6:
pRegRuleSugary> unexpected end of input
pRegRuleSugary> expecting Other text or any token

****** \ !Unconsumed Error: pRegRuleSugary: Unexpected end of input Expecting: Other text any token              :EOF:
****** / pRegRuleNormal                                                                                          :EOF:
******* / permutationsReg                                                                                       :EOF:
******** / regulative permutation with deontic-temporal                                                        :EOF:
********* / WHERE                                                                                             :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected end of input
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                :EOF:
********* / preambleParamText:[Having]                                                                        :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                               :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token :EOF:
********* / preambleParamText:[Given]                                                                         :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token  :EOF:
********* / preambleParamText:[Upon]                                                                          :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                 :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token    :EOF:
********* / preambleBoolStructR [Unless]                                                                      :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS        :EOF:
********* / preambleBoolStructR [When,If]                                                                     :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN      :EOF:
********* / pDT                                                                                               :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting MAY, MUST, or SHANT

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: MUST MAY SHANT                       :EOF:
pDT> IN: <EMPTY>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=6:
pDT> unexpected end of input
pDT> expecting MAY, MUST, SHANT, or any token

********* \ !Unconsumed Error: pDT: Unexpected end of input Expecting: MUST MAY SHANT any token               :EOF:
********* / pActor [REvery,RParty,RTokAll]                                                                    :EOF:
pActor [REvery,RParty,RTokAll]> IN: <EMPTY>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=6:
pActor [REvery,RParty,RTokAll]> unexpected end of input
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

********* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected end of input Expecting: EVERY PARTY ALL :EOF:
********* / pDoAction/Do                                                                                      :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=6:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

********* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                            :EOF:
regulative permutation with deontic-temporal> IN: <EMPTY>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=6:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or any token

******** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN GIVEN HAVING UPON UNLESS DO WHERE any token :EOF:
******** / regulative permutation with deontic-action                                                          :EOF:
********* / WHERE                                                                                             :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected end of input
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                :EOF:
********* / preambleParamText:[Having]                                                                        :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                               :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token :EOF:
********* / preambleParamText:[Given]                                                                         :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token  :EOF:
********* / preambleParamText:[Upon]                                                                          :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                 :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token    :EOF:
********* / preambleBoolStructR [Unless]                                                                      :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS        :EOF:
********* / preambleBoolStructR [When,If]                                                                     :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN      :EOF:
********* / pTemporal/eventually                                                                              :EOF:
pTemporal/eventually> IN: <EMPTY>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=6:
pTemporal/eventually> unexpected end of input
pTemporal/eventually> expecting EVENTUALLY

********* \ !Unconsumed Error: pTemporal/eventually: Unexpected end of input Expecting: EVENTUALLY            :EOF:
********* / pTemporal/specifically                                                                            :EOF:
********** / $>|                                                                                             :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting AFTER, BEFORE, BY, or ON

********** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: BEFORE AFTER BY ON                   :EOF:
pTemporal/specifically> IN: <EMPTY>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=6:
pTemporal/specifically> unexpected end of input
pTemporal/specifically> expecting AFTER, BEFORE, BY, ON, or any token

********* \ !Unconsumed Error: pTemporal/specifically: Unexpected end of input Expecting: BEFORE AFTER BY ON any token :EOF:
********* / pTemporal/vaguely                                                                                 :EOF:
pTemporal/vaguely> IN: <EMPTY>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=6:
pTemporal/vaguely> unexpected end of input
pTemporal/vaguely> expecting Other text

********* \ !Unconsumed Error: pTemporal/vaguely: Unexpected end of input Expecting: Other text               :EOF:
********* / pActor [REvery,RParty,RTokAll]                                                                    :EOF:
pActor [REvery,RParty,RTokAll]> IN: <EMPTY>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=6:
pActor [REvery,RParty,RTokAll]> unexpected end of input
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

********* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected end of input Expecting: EVERY PARTY ALL :EOF:
********* / pDA                                                                                               :EOF:
pDA> IN: <EMPTY>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=6:
pDA> unexpected end of input
pDA> expecting MAY, MUST, or SHANT

********* \ !Unconsumed Error: pDA: Unexpected end of input Expecting: MUST MAY SHANT                         :EOF:
regulative permutation with deontic-action> IN: <EMPTY>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=6:
regulative permutation with deontic-action> unexpected end of input
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or any token

******** \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected end of input Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS WHERE Other text any token :EOF:
permutationsReg> IN: <EMPTY>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=6:
permutationsReg> unexpected end of input
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or any token

******* \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text any token :EOF:
pRegRuleNormal> IN: <EMPTY>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=6:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS DO WHERE Other text any token :EOF:
pRegRule> IN: § ( "Hello" ) )
pRegRule> MATCH (EERR): § ( "Hello" ) )
pRegRule> ERROR:
pRegRule> offset=6:
pRegRule> unexpected end of input
pRegRule> expecting ), AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: EVERY PARTY ALL MUST MAY SHANT IF WHEN BEFORE AFTER BY ON EVENTUALLY GIVEN HAVING UPON UNLESS FULFILLED BREACH DO ) WHERE Other text any token :EOF:
***** / pTypeDefinition                                                                                               :1_2:RuleMarker:
****** / pRuleLabel                                                                                                  :1_2:RuleMarker:
******* / $>|                                                                                                       :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

******* \ $>| has returned RuleMarker 1 "\167"                                                                       :1_3:GoDeeper:
******* / |>| calling $>>                                                                                            :1_3:GoDeeper:
******** / |>>/recurse                                                                                              :1_3:GoDeeper:
********* / |>>/recurse                                                                                             :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                         :1_3:Other "Hell:
********* / |>>/base                                                                                                :1_3:Other "Hell:
********** > |>>/base got "Hello"                                                                                 :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

********* \ |>>/base has returned ("Hello",0)                                                                      :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

******** \ |>>/recurse has returned ("Hello",1)                                                                     :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

******* \ |>| calling $>> has returned ("Hello",1)                                                                   :1_2:UnDeeper:
******* / someUndeepers                                                                                              :1_2:UnDeeper:
******** / manyUndeepers                                                                                              :1_3:UnDeeper:
********* / manyUndeepers                                                                                     :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

********* \ manyUndeepers has returned ((),0)                                                                 :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

******** \ manyUndeepers has returned ((),-1)                                                                  :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

******* \ someUndeepers has returned ((),-2)                                                                    :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

****** \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                         :EOF:
****** / undeepers                                                                                               :EOF:
******* > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                               :EOF:
******* > sameLine: success!                                                                                    :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                               :EOF:
****** / pHornlike/uponLimb                                                                                      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
pHornlike/uponLimb> IN: <EMPTY>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=6:
pHornlike/uponLimb> unexpected end of input
pHornlike/uponLimb> expecting UPON or any token

****** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected end of input Expecting: UPON any token                :EOF:
****** / pHornlike/givenLimb                                                                                     :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
pHornlike/givenLimb> IN: <EMPTY>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=6:
pHornlike/givenLimb> unexpected end of input
pHornlike/givenLimb> expecting GIVEN or any token

****** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected end of input Expecting: GIVEN any token              :EOF:
pTypeDefinition> IN: § ( "Hello" ) )
pTypeDefinition> MATCH (EERR): § ( "Hello" ) )
pTypeDefinition> ERROR:
pTypeDefinition> offset=6:
pTypeDefinition> unexpected end of input
pTypeDefinition> expecting ), DEFINE, GIVEN, UPON, or any token

***** \ !Unconsumed Error: pTypeDefinition: Unexpected end of input Expecting: GIVEN UPON DEFINE ) any token      :EOF:
***** / pConstitutiveRule                                                                                             :1_2:RuleMarker:
****** / pRuleLabel                                                                                                  :1_2:RuleMarker:
******* / $>|                                                                                                       :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

******* \ $>| has returned RuleMarker 1 "\167"                                                                       :1_3:GoDeeper:
******* / |>| calling $>>                                                                                            :1_3:GoDeeper:
******** / |>>/recurse                                                                                              :1_3:GoDeeper:
********* / |>>/recurse                                                                                             :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                         :1_3:Other "Hell:
********* / |>>/base                                                                                                :1_3:Other "Hell:
********** > |>>/base got "Hello"                                                                                 :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

********* \ |>>/base has returned ("Hello",0)                                                                      :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

******** \ |>>/recurse has returned ("Hello",1)                                                                     :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

******* \ |>| calling $>> has returned ("Hello",1)                                                                   :1_2:UnDeeper:
******* / someUndeepers                                                                                              :1_2:UnDeeper:
******** / manyUndeepers                                                                                              :1_3:UnDeeper:
********* / manyUndeepers                                                                                     :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

********* \ manyUndeepers has returned ((),0)                                                                 :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

******** \ manyUndeepers has returned ((),-1)                                                                  :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

******* \ someUndeepers has returned ((),-2)                                                                    :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

****** \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                         :EOF:
****** / undeepers                                                                                               :EOF:
******* > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                               :EOF:
******* > sameLine: success!                                                                                    :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                               :EOF:
****** / calling myindented pNameParens                                                                          :EOF:
******* / manyIndentation/leaf?                                                                                 :EOF:
******** / pMultiTermAka                                                                                       :EOF:
********* / pAKA                                                                                              :EOF:
********** / slAKA                                                                                           :EOF:
*********** / $*|                                                                                           :EOF:
************ / slAKA base                                                                                  :EOF:
************* / slMultiTerm                                                                               :EOF:
************** / someSL                                                                                  :EOF:
*************** / pNumAsText                                                                            :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number              :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number      :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

************ \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number     :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

********** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number     :EOF:
pAKA> IN: <EMPTY>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=6:
pAKA> unexpected end of input
pAKA> expecting any token or other text or number

********* \ !Unconsumed Error: pAKA: Unexpected end of input Expecting: any token other text or number        :EOF:
pMultiTermAka> IN: <EMPTY>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=6:
pMultiTermAka> unexpected end of input
pMultiTermAka> expecting any token or other text or number

******** \ !Unconsumed Error: pMultiTermAka: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******* / manyIndentation/deeper; calling someIndentation                                                       :EOF:
******** / someIndentation                                                                                     :EOF:
********* / myindented: consuming GoDeeper                                                                    :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********* \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (           :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

******** \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                  :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
calling myindented pNameParens> IN: <EMPTY>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=6:
calling myindented pNameParens> unexpected end of input
calling myindented pNameParens> expecting (, any token, or other text or number

****** \ !Unconsumed Error: calling myindented pNameParens: Unexpected end of input Expecting: ( any token other text or number :EOF:
pConstitutiveRule> IN: § ( "Hello" ) )
pConstitutiveRule> MATCH (EERR): § ( "Hello" ) )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=6:
pConstitutiveRule> unexpected end of input
pConstitutiveRule> expecting (, ), any token, or other text or number

***** \ !Unconsumed Error: pConstitutiveRule: Unexpected end of input Expecting: ( ) any token other text or number :EOF:
***** / pScenarioRule                                                                                                 :1_2:RuleMarker:
****** / pRuleLabel                                                                                                  :1_2:RuleMarker:
******* / $>|                                                                                                       :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

******* \ $>| has returned RuleMarker 1 "\167"                                                                       :1_3:GoDeeper:
******* / |>| calling $>>                                                                                            :1_3:GoDeeper:
******** / |>>/recurse                                                                                              :1_3:GoDeeper:
********* / |>>/recurse                                                                                             :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                         :1_3:Other "Hell:
********* / |>>/base                                                                                                :1_3:Other "Hell:
********** > |>>/base got "Hello"                                                                                 :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

********* \ |>>/base has returned ("Hello",0)                                                                      :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

******** \ |>>/recurse has returned ("Hello",1)                                                                     :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

******* \ |>| calling $>> has returned ("Hello",1)                                                                   :1_2:UnDeeper:
******* / someUndeepers                                                                                              :1_2:UnDeeper:
******** / manyUndeepers                                                                                              :1_3:UnDeeper:
********* / manyUndeepers                                                                                     :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

********* \ manyUndeepers has returned ((),0)                                                                 :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

******** \ manyUndeepers has returned ((),-1)                                                                  :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

******* \ someUndeepers has returned ((),-2)                                                                    :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

****** \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                         :EOF:
****** / undeepers                                                                                               :EOF:
******* > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                               :EOF:
******* > sameLine: success!                                                                                    :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                               :EOF:
****** / pExpect                                                                                                 :EOF:
pExpect> IN: <EMPTY>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=6:
pExpect> unexpected end of input
pExpect> expecting EXPECT

****** \ !Unconsumed Error: pExpect: Unexpected end of input Expecting: EXPECT                                   :EOF:
pScenarioRule> IN: § ( "Hello" ) )
pScenarioRule> MATCH (EERR): § ( "Hello" ) )
pScenarioRule> ERROR:
pScenarioRule> offset=6:
pScenarioRule> unexpected end of input
pScenarioRule> expecting ), EXPECT, GIVEN, or any token

***** \ !Unconsumed Error: pScenarioRule: Unexpected end of input Expecting: GIVEN EXPECT ) any token             :EOF:
***** / pHornlike                                                                                                     :1_2:RuleMarker:
****** / pSrcRef                                                                                                     :1_2:RuleMarker:
******* / pRuleLabel                                                                                                :1_2:RuleMarker:
******** / $>|                                                                                                     :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

******** \ $>| has returned RuleMarker 1 "\167"                                                                     :1_3:GoDeeper:
******** / |>| calling $>>                                                                                          :1_3:GoDeeper:
********* / |>>/recurse                                                                                            :1_3:GoDeeper:
********** / |>>/recurse                                                                                           :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                       :1_3:Other "Hell:
********** / |>>/base                                                                                              :1_3:Other "Hell:
*********** > |>>/base got "Hello"                                                                               :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

********** \ |>>/base has returned ("Hello",0)                                                                    :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

********* \ |>>/recurse has returned ("Hello",1)                                                                   :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

******** \ |>| calling $>> has returned ("Hello",1)                                                                 :1_2:UnDeeper:
******** / someUndeepers                                                                                            :1_2:UnDeeper:
********* / manyUndeepers                                                                                            :1_3:UnDeeper:
********** / manyUndeepers                                                                                   :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

********** \ manyUndeepers has returned ((),0)                                                               :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

********* \ manyUndeepers has returned ((),-1)                                                                :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

******** \ someUndeepers has returned ((),-2)                                                                  :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

******* \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                       :EOF:
pSrcRef> IN: § ( "Hello" ) )
pSrcRef> MATCH (EOK): § ( "Hello" ) )
pSrcRef> VALUE: (((Just ("\167",1,"Hello"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 0, srccol = 0, version = Nothing})),-1),[])

****** \ pSrcRef has returned ((Just ("\167",1,"Hello"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 0, srccol = 0, version = Nothing})),-1) :EOF:
****** / undeepers                                                                                               :EOF:
******* > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                               :EOF:
******* > sameLine: success!                                                                                    :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                               :EOF:
****** / pHornlike / permute                                                                                     :EOF:
******* / whenCase                                                                                              :EOF:
******** / whenMeansIf                                                                                         :EOF:
whenMeansIf> IN: <EMPTY>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected end of input
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected end of input Expecting: IF WHEN MEANS                    :EOF:
******** / Otherwise                                                                                           :EOF:
Otherwise> IN: <EMPTY>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected end of input
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected end of input Expecting: OTHERWISE                          :EOF:
whenCase> IN: <EMPTY>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected end of input
whenCase> expecting IF, MEANS, OTHERWISE, WHEN, or any token

******* \ !Unconsumed Error: whenCase: Unexpected end of input Expecting: IF WHEN MEANS OTHERWISE any token     :EOF:
******* / pHornlike/uponLimb                                                                                    :EOF:
******** / preambleParamText:[Upon]                                                                            :EOF:
********* / $>|                                                                                               :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting UPON

********* \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                   :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token      :EOF:
pHornlike/uponLimb> IN: <EMPTY>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=6:
pHornlike/uponLimb> unexpected end of input
pHornlike/uponLimb> expecting UPON or any token

******* \ !Unconsumed Error: pHornlike/uponLimb: Unexpected end of input Expecting: UPON any token              :EOF:
******* / whenCase                                                                                              :EOF:
******** / whenMeansIf                                                                                         :EOF:
whenMeansIf> IN: <EMPTY>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected end of input
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected end of input Expecting: IF WHEN MEANS                    :EOF:
******** / Otherwise                                                                                           :EOF:
Otherwise> IN: <EMPTY>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected end of input
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected end of input Expecting: OTHERWISE                          :EOF:
whenCase> IN: <EMPTY>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected end of input
whenCase> expecting IF, MEANS, OTHERWISE, WHEN, or any token

******* \ !Unconsumed Error: whenCase: Unexpected end of input Expecting: IF WHEN MEANS OTHERWISE any token     :EOF:
******* / pHornlike/givenLimb                                                                                   :EOF:
******** / preambleParamText:[Given]                                                                           :EOF:
********* / $>|                                                                                               :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting GIVEN

********* \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                  :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token    :EOF:
pHornlike/givenLimb> IN: <EMPTY>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=6:
pHornlike/givenLimb> unexpected end of input
pHornlike/givenLimb> expecting GIVEN or any token

******* \ !Unconsumed Error: pHornlike/givenLimb: Unexpected end of input Expecting: GIVEN any token            :EOF:
******* / whenCase                                                                                              :EOF:
******** / whenMeansIf                                                                                         :EOF:
whenMeansIf> IN: <EMPTY>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected end of input
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected end of input Expecting: IF WHEN MEANS                    :EOF:
******** / Otherwise                                                                                           :EOF:
Otherwise> IN: <EMPTY>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected end of input
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected end of input Expecting: OTHERWISE                          :EOF:
whenCase> IN: <EMPTY>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected end of input
whenCase> expecting IF, MEANS, OTHERWISE, WHEN, or any token

******* \ !Unconsumed Error: whenCase: Unexpected end of input Expecting: IF WHEN MEANS OTHERWISE any token     :EOF:
******* / pHornlike/ambitious                                                                                   :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: DEFINE DECIDE                            :EOF:
pHornlike/ambitious> IN: <EMPTY>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=6:
pHornlike/ambitious> unexpected end of input
pHornlike/ambitious> expecting DECIDE, DEFINE, or any token

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected end of input Expecting: DEFINE DECIDE any token    :EOF:
******* / pHornlike/someStructure                                                                               :EOF:
******** / manyIndentation/leaf?                                                                               :EOF:
********* / relPredNextlineWhen                                                                               :EOF:
********** / pRelPred optIndentedTuple whenCase                                                              :EOF:
*********** / optIndentedTuple                                                                              :EOF:
************ / optIndented                                                                                 :EOF:
************* / pRelPred                                                                                  :EOF:
************** / slRelPred                                                                               :EOF:
*************** / nested simpleHorn                                                                     :EOF:
**************** > |^|                                                                                 :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPConstraint                                                                          :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPBoolStructR                                                                         :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPMT                                                                                  :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slAKA                                                                             :EOF:
****************** / $*|                                                                             :EOF:
******************* / slAKA base                                                                    :EOF:
******************** / slMultiTerm                                                                 :EOF:
********************* / someSL                                                                    :EOF:
********************** / pNumAsText                                                              :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

****************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred> IN: <EMPTY>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected end of input
pRelPred> expecting any token or other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
optIndented> IN: <EMPTY>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected end of input
optIndented> expecting any token or other text or number

************ \ !Unconsumed Error: optIndented: Unexpected end of input Expecting: any token other text or number :EOF:
optIndentedTuple> IN: <EMPTY>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected end of input
optIndentedTuple> expecting any token or other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred optIndentedTuple whenCase> IN: <EMPTY>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected end of input
pRelPred optIndentedTuple whenCase> expecting any token or other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected end of input Expecting: any token other text or number :EOF:
relPredNextlineWhen> IN: <EMPTY>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected end of input
relPredNextlineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
********* / relPredSamelineWhen                                                                               :EOF:
********** / $*|                                                                                             :EOF:
*********** / slRelPred                                                                                     :EOF:
************ / nested simpleHorn                                                                           :EOF:
************* > |^|                                                                                       :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPConstraint                                                                                :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPBoolStructR                                                                               :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPMT                                                                                        :EOF:
************* / $*|                                                                                       :EOF:
************** / slAKA                                                                                   :EOF:
*************** / $*|                                                                                   :EOF:
**************** / slAKA base                                                                          :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

************ \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number  :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number       :EOF:
relPredSamelineWhen> IN: <EMPTY>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected end of input
relPredSamelineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******** / manyIndentation/deeper; calling someIndentation                                                     :EOF:
********* / someIndentation                                                                                   :EOF:
********** / myindented: consuming GoDeeper                                                                  :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (         :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

********* \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
pHornlike/someStructure> IN: <EMPTY>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected end of input
pHornlike/someStructure> expecting (, DECIDE, DEFINE, any token, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected end of input Expecting: DEFINE DECIDE ( any token other text or number :EOF:
******* / pHornlike/ambitious                                                                                   :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: DEFINE DECIDE                            :EOF:
pHornlike/ambitious> IN: <EMPTY>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=6:
pHornlike/ambitious> unexpected end of input
pHornlike/ambitious> expecting DECIDE, DEFINE, or any token

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected end of input Expecting: DEFINE DECIDE any token    :EOF:
******* / pHornlike/someStructure                                                                               :EOF:
******** / manyIndentation/leaf?                                                                               :EOF:
********* / relPredNextlineWhen                                                                               :EOF:
********** / pRelPred optIndentedTuple whenCase                                                              :EOF:
*********** / optIndentedTuple                                                                              :EOF:
************ / optIndented                                                                                 :EOF:
************* / pRelPred                                                                                  :EOF:
************** / slRelPred                                                                               :EOF:
*************** / nested simpleHorn                                                                     :EOF:
**************** > |^|                                                                                 :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPConstraint                                                                          :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPBoolStructR                                                                         :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPMT                                                                                  :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slAKA                                                                             :EOF:
****************** / $*|                                                                             :EOF:
******************* / slAKA base                                                                    :EOF:
******************** / slMultiTerm                                                                 :EOF:
********************* / someSL                                                                    :EOF:
********************** / pNumAsText                                                              :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

****************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred> IN: <EMPTY>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected end of input
pRelPred> expecting any token or other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
optIndented> IN: <EMPTY>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected end of input
optIndented> expecting any token or other text or number

************ \ !Unconsumed Error: optIndented: Unexpected end of input Expecting: any token other text or number :EOF:
optIndentedTuple> IN: <EMPTY>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected end of input
optIndentedTuple> expecting any token or other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred optIndentedTuple whenCase> IN: <EMPTY>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected end of input
pRelPred optIndentedTuple whenCase> expecting any token or other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected end of input Expecting: any token other text or number :EOF:
relPredNextlineWhen> IN: <EMPTY>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected end of input
relPredNextlineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
********* / relPredSamelineWhen                                                                               :EOF:
********** / $*|                                                                                             :EOF:
*********** / slRelPred                                                                                     :EOF:
************ / nested simpleHorn                                                                           :EOF:
************* > |^|                                                                                       :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPConstraint                                                                                :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPBoolStructR                                                                               :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPMT                                                                                        :EOF:
************* / $*|                                                                                       :EOF:
************** / slAKA                                                                                   :EOF:
*************** / $*|                                                                                   :EOF:
**************** / slAKA base                                                                          :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

************ \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number  :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number       :EOF:
relPredSamelineWhen> IN: <EMPTY>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected end of input
relPredSamelineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******** / manyIndentation/deeper; calling someIndentation                                                     :EOF:
********* / someIndentation                                                                                   :EOF:
********** / myindented: consuming GoDeeper                                                                  :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (         :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

********* \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
pHornlike/someStructure> IN: <EMPTY>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected end of input
pHornlike/someStructure> expecting (, DECIDE, DEFINE, any token, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected end of input Expecting: DEFINE DECIDE ( any token other text or number :EOF:
******* / pHornlike/givenLimb                                                                                   :EOF:
******** / preambleParamText:[Given]                                                                           :EOF:
********* / $>|                                                                                               :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting GIVEN

********* \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                  :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token    :EOF:
pHornlike/givenLimb> IN: <EMPTY>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=6:
pHornlike/givenLimb> unexpected end of input
pHornlike/givenLimb> expecting GIVEN or any token

******* \ !Unconsumed Error: pHornlike/givenLimb: Unexpected end of input Expecting: GIVEN any token            :EOF:
******* / whenCase                                                                                              :EOF:
******** / whenMeansIf                                                                                         :EOF:
whenMeansIf> IN: <EMPTY>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected end of input
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected end of input Expecting: IF WHEN MEANS                    :EOF:
******** / Otherwise                                                                                           :EOF:
Otherwise> IN: <EMPTY>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected end of input
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected end of input Expecting: OTHERWISE                          :EOF:
whenCase> IN: <EMPTY>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected end of input
whenCase> expecting IF, MEANS, OTHERWISE, WHEN, or any token

******* \ !Unconsumed Error: whenCase: Unexpected end of input Expecting: IF WHEN MEANS OTHERWISE any token     :EOF:
******* / pHornlike/uponLimb                                                                                    :EOF:
******** / preambleParamText:[Upon]                                                                            :EOF:
********* / $>|                                                                                               :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting UPON

********* \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                   :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token      :EOF:
pHornlike/uponLimb> IN: <EMPTY>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=6:
pHornlike/uponLimb> unexpected end of input
pHornlike/uponLimb> expecting UPON or any token

******* \ !Unconsumed Error: pHornlike/uponLimb: Unexpected end of input Expecting: UPON any token              :EOF:
******* / whenCase                                                                                              :EOF:
******** / whenMeansIf                                                                                         :EOF:
whenMeansIf> IN: <EMPTY>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected end of input
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected end of input Expecting: IF WHEN MEANS                    :EOF:
******** / Otherwise                                                                                           :EOF:
Otherwise> IN: <EMPTY>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected end of input
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected end of input Expecting: OTHERWISE                          :EOF:
whenCase> IN: <EMPTY>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected end of input
whenCase> expecting IF, MEANS, OTHERWISE, WHEN, or any token

******* \ !Unconsumed Error: whenCase: Unexpected end of input Expecting: IF WHEN MEANS OTHERWISE any token     :EOF:
******* / pHornlike/ambitious                                                                                   :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: DEFINE DECIDE                            :EOF:
pHornlike/ambitious> IN: <EMPTY>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=6:
pHornlike/ambitious> unexpected end of input
pHornlike/ambitious> expecting DECIDE, DEFINE, or any token

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected end of input Expecting: DEFINE DECIDE any token    :EOF:
******* / pHornlike/someStructure                                                                               :EOF:
******** / manyIndentation/leaf?                                                                               :EOF:
********* / relPredNextlineWhen                                                                               :EOF:
********** / pRelPred optIndentedTuple whenCase                                                              :EOF:
*********** / optIndentedTuple                                                                              :EOF:
************ / optIndented                                                                                 :EOF:
************* / pRelPred                                                                                  :EOF:
************** / slRelPred                                                                               :EOF:
*************** / nested simpleHorn                                                                     :EOF:
**************** > |^|                                                                                 :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPConstraint                                                                          :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPBoolStructR                                                                         :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPMT                                                                                  :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slAKA                                                                             :EOF:
****************** / $*|                                                                             :EOF:
******************* / slAKA base                                                                    :EOF:
******************** / slMultiTerm                                                                 :EOF:
********************* / someSL                                                                    :EOF:
********************** / pNumAsText                                                              :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

****************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred> IN: <EMPTY>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected end of input
pRelPred> expecting any token or other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
optIndented> IN: <EMPTY>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected end of input
optIndented> expecting any token or other text or number

************ \ !Unconsumed Error: optIndented: Unexpected end of input Expecting: any token other text or number :EOF:
optIndentedTuple> IN: <EMPTY>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected end of input
optIndentedTuple> expecting any token or other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred optIndentedTuple whenCase> IN: <EMPTY>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected end of input
pRelPred optIndentedTuple whenCase> expecting any token or other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected end of input Expecting: any token other text or number :EOF:
relPredNextlineWhen> IN: <EMPTY>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected end of input
relPredNextlineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
********* / relPredSamelineWhen                                                                               :EOF:
********** / $*|                                                                                             :EOF:
*********** / slRelPred                                                                                     :EOF:
************ / nested simpleHorn                                                                           :EOF:
************* > |^|                                                                                       :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPConstraint                                                                                :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPBoolStructR                                                                               :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPMT                                                                                        :EOF:
************* / $*|                                                                                       :EOF:
************** / slAKA                                                                                   :EOF:
*************** / $*|                                                                                   :EOF:
**************** / slAKA base                                                                          :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

************ \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number  :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number       :EOF:
relPredSamelineWhen> IN: <EMPTY>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected end of input
relPredSamelineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******** / manyIndentation/deeper; calling someIndentation                                                     :EOF:
********* / someIndentation                                                                                   :EOF:
********** / myindented: consuming GoDeeper                                                                  :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (         :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

********* \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
pHornlike/someStructure> IN: <EMPTY>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected end of input
pHornlike/someStructure> expecting (, DECIDE, DEFINE, any token, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected end of input Expecting: DEFINE DECIDE ( any token other text or number :EOF:
******* / pHornlike/ambitious                                                                                   :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: DEFINE DECIDE                            :EOF:
pHornlike/ambitious> IN: <EMPTY>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=6:
pHornlike/ambitious> unexpected end of input
pHornlike/ambitious> expecting DECIDE, DEFINE, or any token

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected end of input Expecting: DEFINE DECIDE any token    :EOF:
******* / pHornlike/someStructure                                                                               :EOF:
******** / manyIndentation/leaf?                                                                               :EOF:
********* / relPredNextlineWhen                                                                               :EOF:
********** / pRelPred optIndentedTuple whenCase                                                              :EOF:
*********** / optIndentedTuple                                                                              :EOF:
************ / optIndented                                                                                 :EOF:
************* / pRelPred                                                                                  :EOF:
************** / slRelPred                                                                               :EOF:
*************** / nested simpleHorn                                                                     :EOF:
**************** > |^|                                                                                 :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPConstraint                                                                          :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPBoolStructR                                                                         :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPMT                                                                                  :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slAKA                                                                             :EOF:
****************** / $*|                                                                             :EOF:
******************* / slAKA base                                                                    :EOF:
******************** / slMultiTerm                                                                 :EOF:
********************* / someSL                                                                    :EOF:
********************** / pNumAsText                                                              :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

****************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred> IN: <EMPTY>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected end of input
pRelPred> expecting any token or other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
optIndented> IN: <EMPTY>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected end of input
optIndented> expecting any token or other text or number

************ \ !Unconsumed Error: optIndented: Unexpected end of input Expecting: any token other text or number :EOF:
optIndentedTuple> IN: <EMPTY>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected end of input
optIndentedTuple> expecting any token or other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred optIndentedTuple whenCase> IN: <EMPTY>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected end of input
pRelPred optIndentedTuple whenCase> expecting any token or other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected end of input Expecting: any token other text or number :EOF:
relPredNextlineWhen> IN: <EMPTY>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected end of input
relPredNextlineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
********* / relPredSamelineWhen                                                                               :EOF:
********** / $*|                                                                                             :EOF:
*********** / slRelPred                                                                                     :EOF:
************ / nested simpleHorn                                                                           :EOF:
************* > |^|                                                                                       :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPConstraint                                                                                :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPBoolStructR                                                                               :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPMT                                                                                        :EOF:
************* / $*|                                                                                       :EOF:
************** / slAKA                                                                                   :EOF:
*************** / $*|                                                                                   :EOF:
**************** / slAKA base                                                                          :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

************ \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number  :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number       :EOF:
relPredSamelineWhen> IN: <EMPTY>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected end of input
relPredSamelineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******** / manyIndentation/deeper; calling someIndentation                                                     :EOF:
********* / someIndentation                                                                                   :EOF:
********** / myindented: consuming GoDeeper                                                                  :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (         :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

********* \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
pHornlike/someStructure> IN: <EMPTY>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected end of input
pHornlike/someStructure> expecting (, DECIDE, DEFINE, any token, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected end of input Expecting: DEFINE DECIDE ( any token other text or number :EOF:
******* / pHornlike/ambitious                                                                                   :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected end of input
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: DEFINE DECIDE                            :EOF:
pHornlike/ambitious> IN: <EMPTY>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=6:
pHornlike/ambitious> unexpected end of input
pHornlike/ambitious> expecting DECIDE, DEFINE, or any token

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected end of input Expecting: DEFINE DECIDE any token    :EOF:
******* / pHornlike/someStructure                                                                               :EOF:
******** / manyIndentation/leaf?                                                                               :EOF:
********* / relPredNextlineWhen                                                                               :EOF:
********** / pRelPred optIndentedTuple whenCase                                                              :EOF:
*********** / optIndentedTuple                                                                              :EOF:
************ / optIndented                                                                                 :EOF:
************* / pRelPred                                                                                  :EOF:
************** / slRelPred                                                                               :EOF:
*************** / nested simpleHorn                                                                     :EOF:
**************** > |^|                                                                                 :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPConstraint                                                                          :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPBoolStructR                                                                         :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
*************** / RPMT                                                                                  :EOF:
**************** / $*|                                                                                 :EOF:
***************** / slAKA                                                                             :EOF:
****************** / $*|                                                                             :EOF:
******************* / slAKA base                                                                    :EOF:
******************** / slMultiTerm                                                                 :EOF:
********************* / someSL                                                                    :EOF:
********************** / pNumAsText                                                              :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

****************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

**************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred> IN: <EMPTY>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected end of input
pRelPred> expecting any token or other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
optIndented> IN: <EMPTY>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected end of input
optIndented> expecting any token or other text or number

************ \ !Unconsumed Error: optIndented: Unexpected end of input Expecting: any token other text or number :EOF:
optIndentedTuple> IN: <EMPTY>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected end of input
optIndentedTuple> expecting any token or other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected end of input Expecting: any token other text or number :EOF:
pRelPred optIndentedTuple whenCase> IN: <EMPTY>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected end of input
pRelPred optIndentedTuple whenCase> expecting any token or other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected end of input Expecting: any token other text or number :EOF:
relPredNextlineWhen> IN: <EMPTY>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected end of input
relPredNextlineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
********* / relPredSamelineWhen                                                                               :EOF:
********** / $*|                                                                                             :EOF:
*********** / slRelPred                                                                                     :EOF:
************ / nested simpleHorn                                                                           :EOF:
************* > |^|                                                                                       :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
nested simpleHorn> IN: <EMPTY>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting any token or other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPConstraint                                                                                :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPConstraint> IN: <EMPTY>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected end of input
RPConstraint> expecting any token or other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPBoolStructR                                                                               :EOF:
************* / $*|                                                                                       :EOF:
************** / slMultiTerm                                                                             :EOF:
*************** / someSL                                                                                :EOF:
**************** / pNumAsText                                                                          :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number            :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number    :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPBoolStructR> IN: <EMPTY>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected end of input
RPBoolStructR> expecting any token or other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected end of input Expecting: any token other text or number :EOF:
************ / RPMT                                                                                        :EOF:
************* / $*|                                                                                       :EOF:
************** / slAKA                                                                                   :EOF:
*************** / $*|                                                                                   :EOF:
**************** / slAKA base                                                                          :EOF:
***************** / slMultiTerm                                                                       :EOF:
****************** / someSL                                                                          :EOF:
******************* / pNumAsText                                                                    :EOF:
pNumAsText> IN: <EMPTY>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected end of input
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected end of input Expecting: number      :EOF:
someSL> IN: <EMPTY>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected end of input
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected end of input Expecting: other text or number :EOF:
slMultiTerm> IN: <EMPTY>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected end of input
slMultiTerm> expecting any token or other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA base> IN: <EMPTY>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected end of input
slAKA base> expecting any token or other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

*************** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
slAKA> IN: <EMPTY>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected end of input
slAKA> expecting any token or other text or number

************** \ !Unconsumed Error: slAKA: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

************* \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number :EOF:
RPMT> IN: <EMPTY>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected end of input
RPMT> expecting any token or other text or number

************ \ !Unconsumed Error: RPMT: Unexpected end of input Expecting: any token other text or number  :EOF:
slRelPred> IN: <EMPTY>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected end of input
slRelPred> expecting any token or other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected end of input Expecting: any token other text or number :EOF:
$*|> IN: <EMPTY>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected end of input
$*|> expecting any token or other text or number

********** \ !Unconsumed Error: $*|: Unexpected end of input Expecting: any token other text or number       :EOF:
relPredSamelineWhen> IN: <EMPTY>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected end of input
relPredSamelineWhen> expecting any token or other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected end of input Expecting: any token other text or number :EOF:
manyIndentation/leaf?> IN: <EMPTY>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected end of input
manyIndentation/leaf?> expecting any token or other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected end of input Expecting: any token other text or number :EOF:
******** / manyIndentation/deeper; calling someIndentation                                                     :EOF:
********* / someIndentation                                                                                   :EOF:
********** / myindented: consuming GoDeeper                                                                  :EOF:
myindented: consuming GoDeeper> IN: <EMPTY>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected end of input
myindented: consuming GoDeeper> expecting (

********** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected end of input Expecting: (         :EOF:
someIndentation> IN: <EMPTY>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected end of input
someIndentation> expecting ( or any token

********* \ !Unconsumed Error: someIndentation: Unexpected end of input Expecting: ( any token                :EOF:
manyIndentation/deeper; calling someIndentation> IN: <EMPTY>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected end of input
manyIndentation/deeper; calling someIndentation> expecting ( or any token

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected end of input Expecting: ( any token :EOF:
pHornlike/someStructure> IN: <EMPTY>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected end of input
pHornlike/someStructure> expecting (, DECIDE, DEFINE, any token, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected end of input Expecting: DEFINE DECIDE ( any token other text or number :EOF:
pHornlike / permute> IN: <EMPTY>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=6:
pHornlike / permute> unexpected end of input
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, any token, or other text or number

****** \ !Unconsumed Error: pHornlike / permute: Unexpected end of input Expecting: IF WHEN MEANS GIVEN UPON DEFINE DECIDE OTHERWISE ( any token other text or number :EOF:
pHornlike> IN: § ( "Hello" ) )
pHornlike> MATCH (EERR): § ( "Hello" ) )
pHornlike> ERROR:
pHornlike> offset=6:
pHornlike> unexpected end of input
pHornlike> expecting (, ), DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, any token, or other text or number

***** \ !Unconsumed Error: pHornlike: Unexpected end of input Expecting: IF WHEN MEANS GIVEN UPON DEFINE DECIDE OTHERWISE ( ) any token other text or number :EOF:
***** / pRuleLabel                                                                                                    :1_2:RuleMarker:
****** / $>|                                                                                                         :1_2:RuleMarker:
$>|> IN: § ( "Hello" ) )
$>|> MATCH (COK): §
$>|> VALUE: (RuleMarker 1 "\167",[])

****** \ $>| has returned RuleMarker 1 "\167"                                                                         :1_3:GoDeeper:
****** / |>| calling $>>                                                                                              :1_3:GoDeeper:
******* / |>>/recurse                                                                                                :1_3:GoDeeper:
******** / |>>/recurse                                                                                               :1_3:Other "Hell:
|>>/recurse> IN: "Hello" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected "Hello"
|>>/recurse> expecting (

******** \ !Unconsumed Error: |>>/recurse: Unexpected "Hello" Expecting: (                                           :1_3:Other "Hell:
******** / |>>/base                                                                                                  :1_3:Other "Hell:
********* > |>>/base got "Hello"                                                                                   :1_2:UnDeeper:
|>>/base> IN: "Hello" ) )
|>>/base> MATCH (COK): "Hello"
|>>/base> VALUE: (("Hello",0),[])

******** \ |>>/base has returned ("Hello",0)                                                                        :1_2:UnDeeper:
|>>/recurse> IN: ( "Hello" ) )
|>>/recurse> MATCH (COK): ( "Hello"
|>>/recurse> VALUE: (("Hello",1),[])

******* \ |>>/recurse has returned ("Hello",1)                                                                       :1_2:UnDeeper:
|>| calling $>>> IN: ( "Hello" ) )
|>| calling $>>> MATCH (COK): ( "Hello"
|>| calling $>>> VALUE: (("Hello",1),[])

****** \ |>| calling $>> has returned ("Hello",1)                                                                     :1_2:UnDeeper:
****** / someUndeepers                                                                                                :1_2:UnDeeper:
******* / manyUndeepers                                                                                                :1_3:UnDeeper:
******** / manyUndeepers                                                                                       :EOF:
manyUndeepers> IN: <EMPTY>
manyUndeepers> MATCH (EOK): <EMPTY>
manyUndeepers> VALUE: (((),0),[])

******** \ manyUndeepers has returned ((),0)                                                                   :EOF:
manyUndeepers> IN: )
manyUndeepers> MATCH (COK): )
manyUndeepers> VALUE: (((),-1),[])

******* \ manyUndeepers has returned ((),-1)                                                                    :EOF:
someUndeepers> IN: ) )
someUndeepers> MATCH (COK): ) )
someUndeepers> VALUE: (((),-2),[])

****** \ someUndeepers has returned ((),-2)                                                                      :EOF:
pRuleLabel> IN: § ( "Hello" ) )
pRuleLabel> MATCH (EOK): § ( "Hello" ) )
pRuleLabel> VALUE: ((("\167",1,"Hello"),-1),[])

***** \ pRuleLabel has returned (("\167",1,"Hello"),-1)                                                           :EOF:
***** / undeepers                                                                                                 :EOF:
****** > sameLine/undeepers: reached end of line; now need to clear -1 UnDeepers                                 :EOF:
****** > sameLine: success!                                                                                      :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                 :EOF:
pRule> IN: § ( "Hello" ) )
pRule> MATCH (EOK): § ( "Hello" ) )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",1,"Hello"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})},[])

**** \ pRule has returned RuleGroup {rlabel = Just ("\167",1,"Hello"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})} :EOF:
**** / myindented: consuming UnDeeper                                                                              :EOF:
myindented: consuming UnDeeper> IN: <EMPTY>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=6:
myindented: consuming UnDeeper> unexpected end of input
myindented: consuming UnDeeper> expecting )

**** \ !Unconsumed Error: myindented: consuming UnDeeper: Unexpected end of input Expecting: )                     :EOF:
pRule: unwrapping indentation and recursing> IN: ( § ( "Hello" ) )
pRule: unwrapping indentation and recursing> MATCH (CERR): ( § ( "Hello" ) )
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=6:
pRule: unwrapping indentation and recursing> unexpected end of input
pRule: unwrapping indentation and recursing> expecting ), DECIDE ... IS ... Horn rule, EOL, any token, constitutive rule, ontology definition, regulative rule, scenario rule, or standalone rule section heading

*** \ !Consumed Error: pRule: unwrapping indentation and recursing: Unexpected end of input Expecting: EOL ) DECIDE ... IS ... Horn rule any token constitutive rule ontology definition regulative rule scenario rule standalone rule section heading :EOF:
pRule> IN: ( § ( "Hello" ) )
pRule> MATCH (CERR): ( § ( "Hello" ) )
pRule> ERROR:
pRule> offset=6:
pRule> unexpected end of input
pRule> expecting ), DECIDE ... IS ... Horn rule, EOL, any token, constitutive rule, ontology definition, regulative rule, scenario rule, or standalone rule section heading

** \ !Consumed Error: pRule: Unexpected end of input Expecting: EOL ) DECIDE ... IS ... Horn rule any token constitutive rule ontology definition regulative rule scenario rule standalone rule section heading :EOF:

megaparsing
  should parse a rule label FAILED [1]

Failures:

  test/Spec.hs:218:9: 
  1) megaparsing should parse a rule label
       expected: [RuleGroup {rlabel = Just ("\167",1,"Hello"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})}]
       but parsing failed with error:
       1:3:
       unexpected end of input
       expecting ), DECIDE ... IS ... Horn rule, EOL, any token, constitutive rule, ontology definition, regulative rule, scenario rule, or standalone rule section heading
       
          §   ✳ Hello
       

  To rerun use: --match "/megaparsing/should parse a rule label/"

Randomized with seed 1138357878

Finished in 0.0479 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

