// Generated by purs bundle 0.14.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  exports["runExceptT"] = runExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $323 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $324 = Data_Eq.eq(dictEq);
          return function ($325) {
              return $323($324($325));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  exports["Alt"] = Alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);  
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Show = $PS["Data.Show"];                              
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $205 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($206) {
                  return $205(f($206));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $207 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($208) {
              return $207(rev($208));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  }; 
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                        
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["compare"] = compare;
  exports["ordString"] = ordString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["functorMap"] = functorMap;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 64, column 1 - line 68, column 89): " + [ v.constructor.name ]);
  });
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
              return function (k) {
                  return function (v) {
                      return Foreign_Object_ST.poke(k)(v)(s$prime);
                  };
              };
          })(s)(m);
      });
  }; 
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 209, column 15 - line 211, column 25): " + [ v.constructor.name ]);
          };
      };
  };
  exports["singleton"] = singleton;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["alter"] = alter;
  exports["union"] = union;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Generic.Class"] = $PS["Foreign.Generic.Class"] || {};
  var exports = $PS["Foreign.Generic.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];        
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  var GenericEncodeArgs = function (encodeArgs) {
      this.encodeArgs = encodeArgs;
  };
  var GenericEncode = function (encodeOpts) {
      this.encodeOpts = encodeOpts;
  };
  var EncodeWithOptions = function (encodeWithOptions) {
      this.encodeWithOptions = encodeWithOptions;
  };
  var Encode = function (encode) {
      this.encode = encode;
  }; 
  var stringEncode = new Encode(Foreign.unsafeToForeign);                                                                              
  var encodeWithOptions = function (dict) {
      return dict.encodeWithOptions;
  };
  var genericEncodeArgsArgument = function (dictEncodeWithOptions) {
      return new GenericEncodeArgs(function (opts) {
          return function (v) {
              return Data_List.singleton(encodeWithOptions(dictEncodeWithOptions)(opts)(v));
          };
      });
  };
  var encodeOpts = function (dict) {
      return dict.encodeOpts;
  }; 
  var genericEncodeSum = function (dictGenericEncode) {
      return function (dictGenericEncode1) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return encodeOpts(dictGenericEncode)({
                          sumEncoding: opts.sumEncoding,
                          unwrapSingleConstructors: false,
                          unwrapSingleArguments: opts.unwrapSingleArguments,
                          fieldTransform: opts.fieldTransform
                      })(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return encodeOpts(dictGenericEncode1)({
                          sumEncoding: opts.sumEncoding,
                          unwrapSingleConstructors: false,
                          unwrapSingleArguments: opts.unwrapSingleArguments,
                          fieldTransform: opts.fieldTransform
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Foreign.Generic.Class (line 351, column 1 - line 355, column 85): " + [ opts.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var encodeArgs = function (dict) {
      return dict.encodeArgs;
  };
  var genericEncodeArgsProduct = function (dictGenericEncodeArgs) {
      return function (dictGenericEncodeArgs1) {
          return new GenericEncodeArgs(function (opts) {
              return function (v) {
                  return Data_Semigroup.append(Data_List_Types.semigroupList)(encodeArgs(dictGenericEncodeArgs)(opts)(v.value0))(encodeArgs(dictGenericEncodeArgs1)(opts)(v.value1));
              };
          });
      };
  };
  var genericEncodeConstructor = function (dictIsSymbol) {
      return function (dictGenericEncodeArgs) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  var unwrapArguments = function (v1) {
                      if (v1.length === 0) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v1.length === 1 && opts.unwrapSingleArguments) {
                          return new Data_Maybe.Just(v1[0]);
                      };
                      return new Data_Maybe.Just(Foreign.unsafeToForeign(v1));
                  };
                  var encodeArgsArray = (function () {
                      var $150 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
                      var $151 = encodeArgs(dictGenericEncodeArgs)(opts);
                      return function ($152) {
                          return unwrapArguments($150($151($152)));
                      };
                  })();
                  var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  if (opts.unwrapSingleConstructors) {
                      return Data_Maybe.maybe(Foreign.unsafeToForeign({}))(Foreign.unsafeToForeign)(encodeArgsArray(v));
                  };
                  return Foreign.unsafeToForeign(Foreign_Object.union(Foreign_Object.singleton(opts.sumEncoding.value0.tagFieldName)(Foreign.unsafeToForeign(opts.sumEncoding.value0.constructorTagTransform(ctorName))))(Data_Maybe.maybe(Foreign_Object.empty)(Foreign_Object.singleton(opts.sumEncoding.value0.contentsFieldName))(encodeArgsArray(v))));
              };
          });
      };
  };
  var encode = function (dict) {
      return dict.encode;
  };
  var encodeWithOptionsOther = function (dictEncode) {
      return new EncodeWithOptions(function (v) {
          return encode(dictEncode);
      });
  };
  var defaultOptions = {
      sumEncoding: new TaggedObject({
          tagFieldName: "tag",
          contentsFieldName: "contents",
          constructorTagTransform: Control_Category.identity(Control_Category.categoryFn)
      }),
      unwrapSingleConstructors: false,
      unwrapSingleArguments: true,
      fieldTransform: Control_Category.identity(Control_Category.categoryFn)
  };                                                                               
  var arrayEncode = function (dictEncode) {
      return new Encode((function () {
          var $164 = Data_Functor.map(Data_Functor.functorArray)(encode(dictEncode));
          return function ($165) {
              return Foreign.unsafeToForeign($164($165));
          };
      })());
  };
  exports["encode"] = encode;
  exports["encodeOpts"] = encodeOpts;
  exports["defaultOptions"] = defaultOptions;
  exports["Encode"] = Encode;
  exports["stringEncode"] = stringEncode;
  exports["arrayEncode"] = arrayEncode;
  exports["encodeWithOptionsOther"] = encodeWithOptionsOther;
  exports["genericEncodeConstructor"] = genericEncodeConstructor;
  exports["genericEncodeSum"] = genericEncodeSum;
  exports["genericEncodeArgsArgument"] = genericEncodeArgsArgument;
  exports["genericEncodeArgsProduct"] = genericEncodeArgsProduct;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Generic"] = $PS["Foreign.Generic"] || {};
  var exports = $PS["Foreign.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var genericEncode = function (dictGeneric) {
      return function (dictGenericEncode) {
          return function (opts) {
              var $10 = Foreign_Generic_Class.encodeOpts(dictGenericEncode)(opts);
              var $11 = Data_Generic_Rep.from(dictGeneric);
              return function ($12) {
                  return $10($11($12));
              };
          };
      };
  };
  exports["genericEncode"] = genericEncode;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Foreign = $PS["Foreign"];                
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableForeign = function (dictMonad) {
      return new Indexable(function (dictIndex) {
          return index(dictIndex);
      });
  };
  var hasPropertyImpl = function (v) {
      return function (v1) {
          if (Foreign.isNull(v1)) {
              return false;
          };
          if (Foreign.isUndefined(v1)) {
              return false;
          };
          if (Foreign.typeOf(v1) === "object" || Foreign.typeOf(v1) === "function") {
              return $foreign.unsafeHasProperty(v, v1);
          };
          return false;
      };
  };
  var hasOwnPropertyImpl = function (v) {
      return function (v1) {
          if (Foreign.isNull(v1)) {
              return false;
          };
          if (Foreign.isUndefined(v1)) {
              return false;
          };
          if (Foreign.typeOf(v1) === "object" || Foreign.typeOf(v1) === "function") {
              return $foreign.unsafeHasOwnProperty(v, v1);
          };
          return false;
      };
  };
  var indexString = function (dictMonad) {
      return new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp(dictMonad)));
  };
  exports["readProp"] = readProp;
  exports["ix"] = ix;
  exports["indexString"] = indexString;
  exports["indexableForeign"] = indexableForeign;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
})(PS["Foreign.Keys"] = PS["Foreign.Keys"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Keys"] = $PS["Foreign.Keys"] || {};
  var exports = $PS["Foreign.Keys"];
  var $foreign = $PS["Foreign.Keys"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Foreign = $PS["Foreign"];                
  var keys = function (dictMonad) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", "null"));
          };
          if (Foreign.isUndefined(value)) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", "undefined"));
          };
          if (Foreign.typeOf(value) === "object") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))($foreign.unsafeKeys(value));
          };
          if (Data_Boolean.otherwise) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value)));
          };
          throw new Error("Failed pattern match at Foreign.Keys (line 15, column 1 - line 15, column 60): " + [ value.constructor.name ]);
      };
  };
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Option"] = $PS["Option"] || {};
  var exports = $PS["Option"];
  var Control_Category = $PS["Control.Category"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record_1 = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  var ShowOption = function (showOption) {
      this.showOption = showOption;
  };
  var FromRecordRequired = function (fromRecordRequired) {
      this.fromRecordRequired = fromRecordRequired;
  };
  var FromRecordOption = function (fromRecordOption) {
      this.fromRecordOption = fromRecordOption;
  };
  var FromRecord = function (fromRecord$prime) {
      this["fromRecord'"] = fromRecord$prime;
  };
  var showOptionNil = new ShowOption(function (v) {
      return function (v1) {
          return Data_List_Types.Nil.value;
      };
  });
  var showOption = function (dict) {
      return dict.showOption;
  };
  var showOptionOption = function (dictRowToList) {
      return function (dictShowOption) {
          return new Data_Show.Show(function (option) {
              var go$prime = function ($copy_acc) {
                  return function ($copy_x$prime) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, x$prime) {
                          if (x$prime instanceof Data_List_Types.Cons) {
                              $tco_var_acc = acc + (", " + x$prime.value0);
                              $copy_x$prime = x$prime.value1;
                              return;
                          };
                          if (x$prime instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          throw new Error("Failed pattern match at Option (line 253, column 18 - line 255, column 27): " + [ x$prime.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_x$prime);
                      };
                      return $tco_result;
                  };
              };
              var go = function (x$prime) {
                  if (x$prime instanceof Data_List_Types.Cons && x$prime.value1 instanceof Data_List_Types.Nil) {
                      return " " + (x$prime.value0 + " ");
                  };
                  if (x$prime instanceof Data_List_Types.Cons) {
                      return " " + (go$prime(x$prime.value0)(x$prime.value1) + " ");
                  };
                  if (x$prime instanceof Data_List_Types.Nil) {
                      return "";
                  };
                  throw new Error("Failed pattern match at Option (line 247, column 13 - line 250, column 26): " + [ x$prime.constructor.name ]);
              };
              var fields = showOption(dictShowOption)($$Proxy.value)(option);
              return "(Option.fromRecord {" + (go(fields) + "})");
          });
      };
  };
  var required = function (record$prime) {
      return record$prime.required;
  };
  var recordFromRecordAndOption = function (record) {
      return {
          optional: record.optional,
          required: record.required
      };
  };
  var optional = function (record$prime) {
      return record$prime.optional;
  };
  var fromRecordRequiredNil = new FromRecordRequired(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var fromRecordRequired = function (dict) {
      return dict.fromRecordRequired;
  };
  var fromRecordOption = function (dict) {
      return dict.fromRecordOption;
  };
  var fromRecordAny = function (dictFromRecordOption) {
      return function (dictFromRecordRequired) {
          return function (dictUnion) {
              return function (dictRowToList) {
                  return function (dictRowToList1) {
                      return new FromRecord(function (record) {
                          return recordFromRecordAndOption({
                              optional: fromRecordOption(dictFromRecordOption)($$Proxy.value)(record),
                              required: Record_Builder.build(fromRecordRequired(dictFromRecordRequired)($$Proxy.value)(record))({})
                          });
                      });
                  };
              };
          };
      };
  };
  var fromRecord$prime = function (dict) {
      return dict["fromRecord'"];
  };
  var fromRecord = function (dictFromRecord) {
      return function (record$prime) {
          var record = fromRecord$prime(dictFromRecord)(record$prime);
          return optional(record);
      };
  };
  var empty = Foreign_Object.empty;
  var fromRecordOptionNil = new FromRecordOption(function (v) {
      return function (v1) {
          return empty;
      };
  });
  var alter$prime$prime = function (dict) {
      return dict["alter''"];
  };
  var alter$prime = function (dictIsSymbol) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  var go = function (value$prime) {
                      return f(value$prime);
                  };
                  var option = Foreign_Object.alter(go)(key)(v1);
                  var value = f(Foreign_Object.lookup(key)(v1));
                  return {
                      option: option,
                      value: value
                  };
              };
          };
      };
  };                                      
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (proxy) {
              return function (option) {
                  var go = function (value) {
                      return value;
                  };
                  return (alter$prime(dictIsSymbol)(go)(proxy)(option)).value;
              };
          };
      };
  };
  var showOptionCons = function (dictIsSymbol) {
      return function (dictShow) {
          return function (dictShowOption) {
              return function (dictCons) {
                  return new ShowOption(function (v) {
                      return function (option) {
                          var rest = showOption(dictShowOption)($$Proxy.value)(option);
                          var value$prime = get(dictIsSymbol)()(Data_Symbol.SProxy.value)(option);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          if (value$prime instanceof Data_Maybe.Just) {
                              return new Data_List_Types.Cons(key + (": " + Data_Show.show(dictShow)(value$prime.value0)), rest);
                          };
                          if (value$prime instanceof Data_Maybe.Nothing) {
                              return rest;
                          };
                          throw new Error("Failed pattern match at Option (line 2237, column 25 - line 2239, column 31): " + [ value$prime.constructor.name ]);
                      };
                  });
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (proxy) {
                  return function (value) {
                      return function (option) {
                          var go = function (v) {
                              return new Data_Maybe.Just(value);
                          };
                          return (alter$prime(dictIsSymbol)(go)(proxy)(option)).option;
                      };
                  };
              };
          };
      };
  };
  var fromRecordOptionCons = function (dictIsSymbol) {
      return function (dictFromRecordOption) {
          return function (dictCons) {
              return function (dictCons1) {
                  return function (dictLacks) {
                      return new FromRecordOption(function (v) {
                          return function (record) {
                              var option = fromRecordOption(dictFromRecordOption)($$Proxy.value)(record);
                              var value = Record_1.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(record);
                              return insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(value)(option);
                          };
                      });
                  };
              };
          };
      };
  };                                          
  var insertField = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (proxy) {
                  return function (option) {
                      var go = function (v) {
                          return Data_Maybe.Nothing.value;
                      };
                      return (alter$prime(dictIsSymbol)(go)(proxy)(option)).option;
                  };
              };
          };
      };
  };
  var fromRecordOptionConsMaybe = function (dictIsSymbol) {
      return function (dictFromRecordOption) {
          return function (dictCons) {
              return function (dictCons1) {
                  return function (dictLacks) {
                      return new FromRecordOption(function (v) {
                          return function (record) {
                              var option = fromRecordOption(dictFromRecordOption)($$Proxy.value)(record);
                              var value$prime = Record_1.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(record);
                              if (value$prime instanceof Data_Maybe.Just) {
                                  return insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(value$prime.value0)(option);
                              };
                              if (value$prime instanceof Data_Maybe.Nothing) {
                                  return insertField(dictIsSymbol)()()(Data_Symbol.SProxy.value)(option);
                              };
                              throw new Error("Failed pattern match at Option (line 920, column 31 - line 922, column 51): " + [ value$prime.constructor.name ]);
                          };
                      });
                  };
              };
          };
      };
  };                                            
  var alter = function (dictAlter) {
      return function (record) {
          return function (option) {
              return alter$prime$prime(dictAlter)(record)(option);
          };
      };
  };
  exports["fromRecord"] = fromRecord;
  exports["empty"] = empty;
  exports["showOptionOption"] = showOptionOption;
  exports["fromRecordAny"] = fromRecordAny;
  exports["fromRecordOptionNil"] = fromRecordOptionNil;
  exports["fromRecordOptionConsMaybe"] = fromRecordOptionConsMaybe;
  exports["fromRecordOptionCons"] = fromRecordOptionCons;
  exports["fromRecordRequiredNil"] = fromRecordRequiredNil;
  exports["showOptionNil"] = showOptionNil;
  exports["showOptionCons"] = showOptionCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["AnyAll.Types"] = $PS["AnyAll.Types"] || {};
  var exports = $PS["AnyAll.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic = $PS["Foreign.Generic"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_Keys = $PS["Foreign.Keys"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Option = $PS["Option"];                
  var View = (function () {
      function View() {

      };
      View.value = new View();
      return View;
  })();
  var Hide = (function () {
      function Hide() {

      };
      Hide.value = new Hide();
      return Hide;
  })();
  var Ask = (function () {
      function Ask() {

      };
      Ask.value = new Ask();
      return Ask;
  })();
  var PPR = function (x) {
      return x;
  };
  var Pre = (function () {
      function Pre(value0) {
          this.value0 = value0;
      };
      Pre.create = function (value0) {
          return new Pre(value0);
      };
      return Pre;
  })();
  var PrePost = (function () {
      function PrePost(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PrePost.create = function (value0) {
          return function (value1) {
              return new PrePost(value0, value1);
          };
      };
      return PrePost;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var All = (function () {
      function All(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      All.create = function (value0) {
          return function (value1) {
              return new All(value0, value1);
          };
      };
      return All;
  })();
  var Any = (function () {
      function Any(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Any.create = function (value0) {
          return function (value1) {
              return new Any(value0, value1);
          };
      };
      return Any;
  })();
  var Soft = (function () {
      function Soft() {

      };
      Soft.value = new Soft();
      return Soft;
  })();
  var Hard = (function () {
      function Hard() {

      };
      Hard.value = new Hard();
      return Hard;
  })();
  var DPNormal = (function () {
      function DPNormal() {

      };
      DPNormal.value = new DPNormal();
      return DPNormal;
  })();
  var QoutJS = function (x) {
      return x;
  };
  var Default = function (x) {
      return x;
  };
  var Marking = function (x) {
      return x;
  };   
  var And = (function () {
      function And() {

      };
      And.value = new And();
      return And;
  })();
  var Or = (function () {
      function Or() {

      };
      Or.value = new Or();
      return Or;
  })();
  var Simply = (function () {
      function Simply(value0) {
          this.value0 = value0;
      };
      Simply.create = function (value0) {
          return new Simply(value0);
      };
      return Simply;
  })();
  var Q = function (x) {
      return x;
  };
  var mkQ = function (sv) {
      return function (ao) {
          return function (pp) {
              return function (m) {
                  return function (c) {
                      return {
                          shouldView: sv,
                          andOr: ao,
                          prePost: pp,
                          mark: m,
                          children: c
                      };
                  };
              };
          };
      };
  };
  var maybe2string = function (dictShow) {
      return function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Data_Show.show(dictShow)(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return "undefined";
          };
          throw new Error("Failed pattern match at AnyAll.Types (line 167, column 1 - line 167, column 32): " + [ v.constructor.name ]);
      };
  };
  var markup = function (x) {
      return Marking(Data_Functor.map(Data_Map_Internal.functorMap)(Default)(x));
  };
  var readMarking = function (fm) {
      var readDefPart = function (fm1) {
          return function (mk) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(fm1)(mk))(Foreign_Index.readProp(Data_Identity.monadIdentity)("source")))(Foreign.readString(Data_Identity.monadIdentity)))(function (source) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(fm1)(mk))(Foreign_Index.readProp(Data_Identity.monadIdentity)("value")))(Foreign.readString(Data_Identity.monadIdentity)))(function (value) {
                      var mb = (function () {
                          if (value === "true") {
                              return new Data_Maybe.Just(true);
                          };
                          if (value === "false") {
                              return new Data_Maybe.Just(false);
                          };
                          if (value === "undefined") {
                              return Data_Maybe.Nothing.value;
                          };
                          return Data_Maybe.Nothing.value;
                      })();
                      var lr = (function () {
                          if (source === "default") {
                              return Data_Either.Left.create;
                          };
                          if (source === "user") {
                              return Data_Either.Right.create;
                          };
                          return Data_Either.Left.create;
                      })();
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(mk, lr(mb)));
                  });
              });
          };
      };
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Keys.keys(Data_Identity.monadIdentity)(fm))(function (mkeys) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Functor.functorArray)(readDefPart(fm))(mkeys)))(function (astuples) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(markup(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(astuples)));
          });
      });
  };
  var getMarking = function (v) {
      return v;
  }; 
  var genericShouldView = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof View) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Hide) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof Ask) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 172, column 1 - line 172, column 58): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return View.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return Hide.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
          return Ask.value;
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 172, column 1 - line 172, column 58): " + [ x.constructor.name ]);
  });
  var showShouldView = new Data_Show.Show(function (eta) {
      return Data_Show_Generic.genericShow(genericShouldView)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "View";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Hide";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "Ask";
      })))))(eta);
  });
  var genericQoutJS = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericPrePostRecord = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showPrePostRecord = new Data_Show.Show(function (eta) {
      return Data_Show_Generic.genericShow(genericPrePostRecord)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Option.showOptionOption()(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "post";
      }))(Data_Show.showString)(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "pre";
      }))(Data_Show.showString)(Option.showOptionNil)())())))(new Data_Symbol.IsSymbol(function () {
          return "PPR";
      })))(eta);
  });
  var showQoutJS = new Data_Show.Show(function (eta) {
      return Data_Show_Generic.genericShow(genericQoutJS)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Option.showOptionOption()(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "andOr";
      }))(Option.showOptionOption()(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "children";
      }))(Data_Show.showArray(showQoutJS))(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "contents";
      }))(Data_Show.showString)(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "tag";
      }))(Data_Show.showString)(Option.showOptionNil)())())()))(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "mark";
      }))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "source";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "value";
      }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString)))(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "post";
      }))(Data_Show.showString)(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "prePost";
      }))(showPrePostRecord)(Option.showOptionCons(new Data_Symbol.IsSymbol(function () {
          return "shouldView";
      }))(Data_Show.showString)(Option.showOptionNil)())())())())())))(new Data_Symbol.IsSymbol(function () {
          return "QoutJS";
      })))(eta);
  });
  var genericLabel = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Pre) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof PrePost) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1));
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 49, column 1 - line 49, column 52): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Pre(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new PrePost(x.value0.value0, x.value0.value1);
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 49, column 1 - line 49, column 52): " + [ x.constructor.name ]);
  });
  var genericItem = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Leaf) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof All) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
      };
      if (x instanceof Any) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)));
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 39, column 1 - line 39, column 50): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Leaf(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new All(x.value0.value0.value0, x.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
          return new Any(x.value0.value0.value0, x.value0.value0.value1);
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 39, column 1 - line 39, column 50): " + [ x.constructor.name ]);
  });
  var eqShouldView = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof View && y instanceof View) {
              return true;
          };
          if (x instanceof Hide && y instanceof Hide) {
              return true;
          };
          if (x instanceof Ask && y instanceof Ask) {
              return true;
          };
          return false;
      };
  });
  var encodeLabel = function (dictEncode) {
      return new Foreign_Generic_Class.Encode(function (eta) {
          return Foreign_Generic.genericEncode(genericLabel)(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
              return "Pre";
          }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(dictEncode))))(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
              return "PrePost";
          }))(Foreign_Generic_Class.genericEncodeArgsProduct(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(dictEncode)))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(dictEncode))))))(Foreign_Generic_Class.defaultOptions)(eta);
      });
  };
  var encodeString = function (dictEncode) {
      return new Foreign_Generic_Class.Encode(function (eta) {
          return Foreign_Generic.genericEncode(genericItem)(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
              return "Leaf";
          }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(dictEncode))))(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
              return "All";
          }))(Foreign_Generic_Class.genericEncodeArgsProduct(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(encodeLabel(dictEncode))))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.arrayEncode(encodeString(dictEncode)))))))(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
              return "Any";
          }))(Foreign_Generic_Class.genericEncodeArgsProduct(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(encodeLabel(dictEncode))))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.arrayEncode(encodeString(dictEncode)))))))))(Foreign_Generic_Class.defaultOptions)(eta);
      });
  };
  var dumpPrePost = function (v) {
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Pre) {
          return PPR(Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
              return "pre";
          }))(Option.fromRecordOptionNil)()()())(Option.fromRecordRequiredNil)()()())({
              pre: v.value0.value0
          }));
      };
      if (v instanceof Data_Maybe.Just && v.value0 instanceof PrePost) {
          return PPR(Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
              return "post";
          }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
              return "pre";
          }))(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
              pre: v.value0.value0,
              post: v.value0.value1
          }));
      };
      if (v instanceof Data_Maybe.Nothing) {
          return PPR(Option.empty);
      };
      throw new Error("Failed pattern match at AnyAll.Types (line 162, column 1 - line 162, column 53): " + [ v.constructor.name ]);
  };
  var dumpDefault = function (dictShow) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return {
                  source: "default",
                  value: maybe2string(dictShow)(v.value0)
              };
          };
          if (v instanceof Data_Either.Right) {
              return {
                  source: "user",
                  value: maybe2string(dictShow)(v.value0)
              };
          };
          throw new Error("Failed pattern match at AnyAll.Types (line 97, column 1 - line 97, column 62): " + [ v.constructor.name ]);
      };
  }; 
  var encodeMarking = new Foreign_Generic_Class.Encode(function (v) {
      return Foreign.unsafeToForeign(Foreign_Object.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Map_Internal.functorMap)(dumpDefault(Data_Show.showBoolean))(v))));
  });
  var qoutjs = function (v) {
      return QoutJS(Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
          return "andOr";
      }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
          return "mark";
      }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
          return "prePost";
      }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
          return "shouldView";
      }))(Option.fromRecordOptionNil)()()())()()())()()())()()())(Option.fromRecordRequiredNil)()()())({
          shouldView: Data_Show.show(showShouldView)(v.shouldView),
          andOr: (function () {
              if (v.andOr instanceof And) {
                  return Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
                      return "children";
                  }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
                      return "tag";
                  }))(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
                      tag: "All",
                      children: Data_Functor.map(Data_Functor.functorArray)(qoutjs)(v.children)
                  });
              };
              if (v.andOr instanceof Or) {
                  return Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
                      return "children";
                  }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
                      return "tag";
                  }))(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
                      tag: "Any",
                      children: Data_Functor.map(Data_Functor.functorArray)(qoutjs)(v.children)
                  });
              };
              if (v.andOr instanceof Simply) {
                  return Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionConsMaybe(new Data_Symbol.IsSymbol(function () {
                      return "contents";
                  }))(Option.fromRecordOptionCons(new Data_Symbol.IsSymbol(function () {
                      return "tag";
                  }))(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
                      tag: "Leaf",
                      contents: new Data_Maybe.Just(v.andOr.value0)
                  });
              };
              throw new Error("Failed pattern match at AnyAll.Types (line 149, column 45 - line 151, column 124): " + [ v.andOr.constructor.name ]);
          })(),
          prePost: dumpPrePost(v.prePost),
          mark: dumpDefault(Data_Show.showBoolean)(v.mark)
      }));
  };
  exports["Leaf"] = Leaf;
  exports["All"] = All;
  exports["Any"] = Any;
  exports["Pre"] = Pre;
  exports["readMarking"] = readMarking;
  exports["markup"] = markup;
  exports["getMarking"] = getMarking;
  exports["Default"] = Default;
  exports["Q"] = Q;
  exports["mkQ"] = mkQ;
  exports["qoutjs"] = qoutjs;
  exports["View"] = View;
  exports["Hide"] = Hide;
  exports["Ask"] = Ask;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Simply"] = Simply;
  exports["DPNormal"] = DPNormal;
  exports["Soft"] = Soft;
  exports["Hard"] = Hard;
  exports["encodeString"] = encodeString;
  exports["encodeMarking"] = encodeMarking;
  exports["showQoutJS"] = showQoutJS;
  exports["eqShouldView"] = eqShouldView;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["AnyAll.Relevance"] = $PS["AnyAll.Relevance"] || {};
  var exports = $PS["AnyAll.Relevance"];
  var AnyAll_Types = $PS["AnyAll.Types"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var evaluate = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof AnyAll_Types.Soft && v2 instanceof AnyAll_Types.Leaf) {
                  var v3 = Data_Map_Internal.lookup(Data_Ord.ordString)(v2.value0)(v1);
                  if (v3 instanceof Data_Maybe.Just && (v3.value0 instanceof Data_Either.Right && v3.value0.value0 instanceof Data_Maybe.Just)) {
                      return new Data_Maybe.Just(v3.value0.value0.value0);
                  };
                  if (v3 instanceof Data_Maybe.Just && (v3.value0 instanceof Data_Either.Left && v3.value0.value0 instanceof Data_Maybe.Just)) {
                      return new Data_Maybe.Just(v3.value0.value0.value0);
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof AnyAll_Types.Hard && v2 instanceof AnyAll_Types.Leaf) {
                  var v3 = Data_Map_Internal.lookup(Data_Ord.ordString)(v2.value0)(v1);
                  if (v3 instanceof Data_Maybe.Just && (v3.value0 instanceof Data_Either.Right && v3.value0.value0 instanceof Data_Maybe.Just)) {
                      return new Data_Maybe.Just(v3.value0.value0.value0);
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (v2 instanceof AnyAll_Types.Any) {
                  if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(new Data_Maybe.Just(true))(Data_Functor.map(Data_Functor.functorArray)(evaluate(v)(v1))(v2.value1))) {
                      return new Data_Maybe.Just(true);
                  };
                  if (Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v3) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(v3)(new Data_Maybe.Just(false));
                  })(Data_Functor.map(Data_Functor.functorArray)(evaluate(v)(v1))(v2.value1))) {
                      return new Data_Maybe.Just(false);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
              };
              if (v2 instanceof AnyAll_Types.All) {
                  if (Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v3) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(v3)(new Data_Maybe.Just(true));
                  })(Data_Functor.map(Data_Functor.functorArray)(evaluate(v)(v1))(v2.value1))) {
                      return new Data_Maybe.Just(true);
                  };
                  if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(new Data_Maybe.Just(false))(Data_Functor.map(Data_Functor.functorArray)(evaluate(v)(v1))(v2.value1))) {
                      return new Data_Maybe.Just(false);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
              };
              throw new Error("Failed pattern match at AnyAll.Relevance (line 55, column 1 - line 55, column 61): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var relevant = function (sh) {
      return function (dp) {
          return function (marking) {
              return function (parentValue) {
                  return function (self) {
                      var getChildren = function (v) {
                          if (v instanceof AnyAll_Types.Leaf) {
                              return [  ];
                          };
                          if (v instanceof AnyAll_Types.Any) {
                              return v.value1;
                          };
                          if (v instanceof AnyAll_Types.All) {
                              return v.value1;
                          };
                          throw new Error("Failed pattern match at AnyAll.Relevance (line 42, column 5 - line 42, column 30): " + [ v.constructor.name ]);
                      };
                      var ask2view = function (v) {
                          if (v.shouldView instanceof AnyAll_Types.Ask) {
                              return AnyAll_Types.Q({
                                  shouldView: AnyAll_Types.View.value,
                                  andOr: v.andOr,
                                  prePost: v.prePost,
                                  mark: v.mark,
                                  children: v.children
                              });
                          };
                          return v;
                      };
                      var ask2hide = function (v) {
                          if (v.shouldView instanceof AnyAll_Types.Ask) {
                              return {
                                  shouldView: AnyAll_Types.Hide.value,
                                  andOr: v.andOr,
                                  prePost: v.prePost,
                                  mark: v.mark,
                                  children: v.children
                              };
                          };
                          return v;
                      };
                      var selfValue = evaluate(sh)(marking)(self);
                      var paintedChildren = Data_Functor.map(Data_Functor.functorArray)(relevant(sh)(dp)(marking)(selfValue))(getChildren(self));
                      var initVis = (function () {
                          var $43 = Data_Maybe.isJust(parentValue);
                          if ($43) {
                              var $44 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(parentValue)(selfValue);
                              if ($44) {
                                  return AnyAll_Types.View.value;
                              };
                              return AnyAll_Types.Hide.value;
                          };
                          var $45 = Data_Maybe.isJust(evaluate(AnyAll_Types.Hard.value)(marking)(self));
                          if ($45) {
                              return AnyAll_Types.View.value;
                          };
                          return AnyAll_Types.Ask.value;
                      })();
                      var repaintedChildren = (function () {
                          var $46 = Data_Eq.notEq(AnyAll_Types.eqShouldView)(initVis)(AnyAll_Types.Hide.value);
                          if ($46) {
                              return paintedChildren;
                          };
                          return Data_Functor.map(Data_Functor.functorArray)(ask2hide)(paintedChildren);
                      })();
                      if (self instanceof AnyAll_Types.Leaf) {
                          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(self.value0)(AnyAll_Types.getMarking(marking));
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                              return {
                                  shouldView: AnyAll_Types.View.value,
                                  andOr: new AnyAll_Types.Simply(self.value0),
                                  prePost: Data_Maybe.Nothing.value,
                                  mark: AnyAll_Types.Default(new Data_Either.Right(v.value0.value0)),
                                  children: [  ]
                              };
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                              return AnyAll_Types.mkQ((function () {
                                  var $51 = Data_Eq.notEq(AnyAll_Types.eqShouldView)(initVis)(AnyAll_Types.Hide.value);
                                  if ($51) {
                                      return AnyAll_Types.Ask.value;
                                  };
                                  return AnyAll_Types.Hide.value;
                              })())(new AnyAll_Types.Simply(self.value0))(Data_Maybe.Nothing.value)(AnyAll_Types.Default(new Data_Either.Left(v.value0.value0)))([  ]);
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return AnyAll_Types.mkQ((function () {
                                  var $54 = Data_Eq.notEq(AnyAll_Types.eqShouldView)(initVis)(AnyAll_Types.Hide.value);
                                  if ($54) {
                                      return AnyAll_Types.Ask.value;
                                  };
                                  return AnyAll_Types.Hide.value;
                              })())(new AnyAll_Types.Simply(self.value0))(Data_Maybe.Nothing.value)(AnyAll_Types.Default(new Data_Either.Left(Data_Maybe.Nothing.value)))([  ]);
                          };
                          throw new Error("Failed pattern match at AnyAll.Relevance (line 31, column 24 - line 38, column 137): " + [ v.constructor.name ]);
                      };
                      if (self instanceof AnyAll_Types.Any) {
                          return ask2view(AnyAll_Types.mkQ(initVis)(AnyAll_Types.Or.value)(new Data_Maybe.Just(self.value0))(AnyAll_Types.Default(new Data_Either.Left(selfValue)))(repaintedChildren));
                      };
                      if (self instanceof AnyAll_Types.All) {
                          return ask2view(AnyAll_Types.mkQ(initVis)(AnyAll_Types.And.value)(new Data_Maybe.Just(self.value0))(AnyAll_Types.Default(new Data_Either.Left(selfValue)))(repaintedChildren));
                      };
                      throw new Error("Failed pattern match at AnyAll.Relevance (line 30, column 3 - line 40, column 117): " + [ self.constructor.name ]);
                  };
              };
          };
      };
  };
  exports["relevant"] = relevant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var AnyAll_Relevance = $PS["AnyAll.Relevance"];
  var AnyAll_Types = $PS["AnyAll.Types"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Console = $PS["Effect.Console"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var soft = AnyAll_Types.Soft.value;
  var marking1 = AnyAll_Types.markup(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("walk")(new Data_Either.Right(new Data_Maybe.Just(true))), Data_Tuple.Tuple.create("run")(new Data_Either.Left(new Data_Maybe.Just(true))), Data_Tuple.Tuple.create("eat")(new Data_Either.Right(new Data_Maybe.Just(true))), Data_Tuple.Tuple.create("drink")(new Data_Either.Left(new Data_Maybe.Just(false))) ]));
  var marking1_encoded = Foreign_Generic_Class.encode(AnyAll_Types.encodeMarking)(marking1);
  var howDoWeEven = function (arg1) {
      return function (arg2) {
          return "arg 1 = " + (arg1 + ("; arg 2 = " + Data_Show.show(Data_Show.showInt)(arg2)));
      };
  };
  var hard = AnyAll_Types.Hard.value;
  var fromNode2 = function (x) {
      return "hello node, you said " + x;
  };
  var fromNode1 = "hello node";
  var example1 = new AnyAll_Types.All(new AnyAll_Types.Pre("all of"), [ new AnyAll_Types.Leaf("walk"), new AnyAll_Types.Leaf("run"), new AnyAll_Types.Any(new AnyAll_Types.Pre("either"), [ new AnyAll_Types.Leaf("eat"), new AnyAll_Types.Leaf("drink") ]) ]);
  var example1_encoded = Foreign_Generic_Class.encode(AnyAll_Types.encodeString(Foreign_Generic_Class.stringEncode))(example1);
  var itemLibrary = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("example1", example1) ]);
  var getItemByName = function (itemname) {
      var v = Data_Map_Internal.lookup(Data_Ord.ordString)(itemname)(itemLibrary);
      if (v instanceof Data_Maybe.Nothing) {
          return Partial_Unsafe.unsafeCrashWith("anyall: unable to find rule item named " + itemname);
      };
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Main (line 95, column 3 - line 97, column 24): " + [ v.constructor.name ]);
  };
  var output1 = AnyAll_Types.qoutjs(AnyAll_Relevance.relevant(AnyAll_Types.Hard.value)(AnyAll_Types.DPNormal.value)(marking1)(Data_Maybe.Nothing.value)(example1));
  var fromNode3 = output1;
  var main = function __do() {
      Effect_Console.log("\ud83c\udf5d")();
      return Effect_Console.log(Data_Show.show(AnyAll_Types.showQoutJS)(fromNode3))();
  };
  var decodeMarking = function (marking) {
      var eitherm = Control_Monad_Except.runExcept(AnyAll_Types.readMarking(marking));
      return Data_Either.either(function (e) {
          return Partial_Unsafe.unsafeCrashWith("error in decodeMarking" + Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(e));
      })(function (m) {
          return m;
      })(eitherm);
  };
  var marking1_decoded = decodeMarking(marking1_encoded);
  var marking1_recoded = function (dictEncode) {
      return function (x) {
          return decodeMarking(Foreign_Generic_Class.encode(dictEncode)(x));
      };
  };
  var paint = function (h) {
      return function (fm) {
          return function (item) {
              return AnyAll_Types.qoutjs(AnyAll_Relevance.relevant(h)(AnyAll_Types.DPNormal.value)(decodeMarking(fm))(Data_Maybe.Nothing.value)(item));
          };
      };
  };
  exports["main"] = main;
  exports["fromNode1"] = fromNode1;
  exports["fromNode2"] = fromNode2;
  exports["fromNode3"] = fromNode3;
  exports["example1"] = example1;
  exports["example1_encoded"] = example1_encoded;
  exports["marking1"] = marking1;
  exports["marking1_encoded"] = marking1_encoded;
  exports["marking1_decoded"] = marking1_decoded;
  exports["marking1_recoded"] = marking1_recoded;
  exports["decodeMarking"] = decodeMarking;
  exports["paint"] = paint;
  exports["hard"] = hard;
  exports["soft"] = soft;
  exports["howDoWeEven"] = howDoWeEven;
  exports["getItemByName"] = getItemByName;
})(PS);
module.exports = PS["Main"];
